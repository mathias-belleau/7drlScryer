/*! For license information please see main.f9dd233b331837caebaf.js.LICENSE.txt */
!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./src/index.js")}({"./node_modules/geotic/build/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e2){throw _e2},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();return normalCompletion=step.done,step},e:function(_e3){didErr=!0,err=_e3},f:function(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty2(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty2(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Component",(function(){return Component})),__webpack_require__.d(__webpack_exports__,"Engine",(function(){return Engine}));var camelCase=function(input,options){if("string"!=typeof input&&!Array.isArray(input))throw new TypeError("Expected the input to be `string | string[]`");options=_objectSpread(_objectSpread({},{pascalCase:!1}),options);var x;return 0===(input=Array.isArray(input)?input.map((function(x){return x.trim()})).filter((function(x){return x.length})).join("-"):input.trim()).length?"":1===input.length?options.pascalCase?input.toLocaleUpperCase():input.toLocaleLowerCase():(input!==input.toLocaleLowerCase()&&(input=function(string){for(var isLastCharLower=!1,isLastCharUpper=!1,isLastLastCharUpper=!1,i=0;i<string.length;i++){var character=string[i];isLastCharLower&&/(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/.test(character)?(string=string.slice(0,i)+"-"+string.slice(i),isLastCharLower=!1,isLastLastCharUpper=isLastCharUpper,isLastCharUpper=!0,i++):isLastCharUpper&&isLastLastCharUpper&&/(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43])/.test(character)?(string=string.slice(0,i-1)+"-"+string.slice(i-1),isLastLastCharUpper=isLastCharUpper,isLastCharUpper=!1,isLastCharLower=!0):(isLastCharLower=character.toLocaleLowerCase()===character&&character.toLocaleUpperCase()!==character,isLastLastCharUpper=isLastCharUpper,isLastCharUpper=character.toLocaleUpperCase()===character&&character.toLocaleLowerCase()!==character)}return string}(input)),input=input.replace(/^[_.\- ]+/,"").toLocaleLowerCase().replace(/[ \x2D\._]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(_,p1){return p1.toLocaleUpperCase()})).replace(/[0-9]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(m){return m.toLocaleUpperCase()})),x=input,options.pascalCase?x.charAt(0).toLocaleUpperCase()+x.slice(1):x)},camelcase=camelCase,_default=camelCase;camelcase.default=_default;var camelCache={},camelString=function(value){var result=camelCache[value];return result||(camelCache[value]=camelcase(value),camelCache[value])},ComponentRegistry=function(){function ComponentRegistry(){_classCallCheck(this,ComponentRegistry),_defineProperty(this,"_cbit",0),_defineProperty(this,"_map",{})}return _createClass(ComponentRegistry,[{key:"register",value:function(clazz){var key=camelString(clazz.name);clazz.prototype._ckey=key,clazz.prototype._cbit=BigInt(++this._cbit),this._map[key]=clazz}},{key:"get",value:function(key){return this._map[key]}}]),ComponentRegistry}(),isMergeableObject=function(value){return function(value){return!!value&&"object"===_typeof(value)}(value)&&!function(value){var stringValue=Object.prototype.toString.call(value);return"[object RegExp]"===stringValue||"[object Date]"===stringValue||function(value){return value.$$typeof===REACT_ELEMENT_TYPE}(value)}(value)};var REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function cloneUnlessOtherwiseSpecified(value,options){return!1!==options.clone&&options.isMergeableObject(value)?deepmerge((val=value,Array.isArray(val)?[]:{}),value,options):value;var val}function defaultArrayMerge(target,source,options){return target.concat(source).map((function(element){return cloneUnlessOtherwiseSpecified(element,options)}))}function getKeys(target){return Object.keys(target).concat(function(target){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(target).filter((function(symbol){return target.propertyIsEnumerable(symbol)})):[]}(target))}function propertyIsOnObject(object,property){try{return property in object}catch(_){return!1}}function mergeObject(target,source,options){var destination={};return options.isMergeableObject(target)&&getKeys(target).forEach((function(key){destination[key]=cloneUnlessOtherwiseSpecified(target[key],options)})),getKeys(source).forEach((function(key){(function(target,key){return propertyIsOnObject(target,key)&&!(Object.hasOwnProperty.call(target,key)&&Object.propertyIsEnumerable.call(target,key))})(target,key)||(propertyIsOnObject(target,key)&&options.isMergeableObject(source[key])?destination[key]=function(key,options){if(!options.customMerge)return deepmerge;var customMerge=options.customMerge(key);return"function"==typeof customMerge?customMerge:deepmerge}(key,options)(target[key],source[key],options):destination[key]=cloneUnlessOtherwiseSpecified(source[key],options))})),destination}function deepmerge(target,source,options){(options=options||{}).arrayMerge=options.arrayMerge||defaultArrayMerge,options.isMergeableObject=options.isMergeableObject||isMergeableObject,options.cloneUnlessOtherwiseSpecified=cloneUnlessOtherwiseSpecified;var sourceIsArray=Array.isArray(source);return sourceIsArray===Array.isArray(target)?sourceIsArray?options.arrayMerge(target,source,options):mergeObject(target,source,options):cloneUnlessOtherwiseSpecified(source,options)}deepmerge.all=function(array,options){if(!Array.isArray(array))throw new Error("first argument should be an array");return array.reduce((function(prev,next){return deepmerge(prev,next,options)}),{})};var cjs=deepmerge,PrefabComponent=function(){function PrefabComponent(clazz){var properties=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},overwrite=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];_classCallCheck(this,PrefabComponent),this.clazz=clazz,this.properties=properties,this.overwrite=overwrite}return _createClass(PrefabComponent,[{key:"applyToEntity",value:function(entity){var initialProps=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.clazz.allowMultiple&&entity.has(this.clazz)){if(!this.overwrite)return;var comp=entity[this.clazz.prototype._ckey];entity.remove(comp)}var props=cjs(this.properties,initialProps);entity.add(this.clazz,props)}}]),PrefabComponent}(),Prefab=function(){function Prefab(name){_classCallCheck(this,Prefab),_defineProperty(this,"name",""),_defineProperty(this,"inherit",[]),_defineProperty(this,"components",[]),this.name=name}return _createClass(Prefab,[{key:"addComponent",value:function(prefabComponent){this.components.push(prefabComponent)}},{key:"applyToEntity",value:function(entity){var prefabProps=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.inherit.forEach((function(parent){parent.applyToEntity(entity,prefabProps)}));var arrComps={};return this.components.forEach((function(component){var clazz=component.clazz,ckey=clazz.prototype._ckey,initialCompProps={};if(clazz.allowMultiple)if(clazz.keyProperty){var key=component.properties[clazz.keyProperty];prefabProps[ckey]&&prefabProps[ckey][key]&&(initialCompProps=prefabProps[ckey][key])}else arrComps[ckey]||(arrComps[ckey]=0),prefabProps[ckey]&&prefabProps[ckey][arrComps[ckey]]&&(initialCompProps=prefabProps[ckey][arrComps[ckey]]),arrComps[ckey]++;else initialCompProps=prefabProps[ckey];component.applyToEntity(entity,initialCompProps)})),entity}}]),Prefab}(),PrefabRegistry=function(){function PrefabRegistry(engine){_classCallCheck(this,PrefabRegistry),_defineProperty(this,"_prefabs",{}),_defineProperty(this,"_engine",null),this._engine=engine}return _createClass(PrefabRegistry,[{key:"deserialize",value:function(data){var _this=this,registered=this.get(data.name);if(registered)return registered;var inherit,prefab=new Prefab(data.name);return inherit=Array.isArray(data.inherit)?data.inherit:"string"==typeof data.inherit?[data.inherit]:[],prefab.inherit=inherit.map((function(parent){var ref=_this.get(parent);return ref||(console.warn('Prefab "'.concat(data.name,'" cannot inherit from Prefab "').concat(parent,'" because is not registered yet! Prefabs must be registered in the right order.')),parent)})),(data.components||[]).forEach((function(componentData){if("string"==typeof componentData){var ckey=camelString(componentData),clazz=_this._engine._components.get(ckey);if(clazz)return void prefab.addComponent(new PrefabComponent(clazz))}if("object"===_typeof(componentData)){var _ckey=camelString(componentData.type),_clazz=_this._engine._components.get(_ckey);if(_clazz)return void prefab.addComponent(new PrefabComponent(_clazz,componentData.properties,componentData.overwrite))}console.warn('Unrecognized component reference "'.concat(componentData,'" in prefab "').concat(data.name,'". Ensure the component is registered before the prefab.'))})),prefab}},{key:"register",value:function(data){var prefab=this.deserialize(data);this._prefabs[prefab.name]=prefab}},{key:"get",value:function(name){return this._prefabs[name]}},{key:"create",value:function(world,name){var properties=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},prefab=this.get(name);if(prefab){var entity=world.createEntity();return entity._qeligible=!1,prefab.applyToEntity(entity,properties),entity._qeligible=!0,entity._candidacy(),entity}console.warn('Could not instantiate prefab "'.concat(name,'" since it is not registered'))}}]),PrefabRegistry}(),Component=function(){function Component(){var properties=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,Component),Object.assign(this,this.constructor.properties,properties)}return _createClass(Component,[{key:"world",get:function(){return this.entity.world}},{key:"allowMultiple",get:function(){return this.constructor.allowMultiple}},{key:"keyProperty",get:function(){return this.constructor.keyProperty}},{key:"destroy",value:function(){this.entity.remove(this)}},{key:"_onDestroyed",value:function(){this.onDestroyed(),delete this.entity}},{key:"_onEvent",value:function(evt){this.onEvent(evt),"function"==typeof this[evt.handlerName]&&this[evt.handlerName](evt)}},{key:"_onAttached",value:function(entity){this.entity=entity,this.onAttached(entity)}},{key:"serialize",value:function(){var ob={};for(var key in this.constructor.properties)ob[key]=this[key];return ob}},{key:"onAttached",value:function(entity){}},{key:"onDestroyed",value:function(){}},{key:"onEvent",value:function(evt){}}]),Component}();_defineProperty(Component,"allowMultiple",!1),_defineProperty(Component,"keyProperty",null),_defineProperty(Component,"properties",{});var EntityEvent=function(){function EntityEvent(name){var data=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,EntityEvent),_defineProperty(this,"data",{}),_defineProperty(this,"prevented",!1),_defineProperty(this,"handled",!1),this.name=name,this.data=data,this.handlerName=camelString("on ".concat(this.name))}return _createClass(EntityEvent,[{key:"is",value:function(name){return this.name===name}},{key:"handle",value:function(){this.handled=!0,this.prevented=!0}},{key:"prevent",value:function(){this.prevented=!0}}]),EntityEvent}(),ONE=1n,subtractBit=function(num,bit){return num&~(1n<<bit)},addBit=function(num,bit){return num|ONE<<bit},bitIntersection=function(n1,n2){return n1&n2},serializeComponent=function(component){return component.serialize()},serializeComponentKeyed=function(ob){var ser={};for(var k in ob)ser[k]=serializeComponent(ob[k]);return ser},Entity=function(){function Entity(world,id){_classCallCheck(this,Entity),_defineProperty(this,"_cbits",0n),_defineProperty(this,"_qeligible",!0),this.world=world,this.id=id,this.components={},this.isDestroyed=!1}return _createClass(Entity,[{key:"_candidacy",value:function(){this._qeligible&&this.world._candidate(this)}},{key:"add",value:function(clazz,properties){var component=new clazz(properties);component.keyProperty?function(entity,component){var key=component._ckey;entity.components[key]||(entity[key]={},entity.components[key]={}),entity[key][component[component.keyProperty]]=component,entity.components[key][component[component.keyProperty]]=component}(this,component):component.allowMultiple?function(entity,component){var key=component._ckey;entity.components[key]||(entity[key]=[],entity.components[key]=[]),entity[key].push(component),entity.components[key].push(component)}(this,component):function(entity,component){var key=component._ckey;entity[key]=component,entity.components[key]=component}(this,component),this._cbits=addBit(this._cbits,component._cbit),component._onAttached(this),this._candidacy()}},{key:"has",value:function(clazz){return num=this._cbits,bit=clazz.prototype._cbit,(num>>bit)%2n!==0n;var num,bit}},{key:"remove",value:function(component){component.keyProperty?function(entity,component){var key=component._ckey,keyProp=component[component.keyProperty];delete entity[key][keyProp],delete entity.components[key][keyProp],Object.keys(entity[key]).length<=0&&(delete entity[key],delete entity.components[key],entity._cbits=subtractBit(entity._cbits,component._cbit),entity._candidacy())}(this,component):component.allowMultiple?function(entity,component){var key=component._ckey,idx=entity[key].indexOf(component);entity[key].splice(idx,1),entity.components[key].splice(idx,1),entity[key].length<=0&&(delete entity[key],delete entity.components[key],entity._cbits=subtractBit(entity._cbits,component._cbit),entity._candidacy())}(this,component):function(entity,component){var key=component._ckey;delete entity[key],delete entity.components[key],entity._cbits=subtractBit(entity._cbits,component._cbit),entity._candidacy()}(this,component),component._onDestroyed()}},{key:"destroy",value:function(){for(var k in this.components){var v=this.components[k];if(v instanceof Component)this._cbits=subtractBit(this._cbits,v._cbit),v._onDestroyed();else if(v instanceof Array){var _step,_iterator=_createForOfIteratorHelper(v);try{for(_iterator.s();!(_step=_iterator.n()).done;){var component=_step.value;this._cbits=subtractBit(this._cbits,component._cbit),component._onDestroyed()}}catch(err){_iterator.e(err)}finally{_iterator.f()}}else for(var _i=0,_Object$values=Object.values(v);_i<_Object$values.length;_i++){var _component=_Object$values[_i];this._cbits=subtractBit(this._cbits,_component._cbit),_component._onDestroyed()}delete this[k],delete this.components[k]}this._candidacy(),this.world._destroyed(this.id),this.components={},this.isDestroyed=!0}},{key:"serialize",value:function(){var components={};for(var k in this.components){var v=this.components[k];components[k]=v instanceof Component?serializeComponent(v):v instanceof Array?v.map(serializeComponent):serializeComponentKeyed(v)}return _objectSpread({id:this.id},components)}},{key:"fireEvent",value:function(name,data){var evt=new EntityEvent(name,data);for(var key in this.components){var v=this.components[key];if(v instanceof Component){if(v._onEvent(evt),evt.prevented)return evt}else if(v instanceof Array){for(var i=0;i<v.length;i++)if(v[i]._onEvent(evt),evt.prevented)return evt}else for(var _i2=0,_Object$values2=Object.values(v);_i2<_Object$values2.length;_i2++){if(_Object$values2[_i2]._onEvent(evt),evt.prevented)return evt}}return evt}}]),Entity}(),Query=function(){function Query(world,filters){_classCallCheck(this,Query),_defineProperty(this,"_cache",[]),_defineProperty(this,"_onAddListeners",[]),_defineProperty(this,"_onRemoveListeners",[]),this._world=world;var any=filters.any||[],all=filters.all||[],none=filters.none||[];this._any=any.reduce((function(s,c){return addBit(s,c.prototype._cbit)}),0n),this._all=all.reduce((function(s,c){return addBit(s,c.prototype._cbit)}),0n),this._none=none.reduce((function(s,c){return addBit(s,c.prototype._cbit)}),0n),this.refresh()}return _createClass(Query,[{key:"onEntityAdded",value:function(fn){this._onAddListeners.push(fn)}},{key:"onEntityRemoved",value:function(fn){this._onRemoveListeners.push(fn)}},{key:"has",value:function(entity){return this.idx(entity)>=0}},{key:"idx",value:function(entity){return this._cache.indexOf(entity)}},{key:"matches",value:function(entity){var bits=entity._cbits,any=0n===this._any||bitIntersection(bits,this._any)>0,all=bitIntersection(bits,this._all)===this._all,none=0n===bitIntersection(bits,this._none);return any&&all&&none}},{key:"candidate",value:function(entity){var idx=this.idx(entity),isTracking=idx>=0;return!entity.isDestroyed&&this.matches(entity)?(isTracking||(this._cache.push(entity),this._onAddListeners.forEach((function(cb){return cb(entity)}))),!0):(isTracking&&(this._cache.splice(idx,1),this._onRemoveListeners.forEach((function(cb){return cb(entity)}))),!1)}},{key:"refresh",value:function(){var _this2=this;this._cache=[],this._world._entities.forEach((function(entity){_this2.candidate(entity)}))}},{key:"get",value:function(){return this._cache}}]),Query}(),World=function(){function World(engine){_classCallCheck(this,World),_defineProperty(this,"_id",0),_defineProperty(this,"_queries",[]),_defineProperty(this,"_entities",new Map),this.engine=engine}return _createClass(World,[{key:"createId",value:function(){return++this._id+Math.random().toString(36).substr(2,9)}},{key:"getEntity",value:function(id){return this._entities.get(id)}},{key:"getEntities",value:function(){return this._entities.values()}},{key:"createEntity",value:function(){var id=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.createId(),entity=new Entity(this,id);return this._entities.set(id,entity),entity}},{key:"destroyEntity",value:function(id){var entity=this.getEntity(id);entity&&entity.destroy()}},{key:"destroyEntities",value:function(){this._entities.forEach((function(entity){entity.destroy()}))}},{key:"destroy",value:function(){this.destroyEntities(),this._id=0,this._queries=[],this._entities=new Map}},{key:"createQuery",value:function(filters){var query=new Query(this,filters);return this._queries.push(query),query}},{key:"createPrefab",value:function(name){var properties=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.engine._prefabs.create(this,name,properties)}},{key:"serialize",value:function(entities){var json=[];return(entities||this._entities).forEach((function(e){json.push(e.serialize())})),{entities:json}}},{key:"deserialize",value:function(data){var _step2,_iterator2=_createForOfIteratorHelper(data.entities);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var entityData=_step2.value;this._createOrGetEntityById(entityData.id)}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}var _step3,_iterator3=_createForOfIteratorHelper(data.entities);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _entityData=_step3.value;this._deserializeEntity(_entityData)}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}}},{key:"_createOrGetEntityById",value:function(id){return this.getEntity(id)||this.createEntity(id)}},{key:"_deserializeEntity",value:function(data){var _this3=this,id=data.id,components=_objectWithoutProperties(data,["id"]),entity=this._createOrGetEntityById(id);entity._qeligible=!1,Object.entries(components).forEach((function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1],type=camelString(key),def=_this3.engine._components.get(type);def.allowMultiple?Object.values(value).forEach((function(d){entity.add(def,d)})):entity.add(def,value)})),entity._qeligible=!0,entity._candidacy()}},{key:"_candidate",value:function(entity){this._queries.forEach((function(q){return q.candidate(entity)}))}},{key:"_destroyed",value:function(id){return this._entities.delete(id)}}]),World}(),Engine=function(){function Engine(){_classCallCheck(this,Engine),_defineProperty(this,"_components",new ComponentRegistry),_defineProperty(this,"_prefabs",new PrefabRegistry(this))}return _createClass(Engine,[{key:"registerComponent",value:function(clazz){this._components.register(clazz)}},{key:"registerPrefab",value:function(data){this._prefabs.register(data)}},{key:"createWorld",value:function(){return new World(this)}},{key:"destroyWorld",value:function(world){world.destroy()}}]),Engine}()},"./node_modules/lodash/lodash.js":function(module,exports,__webpack_require__){(function(global,module){var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}(function(){var FUNC_ERROR_TEXT="Expected a function",PLACEHOLDER="__lodash_placeholder__",wrapFlags=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag="[object Function]",genTag="[object GeneratorFunction]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",symbolTag="[object Symbol]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source),reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g,reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source),reTrimStart=/^\s+/,reWhitespace=/\s/,reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /,reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,reForbiddenIdentifierChars=/[()=,{}\[\]\/\s]/,reEscapeChar=/\\(\\)?/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reFlags=/\w*$/,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsHostCtor=/^\[object .+?Constructor\]$/,reIsOctal=/^0o[0-7]+$/i,reIsUint=/^(?:0|[1-9]\d*)$/,reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g,rsComboRange="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",rsBreakRange="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsAstral="[\\ud800-\\udfff]",rsBreak="["+rsBreakRange+"]",rsCombo="["+rsComboRange+"]",rsDigits="\\d+",rsDingbat="[\\u2700-\\u27bf]",rsLower="[a-z\\xdf-\\xf6\\xf8-\\xff]",rsMisc="[^\\ud800-\\udfff"+rsBreakRange+rsDigits+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",rsFitz="\\ud83c[\\udffb-\\udfff]",rsNonAstral="[^\\ud800-\\udfff]",rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper="[A-Z\\xc0-\\xd6\\xd8-\\xde]",rsMiscLower="(?:"+rsLower+"|"+rsMisc+")",rsMiscUpper="(?:"+rsUpper+"|"+rsMisc+")",reOptMod="(?:"+rsCombo+"|"+rsFitz+")"+"?",rsSeq="[\\ufe0e\\ufe0f]?"+reOptMod+("(?:\\u200d(?:"+[rsNonAstral,rsRegional,rsSurrPair].join("|")+")[\\ufe0e\\ufe0f]?"+reOptMod+")*"),rsEmoji="(?:"+[rsDingbat,rsRegional,rsSurrPair].join("|")+")"+rsSeq,rsSymbol="(?:"+[rsNonAstral+rsCombo+"?",rsCombo,rsRegional,rsSurrPair,rsAstral].join("|")+")",reApos=RegExp("['’]","g"),reComboMark=RegExp(rsCombo,"g"),reUnicode=RegExp(rsFitz+"(?="+rsFitz+")|"+rsSymbol+rsSeq,"g"),reUnicodeWord=RegExp([rsUpper+"?"+rsLower+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[rsBreak,rsUpper,"$"].join("|")+")",rsMiscUpper+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[rsBreak,rsUpper+rsMiscLower,"$"].join("|")+")",rsUpper+"?"+rsMiscLower+"+(?:['’](?:d|ll|m|re|s|t|ve))?",rsUpper+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rsDigits,rsEmoji].join("|"),"g"),reHasUnicode=RegExp("[\\u200d\\ud800-\\udfff"+rsComboRange+"\\ufe0e\\ufe0f]"),reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,contextProps=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],templateCounter=-1,typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags["[object Uint8ClampedArray]"]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags["[object Uint8ClampedArray]"]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=!0,cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=!1;var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},freeParseFloat=parseFloat,freeParseInt=parseInt,freeGlobal="object"==(void 0===global?"undefined":_typeof(global))&&global&&global.Object===Object&&global,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),freeExports="object"==_typeof(exports)&&exports&&!exports.nodeType&&exports,freeModule=freeExports&&"object"==_typeof(module)&&module&&!module.nodeType&&module,moduleExports=freeModule&&freeModule.exports===freeExports,freeProcess=moduleExports&&freeGlobal.process,nodeUtil=function(){try{var types=freeModule&&freeModule.require&&freeModule.require("util").types;return types||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}(),nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2])}return func.apply(thisArg,args)}function arrayAggregator(array,setter,iteratee,accumulator){for(var index=-1,length=null==array?0:array.length;++index<length;){var value=array[index];setter(accumulator,value,iteratee(value),array)}return accumulator}function arrayEach(array,iteratee){for(var index=-1,length=null==array?0:array.length;++index<length&&!1!==iteratee(array[index],index,array););return array}function arrayEachRight(array,iteratee){for(var length=null==array?0:array.length;length--&&!1!==iteratee(array[length],length,array););return array}function arrayEvery(array,predicate){for(var index=-1,length=null==array?0:array.length;++index<length;)if(!predicate(array[index],index,array))return!1;return!0}function arrayFilter(array,predicate){for(var index=-1,length=null==array?0:array.length,resIndex=0,result=[];++index<length;){var value=array[index];predicate(value,index,array)&&(result[resIndex++]=value)}return result}function arrayIncludes(array,value){return!!(null==array?0:array.length)&&baseIndexOf(array,value,0)>-1}function arrayIncludesWith(array,value,comparator){for(var index=-1,length=null==array?0:array.length;++index<length;)if(comparator(value,array[index]))return!0;return!1}function arrayMap(array,iteratee){for(var index=-1,length=null==array?0:array.length,result=Array(length);++index<length;)result[index]=iteratee(array[index],index,array);return result}function arrayPush(array,values){for(var index=-1,length=values.length,offset=array.length;++index<length;)array[offset+index]=values[index];return array}function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=null==array?0:array.length;for(initAccum&&length&&(accumulator=array[++index]);++index<length;)accumulator=iteratee(accumulator,array[index],index,array);return accumulator}function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=null==array?0:array.length;for(initAccum&&length&&(accumulator=array[--length]);length--;)accumulator=iteratee(accumulator,array[length],length,array);return accumulator}function arraySome(array,predicate){for(var index=-1,length=null==array?0:array.length;++index<length;)if(predicate(array[index],index,array))return!0;return!1}var asciiSize=baseProperty("length");function baseFindKey(collection,predicate,eachFunc){var result;return eachFunc(collection,(function(value,key,collection){if(predicate(value,key,collection))return result=key,!1})),result}function baseFindIndex(array,predicate,fromIndex,fromRight){for(var length=array.length,index=fromIndex+(fromRight?1:-1);fromRight?index--:++index<length;)if(predicate(array[index],index,array))return index;return-1}function baseIndexOf(array,value,fromIndex){return value==value?function(array,value,fromIndex){var index=fromIndex-1,length=array.length;for(;++index<length;)if(array[index]===value)return index;return-1}(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex)}function baseIndexOfWith(array,value,fromIndex,comparator){for(var index=fromIndex-1,length=array.length;++index<length;)if(comparator(array[index],value))return index;return-1}function baseIsNaN(value){return value!=value}function baseMean(array,iteratee){var length=null==array?0:array.length;return length?baseSum(array,iteratee)/length:NaN}function baseProperty(key){return function(object){return null==object?void 0:object[key]}}function basePropertyOf(object){return function(key){return null==object?void 0:object[key]}}function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){return eachFunc(collection,(function(value,index,collection){accumulator=initAccum?(initAccum=!1,value):iteratee(accumulator,value,index,collection)})),accumulator}function baseSum(array,iteratee){for(var result,index=-1,length=array.length;++index<length;){var current=iteratee(array[index]);void 0!==current&&(result=void 0===result?current:result+current)}return result}function baseTimes(n,iteratee){for(var index=-1,result=Array(n);++index<n;)result[index]=iteratee(index);return result}function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,""):string}function baseUnary(func){return function(value){return func(value)}}function baseValues(object,props){return arrayMap(props,(function(key){return object[key]}))}function cacheHas(cache,key){return cache.has(key)}function charsStartIndex(strSymbols,chrSymbols){for(var index=-1,length=strSymbols.length;++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1;);return index}function charsEndIndex(strSymbols,chrSymbols){for(var index=strSymbols.length;index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1;);return index}function countHolders(array,placeholder){for(var length=array.length,result=0;length--;)array[length]===placeholder&&++result;return result}var deburrLetter=basePropertyOf({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),escapeHtmlChar=basePropertyOf({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function escapeStringChar(chr){return"\\"+stringEscapes[chr]}function hasUnicode(string){return reHasUnicode.test(string)}function mapToArray(map){var index=-1,result=Array(map.size);return map.forEach((function(value,key){result[++index]=[key,value]})),result}function overArg(func,transform){return function(arg){return func(transform(arg))}}function replaceHolders(array,placeholder){for(var index=-1,length=array.length,resIndex=0,result=[];++index<length;){var value=array[index];value!==placeholder&&value!==PLACEHOLDER||(array[index]=PLACEHOLDER,result[resIndex++]=index)}return result}function setToArray(set){var index=-1,result=Array(set.size);return set.forEach((function(value){result[++index]=value})),result}function setToPairs(set){var index=-1,result=Array(set.size);return set.forEach((function(value){result[++index]=[value,value]})),result}function stringSize(string){return hasUnicode(string)?function(string){var result=reUnicode.lastIndex=0;for(;reUnicode.test(string);)++result;return result}(string):asciiSize(string)}function stringToArray(string){return hasUnicode(string)?function(string){return string.match(reUnicode)||[]}(string):function(string){return string.split("")}(string)}function trimmedEndIndex(string){for(var index=string.length;index--&&reWhitespace.test(string.charAt(index)););return index}var unescapeHtmlChar=basePropertyOf({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var _=function runInContext(context){var uid,Array=(context=null==context?root:_.defaults(root.Object(),context,_.pick(root,contextProps))).Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError,arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype,coreJsData=context["__core-js_shared__"],funcToString=funcProto.toString,hasOwnProperty=objectProto.hasOwnProperty,idCounter=0,maskSrcKey=(uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||""))?"Symbol(src)_1."+uid:"",nativeObjectToString=objectProto.toString,objectCtorString=funcToString.call(Object),oldDash=root._,reIsNative=RegExp("^"+funcToString.call(hasOwnProperty).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Buffer=moduleExports?context.Buffer:void 0,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:void 0,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:void 0,symIterator=_Symbol?_Symbol.iterator:void 0,symToStringTag=_Symbol?_Symbol.toStringTag:void 0,defineProperty=function(){try{var func=getNative(Object,"defineProperty");return func({},"",{}),func}catch(e){}}(),ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout,nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:void 0,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse,DataView=getNative(context,"DataView"),Map=getNative(context,"Map"),Promise=getNative(context,"Promise"),Set=getNative(context,"Set"),WeakMap=getNative(context,"WeakMap"),nativeCreate=getNative(Object,"create"),metaMap=WeakMap&&new WeakMap,realNames={},dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap),symbolProto=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto?symbolProto.valueOf:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper)return value;if(hasOwnProperty.call(value,"__wrapped__"))return wrapperClone(value)}return new LodashWrapper(value)}var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto))return{};if(objectCreate)return objectCreate(proto);object.prototype=proto;var result=new object;return object.prototype=void 0,result}}();function baseLodash(){}function LodashWrapper(value,chainAll){this.__wrapped__=value,this.__actions__=[],this.__chain__=!!chainAll,this.__index__=0,this.__values__=void 0}function LazyWrapper(value){this.__wrapped__=value,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Hash(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}function ListCache(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}function MapCache(entries){var index=-1,length=null==entries?0:entries.length;for(this.clear();++index<length;){var entry=entries[index];this.set(entry[0],entry[1])}}function SetCache(values){var index=-1,length=null==values?0:values.length;for(this.__data__=new MapCache;++index<length;)this.add(values[index])}function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size}function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value)!inherited&&!hasOwnProperty.call(value,key)||skipIndexes&&("length"==key||isBuff&&("offset"==key||"parent"==key)||isType&&("buffer"==key||"byteLength"==key||"byteOffset"==key)||isIndex(key,length))||result.push(key);return result}function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:void 0}function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length))}function arrayShuffle(array){return shuffleSelf(copyArray(array))}function assignMergeValue(object,key,value){(void 0!==value&&!eq(object[key],value)||void 0===value&&!(key in object))&&baseAssignValue(object,key,value)}function assignValue(object,key,value){var objValue=object[key];hasOwnProperty.call(object,key)&&eq(objValue,value)&&(void 0!==value||key in object)||baseAssignValue(object,key,value)}function assocIndexOf(array,key){for(var length=array.length;length--;)if(eq(array[length][0],key))return length;return-1}function baseAggregator(collection,setter,iteratee,accumulator){return baseEach(collection,(function(value,key,collection){setter(accumulator,value,iteratee(value),collection)})),accumulator}function baseAssign(object,source){return object&&copyObject(source,keys(source),object)}function baseAssignValue(object,key,value){"__proto__"==key&&defineProperty?defineProperty(object,key,{configurable:!0,enumerable:!0,value:value,writable:!0}):object[key]=value}function baseAt(object,paths){for(var index=-1,length=paths.length,result=Array(length),skip=null==object;++index<length;)result[index]=skip?void 0:get(object,paths[index]);return result}function baseClamp(number,lower,upper){return number==number&&(void 0!==upper&&(number=number<=upper?number:upper),void 0!==lower&&(number=number>=lower?number:lower)),number}function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=1&bitmask,isFlat=2&bitmask,isFull=4&bitmask;if(customizer&&(result=object?customizer(value,key,object,stack):customizer(value)),void 0!==result)return result;if(!isObject(value))return value;var isArr=isArray(value);if(isArr){if(result=function(array){var length=array.length,result=new array.constructor(length);length&&"string"==typeof array[0]&&hasOwnProperty.call(array,"index")&&(result.index=array.index,result.input=array.input);return result}(value),!isDeep)return copyArray(value,result)}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value))return cloneBuffer(value,isDeep);if(tag==objectTag||tag==argsTag||isFunc&&!object){if(result=isFlat||isFunc?{}:initCloneObject(value),!isDeep)return isFlat?function(source,object){return copyObject(source,getSymbolsIn(source),object)}(value,function(object,source){return object&&copyObject(source,keysIn(source),object)}(result,value)):function(source,object){return copyObject(source,getSymbols(source),object)}(value,baseAssign(result,value))}else{if(!cloneableTags[tag])return object?value:{};result=function(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return function(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength)}(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case"[object Uint8ClampedArray]":case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor;case numberTag:case stringTag:return new Ctor(object);case regexpTag:return function(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));return result.lastIndex=regexp.lastIndex,result}(object);case setTag:return new Ctor;case symbolTag:return symbol=object,symbolValueOf?Object(symbolValueOf.call(symbol)):{}}var symbol}(value,tag,isDeep)}}stack||(stack=new Stack);var stacked=stack.get(value);if(stacked)return stacked;stack.set(value,result),isSet(value)?value.forEach((function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack))})):isMap(value)&&value.forEach((function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack))}));var props=isArr?void 0:(isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys)(value);return arrayEach(props||value,(function(subValue,key){props&&(subValue=value[key=subValue]),assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack))})),result}function baseConformsTo(object,source,props){var length=props.length;if(null==object)return!length;for(object=Object(object);length--;){var key=props[length],predicate=source[key],value=object[key];if(void 0===value&&!(key in object)||!predicate(value))return!1}return!0}function baseDelay(func,wait,args){if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return setTimeout((function(){func.apply(void 0,args)}),wait)}function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=!0,length=array.length,result=[],valuesLength=values.length;if(!length)return result;iteratee&&(values=arrayMap(values,baseUnary(iteratee))),comparator?(includes=arrayIncludesWith,isCommon=!1):values.length>=200&&(includes=cacheHas,isCommon=!1,values=new SetCache(values));outer:for(;++index<length;){var value=array[index],computed=null==iteratee?value:iteratee(value);if(value=comparator||0!==value?value:0,isCommon&&computed==computed){for(var valuesIndex=valuesLength;valuesIndex--;)if(values[valuesIndex]===computed)continue outer;result.push(value)}else includes(values,computed,comparator)||result.push(value)}return result}lodash.templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:lodash}},lodash.prototype=baseLodash.prototype,lodash.prototype.constructor=lodash,LodashWrapper.prototype=baseCreate(baseLodash.prototype),LodashWrapper.prototype.constructor=LodashWrapper,LazyWrapper.prototype=baseCreate(baseLodash.prototype),LazyWrapper.prototype.constructor=LazyWrapper,Hash.prototype.clear=function(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0},Hash.prototype.delete=function(key){var result=this.has(key)&&delete this.__data__[key];return this.size-=result?1:0,result},Hash.prototype.get=function(key){var data=this.__data__;if(nativeCreate){var result=data[key];return"__lodash_hash_undefined__"===result?void 0:result}return hasOwnProperty.call(data,key)?data[key]:void 0},Hash.prototype.has=function(key){var data=this.__data__;return nativeCreate?void 0!==data[key]:hasOwnProperty.call(data,key)},Hash.prototype.set=function(key,value){var data=this.__data__;return this.size+=this.has(key)?0:1,data[key]=nativeCreate&&void 0===value?"__lodash_hash_undefined__":value,this},ListCache.prototype.clear=function(){this.__data__=[],this.size=0},ListCache.prototype.delete=function(key){var data=this.__data__,index=assocIndexOf(data,key);return!(index<0)&&(index==data.length-1?data.pop():splice.call(data,index,1),--this.size,!0)},ListCache.prototype.get=function(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?void 0:data[index][1]},ListCache.prototype.has=function(key){return assocIndexOf(this.__data__,key)>-1},ListCache.prototype.set=function(key,value){var data=this.__data__,index=assocIndexOf(data,key);return index<0?(++this.size,data.push([key,value])):data[index][1]=value,this},MapCache.prototype.clear=function(){this.size=0,this.__data__={hash:new Hash,map:new(Map||ListCache),string:new Hash}},MapCache.prototype.delete=function(key){var result=getMapData(this,key).delete(key);return this.size-=result?1:0,result},MapCache.prototype.get=function(key){return getMapData(this,key).get(key)},MapCache.prototype.has=function(key){return getMapData(this,key).has(key)},MapCache.prototype.set=function(key,value){var data=getMapData(this,key),size=data.size;return data.set(key,value),this.size+=data.size==size?0:1,this},SetCache.prototype.add=SetCache.prototype.push=function(value){return this.__data__.set(value,"__lodash_hash_undefined__"),this},SetCache.prototype.has=function(value){return this.__data__.has(value)},Stack.prototype.clear=function(){this.__data__=new ListCache,this.size=0},Stack.prototype.delete=function(key){var data=this.__data__,result=data.delete(key);return this.size=data.size,result},Stack.prototype.get=function(key){return this.__data__.get(key)},Stack.prototype.has=function(key){return this.__data__.has(key)},Stack.prototype.set=function(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<199)return pairs.push([key,value]),this.size=++data.size,this;data=this.__data__=new MapCache(pairs)}return data.set(key,value),this.size=data.size,this};var baseEach=createBaseEach(baseForOwn),baseEachRight=createBaseEach(baseForOwnRight,!0);function baseEvery(collection,predicate){var result=!0;return baseEach(collection,(function(value,index,collection){return result=!!predicate(value,index,collection)})),result}function baseExtremum(array,iteratee,comparator){for(var index=-1,length=array.length;++index<length;){var value=array[index],current=iteratee(value);if(null!=current&&(void 0===computed?current==current&&!isSymbol(current):comparator(current,computed)))var computed=current,result=value}return result}function baseFilter(collection,predicate){var result=[];return baseEach(collection,(function(value,index,collection){predicate(value,index,collection)&&result.push(value)})),result}function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;for(predicate||(predicate=isFlattenable),result||(result=[]);++index<length;){var value=array[index];depth>0&&predicate(value)?depth>1?baseFlatten(value,depth-1,predicate,isStrict,result):arrayPush(result,value):isStrict||(result[result.length]=value)}return result}var baseFor=createBaseFor(),baseForRight=createBaseFor(!0);function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys)}function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys)}function baseFunctions(object,props){return arrayFilter(props,(function(key){return isFunction(object[key])}))}function baseGet(object,path){for(var index=0,length=(path=castPath(path,object)).length;null!=object&&index<length;)object=object[toKey(path[index++])];return index&&index==length?object:void 0}function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object))}function baseGetTag(value){return null==value?void 0===value?"[object Undefined]":"[object Null]":symToStringTag&&symToStringTag in Object(value)?function(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=void 0;var unmasked=!0}catch(e){}var result=nativeObjectToString.call(value);unmasked&&(isOwn?value[symToStringTag]=tag:delete value[symToStringTag]);return result}(value):function(value){return nativeObjectToString.call(value)}(value)}function baseGt(value,other){return value>other}function baseHas(object,key){return null!=object&&hasOwnProperty.call(object,key)}function baseHasIn(object,key){return null!=object&&key in Object(object)}function baseIntersection(arrays,iteratee,comparator){for(var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=1/0,result=[];othIndex--;){var array=arrays[othIndex];othIndex&&iteratee&&(array=arrayMap(array,baseUnary(iteratee))),maxLength=nativeMin(array.length,maxLength),caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):void 0}array=arrays[0];var index=-1,seen=caches[0];outer:for(;++index<length&&result.length<maxLength;){var value=array[index],computed=iteratee?iteratee(value):value;if(value=comparator||0!==value?value:0,!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){for(othIndex=othLength;--othIndex;){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator)))continue outer}seen&&seen.push(computed),result.push(value)}}return result}function baseInvoke(object,path,args){var func=null==(object=parent(object,path=castPath(path,object)))?object:object[toKey(last(path))];return null==func?void 0:apply(func,object,args)}function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag}function baseIsEqual(value,other,bitmask,customizer,stack){return value===other||(null==value||null==other||!isObjectLike(value)&&!isObjectLike(other)?value!=value&&other!=other:function(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other),objIsObj=(objTag=objTag==argsTag?objectTag:objTag)==objectTag,othIsObj=(othTag=othTag==argsTag?objectTag:othTag)==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other))return!1;objIsArr=!0,objIsObj=!1}if(isSameTag&&!objIsObj)return stack||(stack=new Stack),objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):function(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset)return!1;object=object.buffer,other=other.buffer;case arrayBufferTag:return!(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other)));case boolTag:case dateTag:case numberTag:return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:return object==other+"";case mapTag:var convert=mapToArray;case setTag:var isPartial=1&bitmask;if(convert||(convert=setToArray),object.size!=other.size&&!isPartial)return!1;var stacked=stack.get(object);if(stacked)return stacked==other;bitmask|=2,stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);return stack.delete(object),result;case symbolTag:if(symbolValueOf)return symbolValueOf.call(object)==symbolValueOf.call(other)}return!1}(object,other,objTag,bitmask,customizer,equalFunc,stack);if(!(1&bitmask)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,"__wrapped__"),othIsWrapped=othIsObj&&hasOwnProperty.call(other,"__wrapped__");if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;return stack||(stack=new Stack),equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack)}}if(!isSameTag)return!1;return stack||(stack=new Stack),function(object,other,bitmask,customizer,equalFunc,stack){var isPartial=1&bitmask,objProps=getAllKeys(object),objLength=objProps.length,othLength=getAllKeys(other).length;if(objLength!=othLength&&!isPartial)return!1;var index=objLength;for(;index--;){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key)))return!1}var objStacked=stack.get(object),othStacked=stack.get(other);if(objStacked&&othStacked)return objStacked==other&&othStacked==object;var result=!0;stack.set(object,other),stack.set(other,object);var skipCtor=isPartial;for(;++index<objLength;){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer)var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);if(!(void 0===compared?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=!1;break}skipCtor||(skipCtor="constructor"==key)}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;objCtor==othCtor||!("constructor"in object)||!("constructor"in other)||"function"==typeof objCtor&&objCtor instanceof objCtor&&"function"==typeof othCtor&&othCtor instanceof othCtor||(result=!1)}return stack.delete(object),stack.delete(other),result}(object,other,bitmask,customizer,equalFunc,stack)}(value,other,bitmask,customizer,baseIsEqual,stack))}function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(null==object)return!length;for(object=Object(object);index--;){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object))return!1}for(;++index<length;){var key=(data=matchData[index])[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(void 0===objValue&&!(key in object))return!1}else{var stack=new Stack;if(customizer)var result=customizer(objValue,srcValue,key,object,source,stack);if(!(void 0===result?baseIsEqual(srcValue,objValue,3,customizer,stack):result))return!1}}return!0}function baseIsNative(value){return!(!isObject(value)||(func=value,maskSrcKey&&maskSrcKey in func))&&(isFunction(value)?reIsNative:reIsHostCtor).test(toSource(value));var func}function baseIteratee(value){return"function"==typeof value?value:null==value?identity:"object"==_typeof(value)?isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value):property(value)}function baseKeys(object){if(!isPrototype(object))return nativeKeys(object);var result=[];for(var key in Object(object))hasOwnProperty.call(object,key)&&"constructor"!=key&&result.push(key);return result}function baseKeysIn(object){if(!isObject(object))return function(object){var result=[];if(null!=object)for(var key in Object(object))result.push(key);return result}(object);var isProto=isPrototype(object),result=[];for(var key in object)("constructor"!=key||!isProto&&hasOwnProperty.call(object,key))&&result.push(key);return result}function baseLt(value,other){return value<other}function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];return baseEach(collection,(function(value,key,collection){result[++index]=iteratee(value,key,collection)})),result}function baseMatches(source){var matchData=getMatchData(source);return 1==matchData.length&&matchData[0][2]?matchesStrictComparable(matchData[0][0],matchData[0][1]):function(object){return object===source||baseIsMatch(object,source,matchData)}}function baseMatchesProperty(path,srcValue){return isKey(path)&&isStrictComparable(srcValue)?matchesStrictComparable(toKey(path),srcValue):function(object){var objValue=get(object,path);return void 0===objValue&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,3)}}function baseMerge(object,source,srcIndex,customizer,stack){object!==source&&baseFor(source,(function(srcValue,key){if(stack||(stack=new Stack),isObject(srcValue))!function(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked)return void assignMergeValue(object,key,stacked);var newValue=customizer?customizer(objValue,srcValue,key+"",object,source,stack):void 0,isCommon=void 0===newValue;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue,isArr||isBuff||isTyped?isArray(objValue)?newValue=objValue:isArrayLikeObject(objValue)?newValue=copyArray(objValue):isBuff?(isCommon=!1,newValue=cloneBuffer(srcValue,!0)):isTyped?(isCommon=!1,newValue=cloneTypedArray(srcValue,!0)):newValue=[]:isPlainObject(srcValue)||isArguments(srcValue)?(newValue=objValue,isArguments(objValue)?newValue=toPlainObject(objValue):isObject(objValue)&&!isFunction(objValue)||(newValue=initCloneObject(srcValue))):isCommon=!1}isCommon&&(stack.set(srcValue,newValue),mergeFunc(newValue,srcValue,srcIndex,customizer,stack),stack.delete(srcValue));assignMergeValue(object,key,newValue)}(object,source,key,srcIndex,baseMerge,customizer,stack);else{var newValue=customizer?customizer(safeGet(object,key),srcValue,key+"",object,source,stack):void 0;void 0===newValue&&(newValue=srcValue),assignMergeValue(object,key,newValue)}}),keysIn)}function baseNth(array,n){var length=array.length;if(length)return isIndex(n+=n<0?length:0,length)?array[n]:void 0}function baseOrderBy(collection,iteratees,orders){iteratees=iteratees.length?arrayMap(iteratees,(function(iteratee){return isArray(iteratee)?function(value){return baseGet(value,1===iteratee.length?iteratee[0]:iteratee)}:iteratee})):[identity];var index=-1;return iteratees=arrayMap(iteratees,baseUnary(getIteratee())),function(array,comparer){var length=array.length;for(array.sort(comparer);length--;)array[length]=array[length].value;return array}(baseMap(collection,(function(value,key,collection){return{criteria:arrayMap(iteratees,(function(iteratee){return iteratee(value)})),index:++index,value:value}})),(function(object,other){return function(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;for(;++index<length;){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength)return result;var order=orders[index];return result*("desc"==order?-1:1)}}return object.index-other.index}(object,other,orders)}))}function basePickBy(object,paths,predicate){for(var index=-1,length=paths.length,result={};++index<length;){var path=paths[index],value=baseGet(object,path);predicate(value,path)&&baseSet(result,castPath(path,object),value)}return result}function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;for(array===values&&(values=copyArray(values)),iteratee&&(seen=arrayMap(array,baseUnary(iteratee)));++index<length;)for(var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;(fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1;)seen!==array&&splice.call(seen,fromIndex,1),splice.call(array,fromIndex,1);return array}function basePullAt(array,indexes){for(var length=array?indexes.length:0,lastIndex=length-1;length--;){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;isIndex(index)?splice.call(array,index,1):baseUnset(array,index)}}return array}function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1))}function baseRepeat(string,n){var result="";if(!string||n<1||n>9007199254740991)return result;do{n%2&&(result+=string),(n=nativeFloor(n/2))&&(string+=string)}while(n);return result}function baseRest(func,start){return setToString(overRest(func,start,identity),func+"")}function baseSample(collection){return arraySample(values(collection))}function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length))}function baseSet(object,path,value,customizer){if(!isObject(object))return object;for(var index=-1,length=(path=castPath(path,object)).length,lastIndex=length-1,nested=object;null!=nested&&++index<length;){var key=toKey(path[index]),newValue=value;if("__proto__"===key||"constructor"===key||"prototype"===key)return object;if(index!=lastIndex){var objValue=nested[key];void 0===(newValue=customizer?customizer(objValue,key,nested):void 0)&&(newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{})}assignValue(nested,key,newValue),nested=nested[key]}return object}var baseSetData=metaMap?function(func,data){return metaMap.set(func,data),func}:identity,baseSetToString=defineProperty?function(func,string){return defineProperty(func,"toString",{configurable:!0,enumerable:!1,value:constant(string),writable:!0})}:identity;function baseShuffle(collection){return shuffleSelf(values(collection))}function baseSlice(array,start,end){var index=-1,length=array.length;start<0&&(start=-start>length?0:length+start),(end=end>length?length:end)<0&&(end+=length),length=start>end?0:end-start>>>0,start>>>=0;for(var result=Array(length);++index<length;)result[index]=array[index+start];return result}function baseSome(collection,predicate){var result;return baseEach(collection,(function(value,index,collection){return!(result=predicate(value,index,collection))})),!!result}function baseSortedIndex(array,value,retHighest){var low=0,high=null==array?low:array.length;if("number"==typeof value&&value==value&&high<=2147483647){for(;low<high;){var mid=low+high>>>1,computed=array[mid];null!==computed&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)?low=mid+1:high=mid}return high}return baseSortedIndexBy(array,value,identity,retHighest)}function baseSortedIndexBy(array,value,iteratee,retHighest){var low=0,high=null==array?0:array.length;if(0===high)return 0;for(var valIsNaN=(value=iteratee(value))!=value,valIsNull=null===value,valIsSymbol=isSymbol(value),valIsUndefined=void 0===value;low<high;){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=void 0!==computed,othIsNull=null===computed,othIsReflexive=computed==computed,othIsSymbol=isSymbol(computed);if(valIsNaN)var setLow=retHighest||othIsReflexive;else setLow=valIsUndefined?othIsReflexive&&(retHighest||othIsDefined):valIsNull?othIsReflexive&&othIsDefined&&(retHighest||!othIsNull):valIsSymbol?othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol):!othIsNull&&!othIsSymbol&&(retHighest?computed<=value:computed<value);setLow?low=mid+1:high=mid}return nativeMin(high,4294967294)}function baseSortedUniq(array,iteratee){for(var index=-1,length=array.length,resIndex=0,result=[];++index<length;){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=0===value?0:value}}return result}function baseToNumber(value){return"number"==typeof value?value:isSymbol(value)?NaN:+value}function baseToString(value){if("string"==typeof value)return value;if(isArray(value))return arrayMap(value,baseToString)+"";if(isSymbol(value))return symbolToString?symbolToString.call(value):"";var result=value+"";return"0"==result&&1/value==-1/0?"-0":result}function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=!0,result=[],seen=result;if(comparator)isCommon=!1,includes=arrayIncludesWith;else if(length>=200){var set=iteratee?null:createSet(array);if(set)return setToArray(set);isCommon=!1,includes=cacheHas,seen=new SetCache}else seen=iteratee?[]:result;outer:for(;++index<length;){var value=array[index],computed=iteratee?iteratee(value):value;if(value=comparator||0!==value?value:0,isCommon&&computed==computed){for(var seenIndex=seen.length;seenIndex--;)if(seen[seenIndex]===computed)continue outer;iteratee&&seen.push(computed),result.push(value)}else includes(seen,computed,comparator)||(seen!==result&&seen.push(computed),result.push(value))}return result}function baseUnset(object,path){return null==(object=parent(object,path=castPath(path,object)))||delete object[toKey(last(path))]}function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer)}function baseWhile(array,predicate,isDrop,fromRight){for(var length=array.length,index=fromRight?length:-1;(fromRight?index--:++index<length)&&predicate(array[index],index,array););return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index)}function baseWrapperValue(value,actions){var result=value;return result instanceof LazyWrapper&&(result=result.value()),arrayReduce(actions,(function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args))}),result)}function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2)return length?baseUniq(arrays[0]):[];for(var index=-1,result=Array(length);++index<length;)for(var array=arrays[index],othIndex=-1;++othIndex<length;)othIndex!=index&&(result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator));return baseUniq(baseFlatten(result,1),iteratee,comparator)}function baseZipObject(props,values,assignFunc){for(var index=-1,length=props.length,valsLength=values.length,result={};++index<length;){var value=index<valsLength?values[index]:void 0;assignFunc(result,props[index],value)}return result}function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[]}function castFunction(value){return"function"==typeof value?value:identity}function castPath(value,object){return isArray(value)?value:isKey(value,object)?[value]:stringToPath(toString(value))}var castRest=baseRest;function castSlice(array,start,end){var length=array.length;return end=void 0===end?length:end,!start&&end>=length?array:baseSlice(array,start,end)}var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id)};function cloneBuffer(buffer,isDeep){if(isDeep)return buffer.slice();var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);return buffer.copy(result),result}function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);return new Uint8Array(result).set(new Uint8Array(arrayBuffer)),result}function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length)}function compareAscending(value,other){if(value!==other){var valIsDefined=void 0!==value,valIsNull=null===value,valIsReflexive=value==value,valIsSymbol=isSymbol(value),othIsDefined=void 0!==other,othIsNull=null===other,othIsReflexive=other==other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive)return 1;if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive)return-1}return 0}function composeArgs(args,partials,holders,isCurried){for(var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;++leftIndex<leftLength;)result[leftIndex]=partials[leftIndex];for(;++argsIndex<holdersLength;)(isUncurried||argsIndex<argsLength)&&(result[holders[argsIndex]]=args[argsIndex]);for(;rangeLength--;)result[leftIndex++]=args[argsIndex++];return result}function composeArgsRight(args,partials,holders,isCurried){for(var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;++argsIndex<rangeLength;)result[argsIndex]=args[argsIndex];for(var offset=argsIndex;++rightIndex<rightLength;)result[offset+rightIndex]=partials[rightIndex];for(;++holdersIndex<holdersLength;)(isUncurried||argsIndex<argsLength)&&(result[offset+holders[holdersIndex]]=args[argsIndex++]);return result}function copyArray(source,array){var index=-1,length=source.length;for(array||(array=Array(length));++index<length;)array[index]=source[index];return array}function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});for(var index=-1,length=props.length;++index<length;){var key=props[index],newValue=customizer?customizer(object[key],source[key],key,object,source):void 0;void 0===newValue&&(newValue=source[key]),isNew?baseAssignValue(object,key,newValue):assignValue(object,key,newValue)}return object}function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator)}}function createAssigner(assigner){return baseRest((function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:void 0,guard=length>2?sources[2]:void 0;for(customizer=assigner.length>3&&"function"==typeof customizer?(length--,customizer):void 0,guard&&isIterateeCall(sources[0],sources[1],guard)&&(customizer=length<3?void 0:customizer,length=1),object=Object(object);++index<length;){var source=sources[index];source&&assigner(object,source,index,customizer)}return object}))}function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(null==collection)return collection;if(!isArrayLike(collection))return eachFunc(collection,iteratee);for(var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);(fromRight?index--:++index<length)&&!1!==iteratee(iterable[index],index,iterable););return collection}}function createBaseFor(fromRight){return function(object,iteratee,keysFunc){for(var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;length--;){var key=props[fromRight?length:++index];if(!1===iteratee(iterable[key],key,iterable))break}return object}}function createCaseFirst(methodName){return function(string){var strSymbols=hasUnicode(string=toString(string))?stringToArray(string):void 0,chr=strSymbols?strSymbols[0]:string.charAt(0),trailing=strSymbols?castSlice(strSymbols,1).join(""):string.slice(1);return chr[methodName]()+trailing}}function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,"")),callback,"")}}function createCtor(Ctor){return function(){var args=arguments;switch(args.length){case 0:return new Ctor;case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6])}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);return isObject(result)?result:thisBinding}}function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection),predicate=function(key){return iteratee(iterable[key],key,iterable)}}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:void 0}}function createFlow(fromRight){return flatRest((function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;for(fromRight&&funcs.reverse();index--;){var func=funcs[index];if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);if(prereq&&!wrapper&&"wrapper"==getFuncName(func))var wrapper=new LodashWrapper([],!0)}for(index=wrapper?index:length;++index<length;){var funcName=getFuncName(func=funcs[index]),data="wrapper"==funcName?getData(func):void 0;wrapper=data&&isLaziable(data[0])&&424==data[1]&&!data[4].length&&1==data[9]?wrapper[getFuncName(data[0])].apply(wrapper,data[3]):1==func.length&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func)}return function(){var args=arguments,value=args[0];if(wrapper&&1==args.length&&isArray(value))return wrapper.plant(value).value();for(var index=0,result=length?funcs[index].apply(this,args):value;++index<length;)result=funcs[index].call(this,result);return result}}))}function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=128&bitmask,isBind=1&bitmask,isBindKey=2&bitmask,isCurried=24&bitmask,isFlip=512&bitmask,Ctor=isBindKey?void 0:createCtor(func);return function wrapper(){for(var length=arguments.length,args=Array(length),index=length;index--;)args[index]=arguments[index];if(isCurried)var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);if(partials&&(args=composeArgs(args,partials,holders,isCurried)),partialsRight&&(args=composeArgsRight(args,partialsRight,holdersRight,isCurried)),length-=holdersCount,isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length)}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;return length=args.length,argPos?args=reorder(args,argPos):isFlip&&length>1&&args.reverse(),isAry&&ary<length&&(args.length=ary),this&&this!==root&&this instanceof wrapper&&(fn=Ctor||createCtor(fn)),fn.apply(thisBinding,args)}}function createInverter(setter,toIteratee){return function(object,iteratee){return function(object,setter,iteratee,accumulator){return baseForOwn(object,(function(value,key,object){setter(accumulator,iteratee(value),key,object)})),accumulator}(object,setter,toIteratee(iteratee),{})}}function createMathOperation(operator,defaultValue){return function(value,other){var result;if(void 0===value&&void 0===other)return defaultValue;if(void 0!==value&&(result=value),void 0!==other){if(void 0===result)return other;"string"==typeof value||"string"==typeof other?(value=baseToString(value),other=baseToString(other)):(value=baseToNumber(value),other=baseToNumber(other)),result=operator(value,other)}return result}}function createOver(arrayFunc){return flatRest((function(iteratees){return iteratees=arrayMap(iteratees,baseUnary(getIteratee())),baseRest((function(args){var thisArg=this;return arrayFunc(iteratees,(function(iteratee){return apply(iteratee,thisArg,args)}))}))}))}function createPadding(length,chars){var charsLength=(chars=void 0===chars?" ":baseToString(chars)).length;if(charsLength<2)return charsLength?baseRepeat(chars,length):chars;var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(""):result.slice(0,length)}function createRange(fromRight){return function(start,end,step){return step&&"number"!=typeof step&&isIterateeCall(start,end,step)&&(end=step=void 0),start=toFinite(start),void 0===end?(end=start,start=0):end=toFinite(end),function(start,end,step,fromRight){for(var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);length--;)result[fromRight?length:++index]=start,start+=step;return result}(start,end,step=void 0===step?start<end?1:-1:toFinite(step),fromRight)}}function createRelationalOperation(operator){return function(value,other){return"string"==typeof value&&"string"==typeof other||(value=toNumber(value),other=toNumber(other)),operator(value,other)}}function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=8&bitmask;bitmask|=isCurry?32:64,4&(bitmask&=~(isCurry?64:32))||(bitmask&=-4);var newData=[func,bitmask,thisArg,isCurry?partials:void 0,isCurry?holders:void 0,isCurry?void 0:partials,isCurry?void 0:holders,argPos,ary,arity],result=wrapFunc.apply(void 0,newData);return isLaziable(func)&&setData(result,newData),result.placeholder=placeholder,setWrapToString(result,func,bitmask)}function createRound(methodName){var func=Math[methodName];return function(number,precision){if(number=toNumber(number),(precision=null==precision?0:nativeMin(toInteger(precision),292))&&nativeIsFinite(number)){var pair=(toString(number)+"e").split("e");return+((pair=(toString(func(pair[0]+"e"+(+pair[1]+precision)))+"e").split("e"))[0]+"e"+(+pair[1]-precision))}return func(number)}}var createSet=Set&&1/setToArray(new Set([,-0]))[1]==1/0?function(values){return new Set(values)}:noop;function createToPairs(keysFunc){return function(object){var tag=getTag(object);return tag==mapTag?mapToArray(object):tag==setTag?setToPairs(object):function(object,props){return arrayMap(props,(function(key){return[key,object[key]]}))}(object,keysFunc(object))}}function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=2&bitmask;if(!isBindKey&&"function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);var length=partials?partials.length:0;if(length||(bitmask&=-97,partials=holders=void 0),ary=void 0===ary?ary:nativeMax(toInteger(ary),0),arity=void 0===arity?arity:toInteger(arity),length-=holders?holders.length:0,64&bitmask){var partialsRight=partials,holdersRight=holders;partials=holders=void 0}var data=isBindKey?void 0:getData(func),newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data&&function(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<131,isCombo=128==srcBitmask&&8==bitmask||128==srcBitmask&&256==bitmask&&data[7].length<=source[8]||384==srcBitmask&&source[7].length<=source[8]&&8==bitmask;if(!isCommon&&!isCombo)return data;1&srcBitmask&&(data[2]=source[2],newBitmask|=1&bitmask?0:4);var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value,data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4]}(value=source[5])&&(partials=data[5],data[5]=partials?composeArgsRight(partials,value,source[6]):value,data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6]);(value=source[7])&&(data[7]=value);128&srcBitmask&&(data[8]=null==data[8]?source[8]:nativeMin(data[8],source[8]));null==data[9]&&(data[9]=source[9]);data[0]=source[0],data[1]=newBitmask}(newData,data),func=newData[0],bitmask=newData[1],thisArg=newData[2],partials=newData[3],holders=newData[4],!(arity=newData[9]=void 0===newData[9]?isBindKey?0:func.length:nativeMax(newData[9]-length,0))&&24&bitmask&&(bitmask&=-25),bitmask&&1!=bitmask)result=8==bitmask||16==bitmask?function(func,bitmask,arity){var Ctor=createCtor(func);return function wrapper(){for(var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);index--;)args[index]=arguments[index];var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);if((length-=holders.length)<arity)return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,void 0,args,holders,void 0,void 0,arity-length);var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args)}}(func,bitmask,arity):32!=bitmask&&33!=bitmask||holders.length?createHybrid.apply(void 0,newData):function(func,bitmask,thisArg,partials){var isBind=1&bitmask,Ctor=createCtor(func);return function wrapper(){for(var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;++leftIndex<leftLength;)args[leftIndex]=partials[leftIndex];for(;argsLength--;)args[leftIndex++]=arguments[++argsIndex];return apply(fn,isBind?thisArg:this,args)}}(func,bitmask,thisArg,partials);else var result=function(func,bitmask,thisArg){var isBind=1&bitmask,Ctor=createCtor(func);return function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments)}}(func,bitmask,thisArg);return setWrapToString((data?baseSetData:setData)(result,newData),func,bitmask)}function customDefaultsAssignIn(objValue,srcValue,key,object){return void 0===objValue||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)?srcValue:objValue}function customDefaultsMerge(objValue,srcValue,key,object,source,stack){return isObject(objValue)&&isObject(srcValue)&&(stack.set(srcValue,objValue),baseMerge(objValue,srcValue,void 0,customDefaultsMerge,stack),stack.delete(srcValue)),objValue}function customOmitClone(value){return isPlainObject(value)?void 0:value}function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=1&bitmask,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength))return!1;var arrStacked=stack.get(array),othStacked=stack.get(other);if(arrStacked&&othStacked)return arrStacked==other&&othStacked==array;var index=-1,result=!0,seen=2&bitmask?new SetCache:void 0;for(stack.set(array,other),stack.set(other,array);++index<arrLength;){var arrValue=array[index],othValue=other[index];if(customizer)var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);if(void 0!==compared){if(compared)continue;result=!1;break}if(seen){if(!arraySome(other,(function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack)))return seen.push(othIndex)}))){result=!1;break}}else if(arrValue!==othValue&&!equalFunc(arrValue,othValue,bitmask,customizer,stack)){result=!1;break}}return stack.delete(array),stack.delete(other),result}function flatRest(func){return setToString(overRest(func,void 0,flatten),func+"")}function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols)}function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn)}var getData=metaMap?function(func){return metaMap.get(func)}:noop;function getFuncName(func){for(var result=func.name+"",array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;length--;){var data=array[length],otherFunc=data.func;if(null==otherFunc||otherFunc==func)return data.name}return result}function getHolder(func){return(hasOwnProperty.call(lodash,"placeholder")?lodash:func).placeholder}function getIteratee(){var result=lodash.iteratee||iteratee;return result=result===iteratee?baseIteratee:result,arguments.length?result(arguments[0],arguments[1]):result}function getMapData(map,key){var value,type,data=map.__data__;return("string"==(type=_typeof(value=key))||"number"==type||"symbol"==type||"boolean"==type?"__proto__"!==value:null===value)?data["string"==typeof key?"string":"hash"]:data.map}function getMatchData(object){for(var result=keys(object),length=result.length;length--;){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)]}return result}function getNative(object,key){var value=function(object,key){return null==object?void 0:object[key]}(object,key);return baseIsNative(value)?value:void 0}var getSymbols=nativeGetSymbols?function(object){return null==object?[]:(object=Object(object),arrayFilter(nativeGetSymbols(object),(function(symbol){return propertyIsEnumerable.call(object,symbol)})))}:stubArray,getSymbolsIn=nativeGetSymbols?function(object){for(var result=[];object;)arrayPush(result,getSymbols(object)),object=getPrototype(object);return result}:stubArray,getTag=baseGetTag;function hasPath(object,path,hasFunc){for(var index=-1,length=(path=castPath(path,object)).length,result=!1;++index<length;){var key=toKey(path[index]);if(!(result=null!=object&&hasFunc(object,key)))break;object=object[key]}return result||++index!=length?result:!!(length=null==object?0:object.length)&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object))}function initCloneObject(object){return"function"!=typeof object.constructor||isPrototype(object)?{}:baseCreate(getPrototype(object))}function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol])}function isIndex(value,length){var type=_typeof(value);return!!(length=null==length?9007199254740991:length)&&("number"==type||"symbol"!=type&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length}function isIterateeCall(value,index,object){if(!isObject(object))return!1;var type=_typeof(index);return!!("number"==type?isArrayLike(object)&&isIndex(index,object.length):"string"==type&&index in object)&&eq(object[index],value)}function isKey(value,object){if(isArray(value))return!1;var type=_typeof(value);return!("number"!=type&&"symbol"!=type&&"boolean"!=type&&null!=value&&!isSymbol(value))||(reIsPlainProp.test(value)||!reIsDeepProp.test(value)||null!=object&&value in Object(object))}function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if("function"!=typeof other||!(funcName in LazyWrapper.prototype))return!1;if(func===other)return!0;var data=getData(other);return!!data&&func===data[0]}(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map)!=mapTag||Promise&&"[object Promise]"!=getTag(Promise.resolve())||Set&&getTag(new Set)!=setTag||WeakMap&&getTag(new WeakMap)!=weakMapTag)&&(getTag=function(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:void 0,ctorString=Ctor?toSource(Ctor):"";if(ctorString)switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return"[object Promise]";case setCtorString:return setTag;case weakMapCtorString:return weakMapTag}return result});var isMaskable=coreJsData?isFunction:stubFalse;function isPrototype(value){var Ctor=value&&value.constructor;return value===("function"==typeof Ctor&&Ctor.prototype||objectProto)}function isStrictComparable(value){return value==value&&!isObject(value)}function matchesStrictComparable(key,srcValue){return function(object){return null!=object&&(object[key]===srcValue&&(void 0!==srcValue||key in Object(object)))}}function overRest(func,start,transform){return start=nativeMax(void 0===start?func.length-1:start,0),function(){for(var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);++index<length;)array[index]=args[start+index];index=-1;for(var otherArgs=Array(start+1);++index<start;)otherArgs[index]=args[index];return otherArgs[start]=transform(array),apply(func,this,otherArgs)}}function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1))}function reorder(array,indexes){for(var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);length--;){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:void 0}return array}function safeGet(object,key){if(("constructor"!==key||"function"!=typeof object[key])&&"__proto__"!=key)return object[key]}var setData=shortOut(baseSetData),setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait)},setToString=shortOut(baseSetToString);function setWrapToString(wrapper,reference,bitmask){var source=reference+"";return setToString(wrapper,function(source,details){var length=details.length;if(!length)return source;var lastIndex=length-1;return details[lastIndex]=(length>1?"& ":"")+details[lastIndex],details=details.join(length>2?", ":" "),source.replace(reWrapComment,"{\n/* [wrapped with "+details+"] */\n")}(source,function(details,bitmask){return arrayEach(wrapFlags,(function(pair){var value="_."+pair[0];bitmask&pair[1]&&!arrayIncludes(details,value)&&details.push(value)})),details.sort()}(function(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[]}(source),bitmask)))}function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=16-(stamp-lastCalled);if(lastCalled=stamp,remaining>0){if(++count>=800)return arguments[0]}else count=0;return func.apply(void 0,arguments)}}function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;for(size=void 0===size?length:size;++index<size;){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index],array[index]=value}return array.length=size,array}var stringToPath=function(func){var result=memoize(func,(function(key){return 500===cache.size&&cache.clear(),key})),cache=result.cache;return result}((function(string){var result=[];return 46===string.charCodeAt(0)&&result.push(""),string.replace(rePropName,(function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,"$1"):number||match)})),result}));function toKey(value){if("string"==typeof value||isSymbol(value))return value;var result=value+"";return"0"==result&&1/value==-1/0?"-0":result}function toSource(func){if(null!=func){try{return funcToString.call(func)}catch(e){}try{return func+""}catch(e){}}return""}function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper)return wrapper.clone();var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);return result.__actions__=copyArray(wrapper.__actions__),result.__index__=wrapper.__index__,result.__values__=wrapper.__values__,result}var difference=baseRest((function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,!0)):[]})),differenceBy=baseRest((function(array,values){var iteratee=last(values);return isArrayLikeObject(iteratee)&&(iteratee=void 0),isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,!0),getIteratee(iteratee,2)):[]})),differenceWith=baseRest((function(array,values){var comparator=last(values);return isArrayLikeObject(comparator)&&(comparator=void 0),isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,!0),void 0,comparator):[]}));function findIndex(array,predicate,fromIndex){var length=null==array?0:array.length;if(!length)return-1;var index=null==fromIndex?0:toInteger(fromIndex);return index<0&&(index=nativeMax(length+index,0)),baseFindIndex(array,getIteratee(predicate,3),index)}function findLastIndex(array,predicate,fromIndex){var length=null==array?0:array.length;if(!length)return-1;var index=length-1;return void 0!==fromIndex&&(index=toInteger(fromIndex),index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1)),baseFindIndex(array,getIteratee(predicate,3),index,!0)}function flatten(array){return(null==array?0:array.length)?baseFlatten(array,1):[]}function head(array){return array&&array.length?array[0]:void 0}var intersection=baseRest((function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[]})),intersectionBy=baseRest((function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);return iteratee===last(mapped)?iteratee=void 0:mapped.pop(),mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[]})),intersectionWith=baseRest((function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);return(comparator="function"==typeof comparator?comparator:void 0)&&mapped.pop(),mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,void 0,comparator):[]}));function last(array){var length=null==array?0:array.length;return length?array[length-1]:void 0}var pull=baseRest(pullAll);function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array}var pullAt=flatRest((function(array,indexes){var length=null==array?0:array.length,result=baseAt(array,indexes);return basePullAt(array,arrayMap(indexes,(function(index){return isIndex(index,length)?+index:index})).sort(compareAscending)),result}));function reverse(array){return null==array?array:nativeReverse.call(array)}var union=baseRest((function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,!0))})),unionBy=baseRest((function(arrays){var iteratee=last(arrays);return isArrayLikeObject(iteratee)&&(iteratee=void 0),baseUniq(baseFlatten(arrays,1,isArrayLikeObject,!0),getIteratee(iteratee,2))})),unionWith=baseRest((function(arrays){var comparator=last(arrays);return comparator="function"==typeof comparator?comparator:void 0,baseUniq(baseFlatten(arrays,1,isArrayLikeObject,!0),void 0,comparator)}));function unzip(array){if(!array||!array.length)return[];var length=0;return array=arrayFilter(array,(function(group){if(isArrayLikeObject(group))return length=nativeMax(group.length,length),!0})),baseTimes(length,(function(index){return arrayMap(array,baseProperty(index))}))}function unzipWith(array,iteratee){if(!array||!array.length)return[];var result=unzip(array);return null==iteratee?result:arrayMap(result,(function(group){return apply(iteratee,void 0,group)}))}var without=baseRest((function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[]})),xor=baseRest((function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject))})),xorBy=baseRest((function(arrays){var iteratee=last(arrays);return isArrayLikeObject(iteratee)&&(iteratee=void 0),baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2))})),xorWith=baseRest((function(arrays){var comparator=last(arrays);return comparator="function"==typeof comparator?comparator:void 0,baseXor(arrayFilter(arrays,isArrayLikeObject),void 0,comparator)})),zip=baseRest(unzip);var zipWith=baseRest((function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:void 0;return iteratee="function"==typeof iteratee?(arrays.pop(),iteratee):void 0,unzipWith(arrays,iteratee)}));function chain(value){var result=lodash(value);return result.__chain__=!0,result}function thru(value,interceptor){return interceptor(value)}var wrapperAt=flatRest((function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function(object){return baseAt(object,paths)};return!(length>1||this.__actions__.length)&&value instanceof LazyWrapper&&isIndex(start)?((value=value.slice(start,+start+(length?1:0))).__actions__.push({func:thru,args:[interceptor],thisArg:void 0}),new LodashWrapper(value,this.__chain__).thru((function(array){return length&&!array.length&&array.push(void 0),array}))):this.thru(interceptor)}));var countBy=createAggregator((function(result,value,key){hasOwnProperty.call(result,key)?++result[key]:baseAssignValue(result,key,1)}));var find=createFind(findIndex),findLast=createFind(findLastIndex);function forEach(collection,iteratee){return(isArray(collection)?arrayEach:baseEach)(collection,getIteratee(iteratee,3))}function forEachRight(collection,iteratee){return(isArray(collection)?arrayEachRight:baseEachRight)(collection,getIteratee(iteratee,3))}var groupBy=createAggregator((function(result,value,key){hasOwnProperty.call(result,key)?result[key].push(value):baseAssignValue(result,key,[value])}));var invokeMap=baseRest((function(collection,path,args){var index=-1,isFunc="function"==typeof path,result=isArrayLike(collection)?Array(collection.length):[];return baseEach(collection,(function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args)})),result})),keyBy=createAggregator((function(result,value,key){baseAssignValue(result,key,value)}));function map(collection,iteratee){return(isArray(collection)?arrayMap:baseMap)(collection,getIteratee(iteratee,3))}var partition=createAggregator((function(result,value,key){result[key?0:1].push(value)}),(function(){return[[],[]]}));var sortBy=baseRest((function(collection,iteratees){if(null==collection)return[];var length=iteratees.length;return length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])?iteratees=[]:length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])&&(iteratees=[iteratees[0]]),baseOrderBy(collection,baseFlatten(iteratees,1),[])})),now=ctxNow||function(){return root.Date.now()};function ary(func,n,guard){return n=guard?void 0:n,createWrap(func,128,void 0,void 0,void 0,void 0,n=func&&null==n?func.length:n)}function before(n,func){var result;if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return n=toInteger(n),function(){return--n>0&&(result=func.apply(this,arguments)),n<=1&&(func=void 0),result}}var bind=baseRest((function(func,thisArg,partials){var bitmask=1;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=32}return createWrap(func,bitmask,thisArg,partials,holders)})),bindKey=baseRest((function(object,key,partials){var bitmask=3;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=32}return createWrap(key,bitmask,object,partials,holders)}));function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=!1,maxing=!1,trailing=!0;if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);function invokeFunc(time){var args=lastArgs,thisArg=lastThis;return lastArgs=lastThis=void 0,lastInvokeTime=time,result=func.apply(thisArg,args)}function leadingEdge(time){return lastInvokeTime=time,timerId=setTimeout(timerExpired,wait),leading?invokeFunc(time):result}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime;return void 0===lastCallTime||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&time-lastInvokeTime>=maxWait}function timerExpired(){var time=now();if(shouldInvoke(time))return trailingEdge(time);timerId=setTimeout(timerExpired,function(time){var timeWaiting=wait-(time-lastCallTime);return maxing?nativeMin(timeWaiting,maxWait-(time-lastInvokeTime)):timeWaiting}(time))}function trailingEdge(time){return timerId=void 0,trailing&&lastArgs?invokeFunc(time):(lastArgs=lastThis=void 0,result)}function debounced(){var time=now(),isInvoking=shouldInvoke(time);if(lastArgs=arguments,lastThis=this,lastCallTime=time,isInvoking){if(void 0===timerId)return leadingEdge(lastCallTime);if(maxing)return clearTimeout(timerId),timerId=setTimeout(timerExpired,wait),invokeFunc(lastCallTime)}return void 0===timerId&&(timerId=setTimeout(timerExpired,wait)),result}return wait=toNumber(wait)||0,isObject(options)&&(leading=!!options.leading,maxWait=(maxing="maxWait"in options)?nativeMax(toNumber(options.maxWait)||0,wait):maxWait,trailing="trailing"in options?!!options.trailing:trailing),debounced.cancel=function(){void 0!==timerId&&clearTimeout(timerId),lastInvokeTime=0,lastArgs=lastCallTime=lastThis=timerId=void 0},debounced.flush=function(){return void 0===timerId?result:trailingEdge(now())},debounced}var defer=baseRest((function(func,args){return baseDelay(func,1,args)})),delay=baseRest((function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args)}));function memoize(func,resolver){if("function"!=typeof func||null!=resolver&&"function"!=typeof resolver)throw new TypeError(FUNC_ERROR_TEXT);var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key))return cache.get(key);var result=func.apply(this,args);return memoized.cache=cache.set(key,result)||cache,result};return memoized.cache=new(memoize.Cache||MapCache),memoized}function negate(predicate){if("function"!=typeof predicate)throw new TypeError(FUNC_ERROR_TEXT);return function(){var args=arguments;switch(args.length){case 0:return!predicate.call(this);case 1:return!predicate.call(this,args[0]);case 2:return!predicate.call(this,args[0],args[1]);case 3:return!predicate.call(this,args[0],args[1],args[2])}return!predicate.apply(this,args)}}memoize.Cache=MapCache;var overArgs=castRest((function(func,transforms){var funcsLength=(transforms=1==transforms.length&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()))).length;return baseRest((function(args){for(var index=-1,length=nativeMin(args.length,funcsLength);++index<length;)args[index]=transforms[index].call(this,args[index]);return apply(func,this,args)}))})),partial=baseRest((function(func,partials){return createWrap(func,32,void 0,partials,replaceHolders(partials,getHolder(partial)))})),partialRight=baseRest((function(func,partials){return createWrap(func,64,void 0,partials,replaceHolders(partials,getHolder(partialRight)))})),rearg=flatRest((function(func,indexes){return createWrap(func,256,void 0,void 0,void 0,indexes)}));function eq(value,other){return value===other||value!=value&&other!=other}var gt=createRelationalOperation(baseGt),gte=createRelationalOperation((function(value,other){return value>=other})),isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,"callee")&&!propertyIsEnumerable.call(value,"callee")},isArray=Array.isArray,isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):function(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag};function isArrayLike(value){return null!=value&&isLength(value.length)&&!isFunction(value)}function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value)}var isBuffer=nativeIsBuffer||stubFalse,isDate=nodeIsDate?baseUnary(nodeIsDate):function(value){return isObjectLike(value)&&baseGetTag(value)==dateTag};function isError(value){if(!isObjectLike(value))return!1;var tag=baseGetTag(value);return tag==errorTag||"[object DOMException]"==tag||"string"==typeof value.message&&"string"==typeof value.name&&!isPlainObject(value)}function isFunction(value){if(!isObject(value))return!1;var tag=baseGetTag(value);return tag==funcTag||tag==genTag||"[object AsyncFunction]"==tag||"[object Proxy]"==tag}function isInteger(value){return"number"==typeof value&&value==toInteger(value)}function isLength(value){return"number"==typeof value&&value>-1&&value%1==0&&value<=9007199254740991}function isObject(value){var type=_typeof(value);return null!=value&&("object"==type||"function"==type)}function isObjectLike(value){return null!=value&&"object"==_typeof(value)}var isMap=nodeIsMap?baseUnary(nodeIsMap):function(value){return isObjectLike(value)&&getTag(value)==mapTag};function isNumber(value){return"number"==typeof value||isObjectLike(value)&&baseGetTag(value)==numberTag}function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag)return!1;var proto=getPrototype(value);if(null===proto)return!0;var Ctor=hasOwnProperty.call(proto,"constructor")&&proto.constructor;return"function"==typeof Ctor&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString}var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):function(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag};var isSet=nodeIsSet?baseUnary(nodeIsSet):function(value){return isObjectLike(value)&&getTag(value)==setTag};function isString(value){return"string"==typeof value||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag}function isSymbol(value){return"symbol"==_typeof(value)||isObjectLike(value)&&baseGetTag(value)==symbolTag}var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):function(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)]};var lt=createRelationalOperation(baseLt),lte=createRelationalOperation((function(value,other){return value<=other}));function toArray(value){if(!value)return[];if(isArrayLike(value))return isString(value)?stringToArray(value):copyArray(value);if(symIterator&&value[symIterator])return function(iterator){for(var data,result=[];!(data=iterator.next()).done;)result.push(data.value);return result}(value[symIterator]());var tag=getTag(value);return(tag==mapTag?mapToArray:tag==setTag?setToArray:values)(value)}function toFinite(value){return value?(value=toNumber(value))===1/0||value===-1/0?17976931348623157e292*(value<0?-1:1):value==value?value:0:0===value?value:0}function toInteger(value){var result=toFinite(value),remainder=result%1;return result==result?remainder?result-remainder:result:0}function toLength(value){return value?baseClamp(toInteger(value),0,4294967295):0}function toNumber(value){if("number"==typeof value)return value;if(isSymbol(value))return NaN;if(isObject(value)){var other="function"==typeof value.valueOf?value.valueOf():value;value=isObject(other)?other+"":other}if("string"!=typeof value)return 0===value?value:+value;value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NaN:+value}function toPlainObject(value){return copyObject(value,keysIn(value))}function toString(value){return null==value?"":baseToString(value)}var assign=createAssigner((function(object,source){if(isPrototype(source)||isArrayLike(source))copyObject(source,keys(source),object);else for(var key in source)hasOwnProperty.call(source,key)&&assignValue(object,key,source[key])})),assignIn=createAssigner((function(object,source){copyObject(source,keysIn(source),object)})),assignInWith=createAssigner((function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer)})),assignWith=createAssigner((function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer)})),at=flatRest(baseAt);var defaults=baseRest((function(object,sources){object=Object(object);var index=-1,length=sources.length,guard=length>2?sources[2]:void 0;for(guard&&isIterateeCall(sources[0],sources[1],guard)&&(length=1);++index<length;)for(var source=sources[index],props=keysIn(source),propsIndex=-1,propsLength=props.length;++propsIndex<propsLength;){var key=props[propsIndex],value=object[key];(void 0===value||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key))&&(object[key]=source[key])}return object})),defaultsDeep=baseRest((function(args){return args.push(void 0,customDefaultsMerge),apply(mergeWith,void 0,args)}));function get(object,path,defaultValue){var result=null==object?void 0:baseGet(object,path);return void 0===result?defaultValue:result}function hasIn(object,path){return null!=object&&hasPath(object,path,baseHasIn)}var invert=createInverter((function(result,value,key){null!=value&&"function"!=typeof value.toString&&(value=nativeObjectToString.call(value)),result[value]=key}),constant(identity)),invertBy=createInverter((function(result,value,key){null!=value&&"function"!=typeof value.toString&&(value=nativeObjectToString.call(value)),hasOwnProperty.call(result,value)?result[value].push(key):result[value]=[key]}),getIteratee),invoke=baseRest(baseInvoke);function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object)}function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,!0):baseKeysIn(object)}var merge=createAssigner((function(object,source,srcIndex){baseMerge(object,source,srcIndex)})),mergeWith=createAssigner((function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer)})),omit=flatRest((function(object,paths){var result={};if(null==object)return result;var isDeep=!1;paths=arrayMap(paths,(function(path){return path=castPath(path,object),isDeep||(isDeep=path.length>1),path})),copyObject(object,getAllKeysIn(object),result),isDeep&&(result=baseClone(result,7,customOmitClone));for(var length=paths.length;length--;)baseUnset(result,paths[length]);return result}));var pick=flatRest((function(object,paths){return null==object?{}:function(object,paths){return basePickBy(object,paths,(function(value,path){return hasIn(object,path)}))}(object,paths)}));function pickBy(object,predicate){if(null==object)return{};var props=arrayMap(getAllKeysIn(object),(function(prop){return[prop]}));return predicate=getIteratee(predicate),basePickBy(object,props,(function(value,path){return predicate(value,path[0])}))}var toPairs=createToPairs(keys),toPairsIn=createToPairs(keysIn);function values(object){return null==object?[]:baseValues(object,keys(object))}var camelCase=createCompounder((function(result,word,index){return word=word.toLowerCase(),result+(index?capitalize(word):word)}));function capitalize(string){return upperFirst(toString(string).toLowerCase())}function deburr(string){return(string=toString(string))&&string.replace(reLatin,deburrLetter).replace(reComboMark,"")}var kebabCase=createCompounder((function(result,word,index){return result+(index?"-":"")+word.toLowerCase()})),lowerCase=createCompounder((function(result,word,index){return result+(index?" ":"")+word.toLowerCase()})),lowerFirst=createCaseFirst("toLowerCase");var snakeCase=createCompounder((function(result,word,index){return result+(index?"_":"")+word.toLowerCase()}));var startCase=createCompounder((function(result,word,index){return result+(index?" ":"")+upperFirst(word)}));var upperCase=createCompounder((function(result,word,index){return result+(index?" ":"")+word.toUpperCase()})),upperFirst=createCaseFirst("toUpperCase");function words(string,pattern,guard){return string=toString(string),void 0===(pattern=guard?void 0:pattern)?function(string){return reHasUnicodeWord.test(string)}(string)?function(string){return string.match(reUnicodeWord)||[]}(string):function(string){return string.match(reAsciiWord)||[]}(string):string.match(pattern)||[]}var attempt=baseRest((function(func,args){try{return apply(func,void 0,args)}catch(e){return isError(e)?e:new Error(e)}})),bindAll=flatRest((function(object,methodNames){return arrayEach(methodNames,(function(key){key=toKey(key),baseAssignValue(object,key,bind(object[key],object))})),object}));function constant(value){return function(){return value}}var flow=createFlow(),flowRight=createFlow(!0);function identity(value){return value}function iteratee(func){return baseIteratee("function"==typeof func?func:baseClone(func,1))}var method=baseRest((function(path,args){return function(object){return baseInvoke(object,path,args)}})),methodOf=baseRest((function(object,args){return function(path){return baseInvoke(object,path,args)}}));function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);null!=options||isObject(source)&&(methodNames.length||!props.length)||(options=source,source=object,object=this,methodNames=baseFunctions(source,keys(source)));var chain=!(isObject(options)&&"chain"in options&&!options.chain),isFunc=isFunction(object);return arrayEach(methodNames,(function(methodName){var func=source[methodName];object[methodName]=func,isFunc&&(object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);return actions.push({func:func,args:arguments,thisArg:object}),result.__chain__=chainAll,result}return func.apply(object,arrayPush([this.value()],arguments))})})),object}function noop(){}var over=createOver(arrayMap),overEvery=createOver(arrayEvery),overSome=createOver(arraySome);function property(path){return isKey(path)?baseProperty(toKey(path)):function(path){return function(object){return baseGet(object,path)}}(path)}var range=createRange(),rangeRight=createRange(!0);function stubArray(){return[]}function stubFalse(){return!1}var add=createMathOperation((function(augend,addend){return augend+addend}),0),ceil=createRound("ceil"),divide=createMathOperation((function(dividend,divisor){return dividend/divisor}),1),floor=createRound("floor");var source,multiply=createMathOperation((function(multiplier,multiplicand){return multiplier*multiplicand}),1),round=createRound("round"),subtract=createMathOperation((function(minuend,subtrahend){return minuend-subtrahend}),0);return lodash.after=function(n,func){if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return n=toInteger(n),function(){if(--n<1)return func.apply(this,arguments)}},lodash.ary=ary,lodash.assign=assign,lodash.assignIn=assignIn,lodash.assignInWith=assignInWith,lodash.assignWith=assignWith,lodash.at=at,lodash.before=before,lodash.bind=bind,lodash.bindAll=bindAll,lodash.bindKey=bindKey,lodash.castArray=function(){if(!arguments.length)return[];var value=arguments[0];return isArray(value)?value:[value]},lodash.chain=chain,lodash.chunk=function(array,size,guard){size=(guard?isIterateeCall(array,size,guard):void 0===size)?1:nativeMax(toInteger(size),0);var length=null==array?0:array.length;if(!length||size<1)return[];for(var index=0,resIndex=0,result=Array(nativeCeil(length/size));index<length;)result[resIndex++]=baseSlice(array,index,index+=size);return result},lodash.compact=function(array){for(var index=-1,length=null==array?0:array.length,resIndex=0,result=[];++index<length;){var value=array[index];value&&(result[resIndex++]=value)}return result},lodash.concat=function(){var length=arguments.length;if(!length)return[];for(var args=Array(length-1),array=arguments[0],index=length;index--;)args[index-1]=arguments[index];return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1))},lodash.cond=function(pairs){var length=null==pairs?0:pairs.length,toIteratee=getIteratee();return pairs=length?arrayMap(pairs,(function(pair){if("function"!=typeof pair[1])throw new TypeError(FUNC_ERROR_TEXT);return[toIteratee(pair[0]),pair[1]]})):[],baseRest((function(args){for(var index=-1;++index<length;){var pair=pairs[index];if(apply(pair[0],this,args))return apply(pair[1],this,args)}}))},lodash.conforms=function(source){return function(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props)}}(baseClone(source,1))},lodash.constant=constant,lodash.countBy=countBy,lodash.create=function(prototype,properties){var result=baseCreate(prototype);return null==properties?result:baseAssign(result,properties)},lodash.curry=function curry(func,arity,guard){var result=createWrap(func,8,void 0,void 0,void 0,void 0,void 0,arity=guard?void 0:arity);return result.placeholder=curry.placeholder,result},lodash.curryRight=function curryRight(func,arity,guard){var result=createWrap(func,16,void 0,void 0,void 0,void 0,void 0,arity=guard?void 0:arity);return result.placeholder=curryRight.placeholder,result},lodash.debounce=debounce,lodash.defaults=defaults,lodash.defaultsDeep=defaultsDeep,lodash.defer=defer,lodash.delay=delay,lodash.difference=difference,lodash.differenceBy=differenceBy,lodash.differenceWith=differenceWith,lodash.drop=function(array,n,guard){var length=null==array?0:array.length;return length?baseSlice(array,(n=guard||void 0===n?1:toInteger(n))<0?0:n,length):[]},lodash.dropRight=function(array,n,guard){var length=null==array?0:array.length;return length?baseSlice(array,0,(n=length-(n=guard||void 0===n?1:toInteger(n)))<0?0:n):[]},lodash.dropRightWhile=function(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),!0,!0):[]},lodash.dropWhile=function(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),!0):[]},lodash.fill=function(array,value,start,end){var length=null==array?0:array.length;return length?(start&&"number"!=typeof start&&isIterateeCall(array,value,start)&&(start=0,end=length),function(array,value,start,end){var length=array.length;for((start=toInteger(start))<0&&(start=-start>length?0:length+start),(end=void 0===end||end>length?length:toInteger(end))<0&&(end+=length),end=start>end?0:toLength(end);start<end;)array[start++]=value;return array}(array,value,start,end)):[]},lodash.filter=function(collection,predicate){return(isArray(collection)?arrayFilter:baseFilter)(collection,getIteratee(predicate,3))},lodash.flatMap=function(collection,iteratee){return baseFlatten(map(collection,iteratee),1)},lodash.flatMapDeep=function(collection,iteratee){return baseFlatten(map(collection,iteratee),1/0)},lodash.flatMapDepth=function(collection,iteratee,depth){return depth=void 0===depth?1:toInteger(depth),baseFlatten(map(collection,iteratee),depth)},lodash.flatten=flatten,lodash.flattenDeep=function(array){return(null==array?0:array.length)?baseFlatten(array,1/0):[]},lodash.flattenDepth=function(array,depth){return(null==array?0:array.length)?baseFlatten(array,depth=void 0===depth?1:toInteger(depth)):[]},lodash.flip=function(func){return createWrap(func,512)},lodash.flow=flow,lodash.flowRight=flowRight,lodash.fromPairs=function(pairs){for(var index=-1,length=null==pairs?0:pairs.length,result={};++index<length;){var pair=pairs[index];result[pair[0]]=pair[1]}return result},lodash.functions=function(object){return null==object?[]:baseFunctions(object,keys(object))},lodash.functionsIn=function(object){return null==object?[]:baseFunctions(object,keysIn(object))},lodash.groupBy=groupBy,lodash.initial=function(array){return(null==array?0:array.length)?baseSlice(array,0,-1):[]},lodash.intersection=intersection,lodash.intersectionBy=intersectionBy,lodash.intersectionWith=intersectionWith,lodash.invert=invert,lodash.invertBy=invertBy,lodash.invokeMap=invokeMap,lodash.iteratee=iteratee,lodash.keyBy=keyBy,lodash.keys=keys,lodash.keysIn=keysIn,lodash.map=map,lodash.mapKeys=function(object,iteratee){var result={};return iteratee=getIteratee(iteratee,3),baseForOwn(object,(function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value)})),result},lodash.mapValues=function(object,iteratee){var result={};return iteratee=getIteratee(iteratee,3),baseForOwn(object,(function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object))})),result},lodash.matches=function(source){return baseMatches(baseClone(source,1))},lodash.matchesProperty=function(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,1))},lodash.memoize=memoize,lodash.merge=merge,lodash.mergeWith=mergeWith,lodash.method=method,lodash.methodOf=methodOf,lodash.mixin=mixin,lodash.negate=negate,lodash.nthArg=function(n){return n=toInteger(n),baseRest((function(args){return baseNth(args,n)}))},lodash.omit=omit,lodash.omitBy=function(object,predicate){return pickBy(object,negate(getIteratee(predicate)))},lodash.once=function(func){return before(2,func)},lodash.orderBy=function(collection,iteratees,orders,guard){return null==collection?[]:(isArray(iteratees)||(iteratees=null==iteratees?[]:[iteratees]),isArray(orders=guard?void 0:orders)||(orders=null==orders?[]:[orders]),baseOrderBy(collection,iteratees,orders))},lodash.over=over,lodash.overArgs=overArgs,lodash.overEvery=overEvery,lodash.overSome=overSome,lodash.partial=partial,lodash.partialRight=partialRight,lodash.partition=partition,lodash.pick=pick,lodash.pickBy=pickBy,lodash.property=property,lodash.propertyOf=function(object){return function(path){return null==object?void 0:baseGet(object,path)}},lodash.pull=pull,lodash.pullAll=pullAll,lodash.pullAllBy=function(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array},lodash.pullAllWith=function(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,void 0,comparator):array},lodash.pullAt=pullAt,lodash.range=range,lodash.rangeRight=rangeRight,lodash.rearg=rearg,lodash.reject=function(collection,predicate){return(isArray(collection)?arrayFilter:baseFilter)(collection,negate(getIteratee(predicate,3)))},lodash.remove=function(array,predicate){var result=[];if(!array||!array.length)return result;var index=-1,indexes=[],length=array.length;for(predicate=getIteratee(predicate,3);++index<length;){var value=array[index];predicate(value,index,array)&&(result.push(value),indexes.push(index))}return basePullAt(array,indexes),result},lodash.rest=function(func,start){if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return baseRest(func,start=void 0===start?start:toInteger(start))},lodash.reverse=reverse,lodash.sampleSize=function(collection,n,guard){return n=(guard?isIterateeCall(collection,n,guard):void 0===n)?1:toInteger(n),(isArray(collection)?arraySampleSize:baseSampleSize)(collection,n)},lodash.set=function(object,path,value){return null==object?object:baseSet(object,path,value)},lodash.setWith=function(object,path,value,customizer){return customizer="function"==typeof customizer?customizer:void 0,null==object?object:baseSet(object,path,value,customizer)},lodash.shuffle=function(collection){return(isArray(collection)?arrayShuffle:baseShuffle)(collection)},lodash.slice=function(array,start,end){var length=null==array?0:array.length;return length?(end&&"number"!=typeof end&&isIterateeCall(array,start,end)?(start=0,end=length):(start=null==start?0:toInteger(start),end=void 0===end?length:toInteger(end)),baseSlice(array,start,end)):[]},lodash.sortBy=sortBy,lodash.sortedUniq=function(array){return array&&array.length?baseSortedUniq(array):[]},lodash.sortedUniqBy=function(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[]},lodash.split=function(string,separator,limit){return limit&&"number"!=typeof limit&&isIterateeCall(string,separator,limit)&&(separator=limit=void 0),(limit=void 0===limit?4294967295:limit>>>0)?(string=toString(string))&&("string"==typeof separator||null!=separator&&!isRegExp(separator))&&!(separator=baseToString(separator))&&hasUnicode(string)?castSlice(stringToArray(string),0,limit):string.split(separator,limit):[]},lodash.spread=function(func,start){if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return start=null==start?0:nativeMax(toInteger(start),0),baseRest((function(args){var array=args[start],otherArgs=castSlice(args,0,start);return array&&arrayPush(otherArgs,array),apply(func,this,otherArgs)}))},lodash.tail=function(array){var length=null==array?0:array.length;return length?baseSlice(array,1,length):[]},lodash.take=function(array,n,guard){return array&&array.length?baseSlice(array,0,(n=guard||void 0===n?1:toInteger(n))<0?0:n):[]},lodash.takeRight=function(array,n,guard){var length=null==array?0:array.length;return length?baseSlice(array,(n=length-(n=guard||void 0===n?1:toInteger(n)))<0?0:n,length):[]},lodash.takeRightWhile=function(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),!1,!0):[]},lodash.takeWhile=function(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[]},lodash.tap=function(value,interceptor){return interceptor(value),value},lodash.throttle=function(func,wait,options){var leading=!0,trailing=!0;if("function"!=typeof func)throw new TypeError(FUNC_ERROR_TEXT);return isObject(options)&&(leading="leading"in options?!!options.leading:leading,trailing="trailing"in options?!!options.trailing:trailing),debounce(func,wait,{leading:leading,maxWait:wait,trailing:trailing})},lodash.thru=thru,lodash.toArray=toArray,lodash.toPairs=toPairs,lodash.toPairsIn=toPairsIn,lodash.toPath=function(value){return isArray(value)?arrayMap(value,toKey):isSymbol(value)?[value]:copyArray(stringToPath(toString(value)))},lodash.toPlainObject=toPlainObject,lodash.transform=function(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);if(iteratee=getIteratee(iteratee,4),null==accumulator){var Ctor=object&&object.constructor;accumulator=isArrLike?isArr?new Ctor:[]:isObject(object)&&isFunction(Ctor)?baseCreate(getPrototype(object)):{}}return(isArrLike?arrayEach:baseForOwn)(object,(function(value,index,object){return iteratee(accumulator,value,index,object)})),accumulator},lodash.unary=function(func){return ary(func,1)},lodash.union=union,lodash.unionBy=unionBy,lodash.unionWith=unionWith,lodash.uniq=function(array){return array&&array.length?baseUniq(array):[]},lodash.uniqBy=function(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[]},lodash.uniqWith=function(array,comparator){return comparator="function"==typeof comparator?comparator:void 0,array&&array.length?baseUniq(array,void 0,comparator):[]},lodash.unset=function(object,path){return null==object||baseUnset(object,path)},lodash.unzip=unzip,lodash.unzipWith=unzipWith,lodash.update=function(object,path,updater){return null==object?object:baseUpdate(object,path,castFunction(updater))},lodash.updateWith=function(object,path,updater,customizer){return customizer="function"==typeof customizer?customizer:void 0,null==object?object:baseUpdate(object,path,castFunction(updater),customizer)},lodash.values=values,lodash.valuesIn=function(object){return null==object?[]:baseValues(object,keysIn(object))},lodash.without=without,lodash.words=words,lodash.wrap=function(value,wrapper){return partial(castFunction(wrapper),value)},lodash.xor=xor,lodash.xorBy=xorBy,lodash.xorWith=xorWith,lodash.zip=zip,lodash.zipObject=function(props,values){return baseZipObject(props||[],values||[],assignValue)},lodash.zipObjectDeep=function(props,values){return baseZipObject(props||[],values||[],baseSet)},lodash.zipWith=zipWith,lodash.entries=toPairs,lodash.entriesIn=toPairsIn,lodash.extend=assignIn,lodash.extendWith=assignInWith,mixin(lodash,lodash),lodash.add=add,lodash.attempt=attempt,lodash.camelCase=camelCase,lodash.capitalize=capitalize,lodash.ceil=ceil,lodash.clamp=function(number,lower,upper){return void 0===upper&&(upper=lower,lower=void 0),void 0!==upper&&(upper=(upper=toNumber(upper))==upper?upper:0),void 0!==lower&&(lower=(lower=toNumber(lower))==lower?lower:0),baseClamp(toNumber(number),lower,upper)},lodash.clone=function(value){return baseClone(value,4)},lodash.cloneDeep=function(value){return baseClone(value,5)},lodash.cloneDeepWith=function(value,customizer){return baseClone(value,5,customizer="function"==typeof customizer?customizer:void 0)},lodash.cloneWith=function(value,customizer){return baseClone(value,4,customizer="function"==typeof customizer?customizer:void 0)},lodash.conformsTo=function(object,source){return null==source||baseConformsTo(object,source,keys(source))},lodash.deburr=deburr,lodash.defaultTo=function(value,defaultValue){return null==value||value!=value?defaultValue:value},lodash.divide=divide,lodash.endsWith=function(string,target,position){string=toString(string),target=baseToString(target);var length=string.length,end=position=void 0===position?length:baseClamp(toInteger(position),0,length);return(position-=target.length)>=0&&string.slice(position,end)==target},lodash.eq=eq,lodash.escape=function(string){return(string=toString(string))&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string},lodash.escapeRegExp=function(string){return(string=toString(string))&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,"\\$&"):string},lodash.every=function(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;return guard&&isIterateeCall(collection,predicate,guard)&&(predicate=void 0),func(collection,getIteratee(predicate,3))},lodash.find=find,lodash.findIndex=findIndex,lodash.findKey=function(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn)},lodash.findLast=findLast,lodash.findLastIndex=findLastIndex,lodash.findLastKey=function(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight)},lodash.floor=floor,lodash.forEach=forEach,lodash.forEachRight=forEachRight,lodash.forIn=function(object,iteratee){return null==object?object:baseFor(object,getIteratee(iteratee,3),keysIn)},lodash.forInRight=function(object,iteratee){return null==object?object:baseForRight(object,getIteratee(iteratee,3),keysIn)},lodash.forOwn=function(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3))},lodash.forOwnRight=function(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3))},lodash.get=get,lodash.gt=gt,lodash.gte=gte,lodash.has=function(object,path){return null!=object&&hasPath(object,path,baseHas)},lodash.hasIn=hasIn,lodash.head=head,lodash.identity=identity,lodash.includes=function(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection),fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;return fromIndex<0&&(fromIndex=nativeMax(length+fromIndex,0)),isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1},lodash.indexOf=function(array,value,fromIndex){var length=null==array?0:array.length;if(!length)return-1;var index=null==fromIndex?0:toInteger(fromIndex);return index<0&&(index=nativeMax(length+index,0)),baseIndexOf(array,value,index)},lodash.inRange=function(number,start,end){return start=toFinite(start),void 0===end?(end=start,start=0):end=toFinite(end),function(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end)}(number=toNumber(number),start,end)},lodash.invoke=invoke,lodash.isArguments=isArguments,lodash.isArray=isArray,lodash.isArrayBuffer=isArrayBuffer,lodash.isArrayLike=isArrayLike,lodash.isArrayLikeObject=isArrayLikeObject,lodash.isBoolean=function(value){return!0===value||!1===value||isObjectLike(value)&&baseGetTag(value)==boolTag},lodash.isBuffer=isBuffer,lodash.isDate=isDate,lodash.isElement=function(value){return isObjectLike(value)&&1===value.nodeType&&!isPlainObject(value)},lodash.isEmpty=function(value){if(null==value)return!0;if(isArrayLike(value)&&(isArray(value)||"string"==typeof value||"function"==typeof value.splice||isBuffer(value)||isTypedArray(value)||isArguments(value)))return!value.length;var tag=getTag(value);if(tag==mapTag||tag==setTag)return!value.size;if(isPrototype(value))return!baseKeys(value).length;for(var key in value)if(hasOwnProperty.call(value,key))return!1;return!0},lodash.isEqual=function(value,other){return baseIsEqual(value,other)},lodash.isEqualWith=function(value,other,customizer){var result=(customizer="function"==typeof customizer?customizer:void 0)?customizer(value,other):void 0;return void 0===result?baseIsEqual(value,other,void 0,customizer):!!result},lodash.isError=isError,lodash.isFinite=function(value){return"number"==typeof value&&nativeIsFinite(value)},lodash.isFunction=isFunction,lodash.isInteger=isInteger,lodash.isLength=isLength,lodash.isMap=isMap,lodash.isMatch=function(object,source){return object===source||baseIsMatch(object,source,getMatchData(source))},lodash.isMatchWith=function(object,source,customizer){return customizer="function"==typeof customizer?customizer:void 0,baseIsMatch(object,source,getMatchData(source),customizer)},lodash.isNaN=function(value){return isNumber(value)&&value!=+value},lodash.isNative=function(value){if(isMaskable(value))throw new Error("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return baseIsNative(value)},lodash.isNil=function(value){return null==value},lodash.isNull=function(value){return null===value},lodash.isNumber=isNumber,lodash.isObject=isObject,lodash.isObjectLike=isObjectLike,lodash.isPlainObject=isPlainObject,lodash.isRegExp=isRegExp,lodash.isSafeInteger=function(value){return isInteger(value)&&value>=-9007199254740991&&value<=9007199254740991},lodash.isSet=isSet,lodash.isString=isString,lodash.isSymbol=isSymbol,lodash.isTypedArray=isTypedArray,lodash.isUndefined=function(value){return void 0===value},lodash.isWeakMap=function(value){return isObjectLike(value)&&getTag(value)==weakMapTag},lodash.isWeakSet=function(value){return isObjectLike(value)&&"[object WeakSet]"==baseGetTag(value)},lodash.join=function(array,separator){return null==array?"":nativeJoin.call(array,separator)},lodash.kebabCase=kebabCase,lodash.last=last,lodash.lastIndexOf=function(array,value,fromIndex){var length=null==array?0:array.length;if(!length)return-1;var index=length;return void 0!==fromIndex&&(index=(index=toInteger(fromIndex))<0?nativeMax(length+index,0):nativeMin(index,length-1)),value==value?function(array,value,fromIndex){for(var index=fromIndex+1;index--;)if(array[index]===value)return index;return index}(array,value,index):baseFindIndex(array,baseIsNaN,index,!0)},lodash.lowerCase=lowerCase,lodash.lowerFirst=lowerFirst,lodash.lt=lt,lodash.lte=lte,lodash.max=function(array){return array&&array.length?baseExtremum(array,identity,baseGt):void 0},lodash.maxBy=function(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):void 0},lodash.mean=function(array){return baseMean(array,identity)},lodash.meanBy=function(array,iteratee){return baseMean(array,getIteratee(iteratee,2))},lodash.min=function(array){return array&&array.length?baseExtremum(array,identity,baseLt):void 0},lodash.minBy=function(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):void 0},lodash.stubArray=stubArray,lodash.stubFalse=stubFalse,lodash.stubObject=function(){return{}},lodash.stubString=function(){return""},lodash.stubTrue=function(){return!0},lodash.multiply=multiply,lodash.nth=function(array,n){return array&&array.length?baseNth(array,toInteger(n)):void 0},lodash.noConflict=function(){return root._===this&&(root._=oldDash),this},lodash.noop=noop,lodash.now=now,lodash.pad=function(string,length,chars){string=toString(string);var strLength=(length=toInteger(length))?stringSize(string):0;if(!length||strLength>=length)return string;var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars)},lodash.padEnd=function(string,length,chars){string=toString(string);var strLength=(length=toInteger(length))?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string},lodash.padStart=function(string,length,chars){string=toString(string);var strLength=(length=toInteger(length))?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string},lodash.parseInt=function(string,radix,guard){return guard||null==radix?radix=0:radix&&(radix=+radix),nativeParseInt(toString(string).replace(reTrimStart,""),radix||0)},lodash.random=function(lower,upper,floating){if(floating&&"boolean"!=typeof floating&&isIterateeCall(lower,upper,floating)&&(upper=floating=void 0),void 0===floating&&("boolean"==typeof upper?(floating=upper,upper=void 0):"boolean"==typeof lower&&(floating=lower,lower=void 0)),void 0===lower&&void 0===upper?(lower=0,upper=1):(lower=toFinite(lower),void 0===upper?(upper=lower,lower=0):upper=toFinite(upper)),lower>upper){var temp=lower;lower=upper,upper=temp}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat("1e-"+((rand+"").length-1))),upper)}return baseRandom(lower,upper)},lodash.reduce=function(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach)},lodash.reduceRight=function(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight)},lodash.repeat=function(string,n,guard){return n=(guard?isIterateeCall(string,n,guard):void 0===n)?1:toInteger(n),baseRepeat(toString(string),n)},lodash.replace=function(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2])},lodash.result=function(object,path,defaultValue){var index=-1,length=(path=castPath(path,object)).length;for(length||(length=1,object=void 0);++index<length;){var value=null==object?void 0:object[toKey(path[index])];void 0===value&&(index=length,value=defaultValue),object=isFunction(value)?value.call(object):value}return object},lodash.round=round,lodash.runInContext=runInContext,lodash.sample=function(collection){return(isArray(collection)?arraySample:baseSample)(collection)},lodash.size=function(collection){if(null==collection)return 0;if(isArrayLike(collection))return isString(collection)?stringSize(collection):collection.length;var tag=getTag(collection);return tag==mapTag||tag==setTag?collection.size:baseKeys(collection).length},lodash.snakeCase=snakeCase,lodash.some=function(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;return guard&&isIterateeCall(collection,predicate,guard)&&(predicate=void 0),func(collection,getIteratee(predicate,3))},lodash.sortedIndex=function(array,value){return baseSortedIndex(array,value)},lodash.sortedIndexBy=function(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2))},lodash.sortedIndexOf=function(array,value){var length=null==array?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value))return index}return-1},lodash.sortedLastIndex=function(array,value){return baseSortedIndex(array,value,!0)},lodash.sortedLastIndexBy=function(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),!0)},lodash.sortedLastIndexOf=function(array,value){if(null==array?0:array.length){var index=baseSortedIndex(array,value,!0)-1;if(eq(array[index],value))return index}return-1},lodash.startCase=startCase,lodash.startsWith=function(string,target,position){return string=toString(string),position=null==position?0:baseClamp(toInteger(position),0,string.length),target=baseToString(target),string.slice(position,position+target.length)==target},lodash.subtract=subtract,lodash.sum=function(array){return array&&array.length?baseSum(array,identity):0},lodash.sumBy=function(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0},lodash.template=function(string,options,guard){var settings=lodash.templateSettings;guard&&isIterateeCall(string,options,guard)&&(options=void 0),string=toString(string),options=assignInWith({},options,settings,customDefaultsAssignIn);var isEscaping,isEvaluating,imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys),index=0,interpolate=options.interpolate||reNoMatch,source="__p += '",reDelimiters=RegExp((options.escape||reNoMatch).source+"|"+interpolate.source+"|"+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(options.evaluate||reNoMatch).source+"|$","g"),sourceURL="//# sourceURL="+(hasOwnProperty.call(options,"sourceURL")?(options.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++templateCounter+"]")+"\n";string.replace(reDelimiters,(function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){return interpolateValue||(interpolateValue=esTemplateValue),source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar),escapeValue&&(isEscaping=!0,source+="' +\n__e("+escapeValue+") +\n'"),evaluateValue&&(isEvaluating=!0,source+="';\n"+evaluateValue+";\n__p += '"),interpolateValue&&(source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'"),index=offset+match.length,match})),source+="';\n";var variable=hasOwnProperty.call(options,"variable")&&options.variable;if(variable){if(reForbiddenIdentifierChars.test(variable))throw new Error("Invalid `variable` option passed into `_.template`")}else source="with (obj) {\n"+source+"\n}\n";source=(isEvaluating?source.replace(reEmptyStringLeading,""):source).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),source="function("+(variable||"obj")+") {\n"+(variable?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(isEscaping?", __e = _.escape":"")+(isEvaluating?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+source+"return __p\n}";var result=attempt((function(){return Function(importsKeys,sourceURL+"return "+source).apply(void 0,importsValues)}));if(result.source=source,isError(result))throw result;return result},lodash.times=function(n,iteratee){if((n=toInteger(n))<1||n>9007199254740991)return[];var index=4294967295,length=nativeMin(n,4294967295);n-=4294967295;for(var result=baseTimes(length,iteratee=getIteratee(iteratee));++index<n;)iteratee(index);return result},lodash.toFinite=toFinite,lodash.toInteger=toInteger,lodash.toLength=toLength,lodash.toLower=function(value){return toString(value).toLowerCase()},lodash.toNumber=toNumber,lodash.toSafeInteger=function(value){return value?baseClamp(toInteger(value),-9007199254740991,9007199254740991):0===value?value:0},lodash.toString=toString,lodash.toUpper=function(value){return toString(value).toUpperCase()},lodash.trim=function(string,chars,guard){if((string=toString(string))&&(guard||void 0===chars))return baseTrim(string);if(!string||!(chars=baseToString(chars)))return string;var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars);return castSlice(strSymbols,charsStartIndex(strSymbols,chrSymbols),charsEndIndex(strSymbols,chrSymbols)+1).join("")},lodash.trimEnd=function(string,chars,guard){if((string=toString(string))&&(guard||void 0===chars))return string.slice(0,trimmedEndIndex(string)+1);if(!string||!(chars=baseToString(chars)))return string;var strSymbols=stringToArray(string);return castSlice(strSymbols,0,charsEndIndex(strSymbols,stringToArray(chars))+1).join("")},lodash.trimStart=function(string,chars,guard){if((string=toString(string))&&(guard||void 0===chars))return string.replace(reTrimStart,"");if(!string||!(chars=baseToString(chars)))return string;var strSymbols=stringToArray(string);return castSlice(strSymbols,charsStartIndex(strSymbols,stringToArray(chars))).join("")},lodash.truncate=function(string,options){var length=30,omission="...";if(isObject(options)){var separator="separator"in options?options.separator:separator;length="length"in options?toInteger(options.length):length,omission="omission"in options?baseToString(options.omission):omission}var strLength=(string=toString(string)).length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length}if(length>=strLength)return string;var end=length-stringSize(omission);if(end<1)return omission;var result=strSymbols?castSlice(strSymbols,0,end).join(""):string.slice(0,end);if(void 0===separator)return result+omission;if(strSymbols&&(end+=result.length-end),isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;for(separator.global||(separator=RegExp(separator.source,toString(reFlags.exec(separator))+"g")),separator.lastIndex=0;match=separator.exec(substring);)var newEnd=match.index;result=result.slice(0,void 0===newEnd?end:newEnd)}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);index>-1&&(result=result.slice(0,index))}return result+omission},lodash.unescape=function(string){return(string=toString(string))&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string},lodash.uniqueId=function(prefix){var id=++idCounter;return toString(prefix)+id},lodash.upperCase=upperCase,lodash.upperFirst=upperFirst,lodash.each=forEach,lodash.eachRight=forEachRight,lodash.first=head,mixin(lodash,(source={},baseForOwn(lodash,(function(func,methodName){hasOwnProperty.call(lodash.prototype,methodName)||(source[methodName]=func)})),source),{chain:!1}),lodash.VERSION="4.17.21",arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(methodName){lodash[methodName].placeholder=lodash})),arrayEach(["drop","take"],(function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=void 0===n?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();return result.__filtered__?result.__takeCount__=nativeMin(n,result.__takeCount__):result.__views__.push({size:nativeMin(n,4294967295),type:methodName+(result.__dir__<0?"Right":"")}),result},LazyWrapper.prototype[methodName+"Right"]=function(n){return this.reverse()[methodName](n).reverse()}})),arrayEach(["filter","map","takeWhile"],(function(methodName,index){var type=index+1,isFilter=1==type||3==type;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();return result.__iteratees__.push({iteratee:getIteratee(iteratee,3),type:type}),result.__filtered__=result.__filtered__||isFilter,result}})),arrayEach(["head","last"],(function(methodName,index){var takeName="take"+(index?"Right":"");LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0]}})),arrayEach(["initial","tail"],(function(methodName,index){var dropName="drop"+(index?"":"Right");LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1)}})),LazyWrapper.prototype.compact=function(){return this.filter(identity)},LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head()},LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate)},LazyWrapper.prototype.invokeMap=baseRest((function(path,args){return"function"==typeof path?new LazyWrapper(this):this.map((function(value){return baseInvoke(value,path,args)}))})),LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)))},LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;return result.__filtered__&&(start>0||end<0)?new LazyWrapper(result):(start<0?result=result.takeRight(-start):start&&(result=result.drop(start)),void 0!==end&&(result=(end=toInteger(end))<0?result.dropRight(-end):result.take(end-start)),result)},LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse()},LazyWrapper.prototype.toArray=function(){return this.take(4294967295)},baseForOwn(LazyWrapper.prototype,(function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?"take"+("last"==methodName?"Right":""):methodName],retUnwrapped=isTaker||/^find/.test(methodName);lodashFunc&&(lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value),interceptor=function(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result};useLazy&&checkIteratee&&"function"==typeof iteratee&&1!=iteratee.length&&(isLazy=useLazy=!1);var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);return result.__actions__.push({func:thru,args:[interceptor],thisArg:void 0}),new LodashWrapper(result,chainAll)}return isUnwrapped&&onlyLazy?func.apply(this,args):(result=this.thru(interceptor),isUnwrapped?isTaker?result.value()[0]:result.value():result)})})),arrayEach(["pop","push","shift","sort","splice","unshift"],(function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?"tap":"thru",retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args)}return this[chainName]((function(value){return func.apply(isArray(value)?value:[],args)}))}})),baseForOwn(LazyWrapper.prototype,(function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+"";hasOwnProperty.call(realNames,key)||(realNames[key]=[]),realNames[key].push({name:methodName,func:lodashFunc})}})),realNames[createHybrid(void 0,2).name]=[{name:"wrapper",func:void 0}],LazyWrapper.prototype.clone=function(){var result=new LazyWrapper(this.__wrapped__);return result.__actions__=copyArray(this.__actions__),result.__dir__=this.__dir__,result.__filtered__=this.__filtered__,result.__iteratees__=copyArray(this.__iteratees__),result.__takeCount__=this.__takeCount__,result.__views__=copyArray(this.__views__),result},LazyWrapper.prototype.reverse=function(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1,result.__filtered__=!0}else(result=this.clone()).__dir__*=-1;return result},LazyWrapper.prototype.value=function(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=function(start,end,transforms){var index=-1,length=transforms.length;for(;++index<length;){var data=transforms[index],size=data.size;switch(data.type){case"drop":start+=size;break;case"dropRight":end-=size;break;case"take":end=nativeMin(end,start+size);break;case"takeRight":start=nativeMax(start,end-size)}}return{start:start,end:end}}(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length)return baseWrapperValue(array,this.__actions__);var result=[];outer:for(;length--&&resIndex<takeCount;){for(var iterIndex=-1,value=array[index+=dir];++iterIndex<iterLength;){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(2==type)value=computed;else if(!computed){if(1==type)continue outer;break outer}}result[resIndex++]=value}return result},lodash.prototype.at=wrapperAt,lodash.prototype.chain=function(){return chain(this)},lodash.prototype.commit=function(){return new LodashWrapper(this.value(),this.__chain__)},lodash.prototype.next=function(){void 0===this.__values__&&(this.__values__=toArray(this.value()));var done=this.__index__>=this.__values__.length;return{done:done,value:done?void 0:this.__values__[this.__index__++]}},lodash.prototype.plant=function(value){for(var result,parent=this;parent instanceof baseLodash;){var clone=wrapperClone(parent);clone.__index__=0,clone.__values__=void 0,result?previous.__wrapped__=clone:result=clone;var previous=clone;parent=parent.__wrapped__}return previous.__wrapped__=value,result},lodash.prototype.reverse=function(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;return this.__actions__.length&&(wrapped=new LazyWrapper(this)),(wrapped=wrapped.reverse()).__actions__.push({func:thru,args:[reverse],thisArg:void 0}),new LodashWrapper(wrapped,this.__chain__)}return this.thru(reverse)},lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=function(){return baseWrapperValue(this.__wrapped__,this.__actions__)},lodash.prototype.first=lodash.prototype.head,symIterator&&(lodash.prototype[symIterator]=function(){return this}),lodash}();"object"==_typeof(__webpack_require__("./node_modules/webpack/buildin/amd-options.js"))&&__webpack_require__("./node_modules/webpack/buildin/amd-options.js")?(root._=_,void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return _}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)):freeModule?((freeModule.exports=_)._=_,freeExports._=_):root._=_}).call(this)}).call(this,__webpack_require__("./node_modules/webpack/buildin/global.js"),__webpack_require__("./node_modules/webpack/buildin/module.js")(module))},"./node_modules/process/browser.js":function(module,exports){var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(fun){if(cachedSetTimeout===setTimeout)return setTimeout(fun,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(fun,0);try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var timeout=runTimeout(cleanUpNextTick);draining=!0;for(var len=queue.length;len;){for(currentQueue=queue,queue=[];++queueIndex<len;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,len=queue.length}currentQueue=null,draining=!1,function(marker){if(cachedClearTimeout===clearTimeout)return clearTimeout(marker);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(marker);try{cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}(timeout)}}function Item(fun,array){this.fun=fun,this.array=array}function noop(){}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)args[i-1]=arguments[i];queue.push(new Item(fun,args)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(name){return[]},process.binding=function(name){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(dir){throw new Error("process.chdir is not supported")},process.umask=function(){return 0}},"./node_modules/rot-js/lib/MinHeap.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();return normalCompletion=step.done,step},e:function(_e2){didErr=!0,err=_e2},f:function(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"MinHeap",(function(){return MinHeap}));var MinHeap=function(){function MinHeap(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,MinHeap),this.heap=[],this.timestamp=0}var Constructor,protoProps,staticProps;return Constructor=MinHeap,(protoProps=[{key:"lessThan",value:function(a,b){return a.key==b.key?a.timestamp<b.timestamp:a.key<b.key}},{key:"shift",value:function(v){this.heap=this.heap.map((function(_ref){var key=_ref.key,value=_ref.value,timestamp=_ref.timestamp;return{key:key+v,value:value,timestamp:timestamp}}))}},{key:"len",value:function(){return this.heap.length}},{key:"push",value:function(value,key){this.timestamp+=1;var loc=this.len();this.heap.push({value:value,timestamp:this.timestamp,key:key}),this.updateUp(loc)}},{key:"pop",value:function(){if(0==this.len())throw new Error("no element to pop");var top=this.heap[0];return this.len()>1?(this.heap[0]=this.heap.pop(),this.updateDown(0)):this.heap.pop(),top}},{key:"find",value:function(v){for(var i=0;i<this.len();i++)if(v==this.heap[i].value)return this.heap[i];return null}},{key:"remove",value:function(v){for(var index=null,i=0;i<this.len();i++)v==this.heap[i].value&&(index=i);if(null===index)return!1;if(this.len()>1){var last=this.heap.pop();return last.value!=v&&(this.heap[index]=last,this.updateDown(index)),!0}return this.heap.pop(),!0}},{key:"parentNode",value:function(x){return Math.floor((x-1)/2)}},{key:"leftChildNode",value:function(x){return 2*x+1}},{key:"rightChildNode",value:function(x){return 2*x+2}},{key:"existNode",value:function(x){return x>=0&&x<this.heap.length}},{key:"swap",value:function(x,y){var t=this.heap[x];this.heap[x]=this.heap[y],this.heap[y]=t}},{key:"minNode",value:function(numbers){var _step,validnumbers=numbers.filter(this.existNode.bind(this)),minimal=validnumbers[0],_iterator=_createForOfIteratorHelper(validnumbers);try{for(_iterator.s();!(_step=_iterator.n()).done;){var i=_step.value;this.lessThan(this.heap[i],this.heap[minimal])&&(minimal=i)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return minimal}},{key:"updateUp",value:function(x){if(0!=x){var parent=this.parentNode(x);this.existNode(parent)&&this.lessThan(this.heap[x],this.heap[parent])&&(this.swap(x,parent),this.updateUp(parent))}}},{key:"updateDown",value:function(x){var leftChild=this.leftChildNode(x),rightChild=this.rightChildNode(x);if(this.existNode(leftChild)){var m=this.minNode([x,leftChild,rightChild]);m!=x&&(this.swap(x,m),this.updateDown(m))}}},{key:"debugPrint",value:function(){console.log(this.heap)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),MinHeap}()},"./node_modules/rot-js/lib/color.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"fromString",(function(){return fromString})),__webpack_require__.d(__webpack_exports__,"add",(function(){return add})),__webpack_require__.d(__webpack_exports__,"add_",(function(){return add_})),__webpack_require__.d(__webpack_exports__,"multiply",(function(){return multiply})),__webpack_require__.d(__webpack_exports__,"multiply_",(function(){return multiply_})),__webpack_require__.d(__webpack_exports__,"interpolate",(function(){return interpolate})),__webpack_require__.d(__webpack_exports__,"lerp",(function(){return lerp})),__webpack_require__.d(__webpack_exports__,"interpolateHSL",(function(){return interpolateHSL})),__webpack_require__.d(__webpack_exports__,"lerpHSL",(function(){return lerpHSL})),__webpack_require__.d(__webpack_exports__,"randomize",(function(){return randomize})),__webpack_require__.d(__webpack_exports__,"rgb2hsl",(function(){return rgb2hsl})),__webpack_require__.d(__webpack_exports__,"hsl2rgb",(function(){return hsl2rgb})),__webpack_require__.d(__webpack_exports__,"toRGB",(function(){return toRGB})),__webpack_require__.d(__webpack_exports__,"toHex",(function(){return toHex}));var _util_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/util.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function fromString(str){var cached,r;if(str in CACHE)cached=CACHE[str];else{if("#"==str.charAt(0)){var values=(str.match(/[0-9a-f]/gi)||[]).map((function(x){return parseInt(x,16)}));if(3==values.length)cached=values.map((function(x){return 17*x}));else{for(var i=0;i<3;i++)values[i+1]+=16*values[i],values.splice(i,1);cached=values}}else cached=(r=str.match(/rgb\(([0-9, ]+)\)/i))?r[1].split(/\s*,\s*/).map((function(x){return parseInt(x)})):[0,0,0];CACHE[str]=cached}return cached.slice()}function add(color1){for(var result=color1.slice(),_len=arguments.length,colors=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)colors[_key-1]=arguments[_key];for(var i=0;i<3;i++)for(var j=0;j<colors.length;j++)result[i]+=colors[j][i];return result}function add_(color1){for(var _len2=arguments.length,colors=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)colors[_key2-1]=arguments[_key2];for(var i=0;i<3;i++)for(var j=0;j<colors.length;j++)color1[i]+=colors[j][i];return color1}function multiply(color1){for(var result=color1.slice(),_len3=arguments.length,colors=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++)colors[_key3-1]=arguments[_key3];for(var i=0;i<3;i++){for(var j=0;j<colors.length;j++)result[i]*=colors[j][i]/255;result[i]=Math.round(result[i])}return result}function multiply_(color1){for(var _len4=arguments.length,colors=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++)colors[_key4-1]=arguments[_key4];for(var i=0;i<3;i++){for(var j=0;j<colors.length;j++)color1[i]*=colors[j][i]/255;color1[i]=Math.round(color1[i])}return color1}function interpolate(color1,color2){for(var factor=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,result=color1.slice(),i=0;i<3;i++)result[i]=Math.round(result[i]+factor*(color2[i]-color1[i]));return result}var lerp=interpolate;function interpolateHSL(color1,color2){for(var factor=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,hsl1=rgb2hsl(color1),hsl2=rgb2hsl(color2),i=0;i<3;i++)hsl1[i]+=factor*(hsl2[i]-hsl1[i]);return hsl2rgb(hsl1)}var lerpHSL=interpolateHSL;function randomize(color,diff){diff instanceof Array||(diff=Math.round(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getNormal(0,diff)));for(var result=color.slice(),i=0;i<3;i++)result[i]+=diff instanceof Array?Math.round(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getNormal(0,diff[i])):diff;return result}function rgb2hsl(color){var s,r=color[0]/255,g=color[1]/255,b=color[2]/255,max=Math.max(r,g,b),min=Math.min(r,g,b),h=0,l=(max+min)/2;if(max==min)s=0;else{var d=max-min;switch(s=l>.5?d/(2-max-min):d/(max+min),max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4}h/=6}return[h,s,l]}function hue2rgb(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+(q-p)*(2/3-t)*6:p}function hsl2rgb(color){var l=color[2];if(0==color[1])return[l=Math.round(255*l),l,l];var s=color[1],q=l<.5?l*(1+s):l+s-l*s,p=2*l-q,r=hue2rgb(p,q,color[0]+1/3),g=hue2rgb(p,q,color[0]),b=hue2rgb(p,q,color[0]-1/3);return[Math.round(255*r),Math.round(255*g),Math.round(255*b)]}function toRGB(color){var clamped=color.map((function(x){return Object(_util_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(x,0,255)}));return"rgb(".concat(clamped.join(","),")")}function toHex(color){var clamped=color.map((function(x){return Object(_util_js__WEBPACK_IMPORTED_MODULE_0__.clamp)(x,0,255).toString(16).padStart(2,"0")}));return"#".concat(clamped.join(""))}var CACHE={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},"./node_modules/rot-js/lib/constants.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DEFAULT_WIDTH",(function(){return DEFAULT_WIDTH})),__webpack_require__.d(__webpack_exports__,"DEFAULT_HEIGHT",(function(){return DEFAULT_HEIGHT})),__webpack_require__.d(__webpack_exports__,"DIRS",(function(){return DIRS})),__webpack_require__.d(__webpack_exports__,"KEYS",(function(){return KEYS}));var DEFAULT_WIDTH=80,DEFAULT_HEIGHT=25,DIRS={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},KEYS={VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95}},"./node_modules/rot-js/lib/display/backend.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Backend}));var Backend=function(){function Backend(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Backend)}var Constructor,protoProps,staticProps;return Constructor=Backend,(protoProps=[{key:"getContainer",value:function(){return null}},{key:"setOptions",value:function(options){this._options=options}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Backend}()},"./node_modules/rot-js/lib/display/canvas.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Canvas}));var Canvas=function(_Backend){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Canvas,_Backend);var Constructor,protoProps,staticProps,_super=_createSuper(Canvas);function Canvas(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Canvas),(_this=_super.call(this))._ctx=document.createElement("canvas").getContext("2d"),_this}return Constructor=Canvas,(protoProps=[{key:"schedule",value:function(cb){requestAnimationFrame(cb)}},{key:"getContainer",value:function(){return this._ctx.canvas}},{key:"setOptions",value:function(opts){_get(_getPrototypeOf(Canvas.prototype),"setOptions",this).call(this,opts);var style=opts.fontStyle?"".concat(opts.fontStyle," "):"",font="".concat(style," ").concat(opts.fontSize,"px ").concat(opts.fontFamily);this._ctx.font=font,this._updateSize(),this._ctx.font=font,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}},{key:"clear",value:function(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}},{key:"eventToPosition",value:function(x,y){var canvas=this._ctx.canvas,rect=canvas.getBoundingClientRect();return x-=rect.left,y-=rect.top,x*=canvas.width/rect.width,y*=canvas.height/rect.height,x<0||y<0||x>=canvas.width||y>=canvas.height?[-1,-1]:this._normalizedEventToPosition(x,y)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Canvas}(__webpack_require__("./node_modules/rot-js/lib/display/backend.js").default)},"./node_modules/rot-js/lib/display/display.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _hex_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/display/hex.js"),_rect_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/display/rect.js"),_tile_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/display/tile.js"),_tile_gl_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/display/tile-gl.js"),_term_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rot-js/lib/display/term.js"),_text_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rot-js/lib/text.js"),_constants_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var BACKENDS={hex:_hex_js__WEBPACK_IMPORTED_MODULE_0__.default,rect:_rect_js__WEBPACK_IMPORTED_MODULE_1__.default,tile:_tile_js__WEBPACK_IMPORTED_MODULE_2__.default,"tile-gl":_tile_gl_js__WEBPACK_IMPORTED_MODULE_3__.default,term:_term_js__WEBPACK_IMPORTED_MODULE_4__.default},DEFAULT_OPTIONS={width:_constants_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_WIDTH,height:_constants_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_HEIGHT,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1},Display=function(){var Display=function(){function Display(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,Display),this._data={},this._dirty=!1,this._options={},options=Object.assign({},DEFAULT_OPTIONS,options),this.setOptions(options),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}var Constructor,protoProps,staticProps;return Constructor=Display,(protoProps=[{key:"DEBUG",value:function(x,y,what){var colors=[this._options.bg,this._options.fg];this.draw(x,y,null,null,colors[what%colors.length])}},{key:"clear",value:function(){this._data={},this._dirty=!0}},{key:"setOptions",value:function(options){if(Object.assign(this._options,options),options.width||options.height||options.fontSize||options.fontFamily||options.spacing||options.layout){if(options.layout){var ctor=BACKENDS[options.layout];this._backend=new ctor}this._backend.setOptions(this._options),this._dirty=!0}return this}},{key:"getOptions",value:function(){return this._options}},{key:"getContainer",value:function(){return this._backend.getContainer()}},{key:"computeSize",value:function(availWidth,availHeight){return this._backend.computeSize(availWidth,availHeight)}},{key:"computeFontSize",value:function(availWidth,availHeight){return this._backend.computeFontSize(availWidth,availHeight)}},{key:"computeTileSize",value:function(availWidth,availHeight){return[Math.floor(availWidth/this._options.width),Math.floor(availHeight/this._options.height)]}},{key:"eventToPosition",value:function(e){var x,y;return"touches"in e?(x=e.touches[0].clientX,y=e.touches[0].clientY):(x=e.clientX,y=e.clientY),this._backend.eventToPosition(x,y)}},{key:"draw",value:function(x,y,ch,fg,bg){fg||(fg=this._options.fg),bg||(bg=this._options.bg);var key="".concat(x,",").concat(y);this._data[key]=[x,y,ch,fg,bg],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[key]=!0)}},{key:"drawText",value:function(x,y,text,maxWidth){var fg=null,bg=null,cx=x,cy=y,lines=1;maxWidth||(maxWidth=this._options.width-x);for(var tokens=_text_js__WEBPACK_IMPORTED_MODULE_5__.tokenize(text,maxWidth);tokens.length;){var token=tokens.shift();switch(token.type){case _text_js__WEBPACK_IMPORTED_MODULE_5__.TYPE_TEXT:for(var isSpace=!1,isPrevSpace=!1,isFullWidth=!1,isPrevFullWidth=!1,i=0;i<token.value.length;i++){var cc=token.value.charCodeAt(i),c=token.value.charAt(i);if("term"===this._options.layout){var cch=cc>>8;if(17===cch||cch>=46&&cch<=159||cch>=172&&cch<=215||cc>=43360&&cc<=43391){this.draw(cx+0,cy,c,fg,bg),this.draw(cx+1,cy,"\t",fg,bg),cx+=2;continue}}isFullWidth=cc>65280&&cc<65377||cc>65500&&cc<65512||cc>65518,isSpace=32==c.charCodeAt(0)||12288==c.charCodeAt(0),!isPrevFullWidth||isFullWidth||isSpace||cx++,isFullWidth&&!isPrevSpace&&cx++,this.draw(cx++,cy,c,fg,bg),isPrevSpace=isSpace,isPrevFullWidth=isFullWidth}break;case _text_js__WEBPACK_IMPORTED_MODULE_5__.TYPE_FG:fg=token.value||null;break;case _text_js__WEBPACK_IMPORTED_MODULE_5__.TYPE_BG:bg=token.value||null;break;case _text_js__WEBPACK_IMPORTED_MODULE_5__.TYPE_NEWLINE:cx=x,cy++,lines++}}return lines}},{key:"_tick",value:function(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty)for(var id in this._backend.clear(),this._data)this._draw(id,!1);else for(var key in this._dirty)this._draw(key,!0);this._dirty=!1}}},{key:"_draw",value:function(key,clearBefore){var data=this._data[key];data[4]!=this._options.bg&&(clearBefore=!0),this._backend.draw(data,clearBefore)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Display}();return Display.Rect=_rect_js__WEBPACK_IMPORTED_MODULE_1__.default,Display.Hex=_hex_js__WEBPACK_IMPORTED_MODULE_0__.default,Display.Tile=_tile_js__WEBPACK_IMPORTED_MODULE_2__.default,Display.TileGL=_tile_gl_js__WEBPACK_IMPORTED_MODULE_3__.default,Display.Term=_term_js__WEBPACK_IMPORTED_MODULE_4__.default,Display}();__webpack_exports__.default=Display},"./node_modules/rot-js/lib/display/hex.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Hex}));var _canvas_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/display/canvas.js"),_util_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/util.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Hex=function(_Canvas){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Hex,_Canvas);var Constructor,protoProps,staticProps,_super=_createSuper(Hex);function Hex(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Hex),(_this=_super.call(this))._spacingX=0,_this._spacingY=0,_this._hexSize=0,_this}return Constructor=Hex,(protoProps=[{key:"draw",value:function(data,clearBefore){var _data=_slicedToArray(data,5),x=_data[0],y=_data[1],ch=_data[2],fg=_data[3],bg=_data[4],px=[(x+1)*this._spacingX,y*this._spacingY+this._hexSize];if(this._options.transpose&&px.reverse(),clearBefore&&(this._ctx.fillStyle=bg,this._fill(px[0],px[1])),ch){this._ctx.fillStyle=fg;for(var chars=[].concat(ch),i=0;i<chars.length;i++)this._ctx.fillText(chars[i],px[0],Math.ceil(px[1]))}}},{key:"computeSize",value:function(availWidth,availHeight){return this._options.transpose&&(availWidth+=availHeight,availWidth-=availHeight=availWidth-availHeight),[Math.floor(availWidth/this._spacingX)-1,Math.floor((availHeight-2*this._hexSize)/this._spacingY+1)]}},{key:"computeFontSize",value:function(availWidth,availHeight){this._options.transpose&&(availWidth+=availHeight,availWidth-=availHeight=availWidth-availHeight);var hexSizeWidth=2*availWidth/((this._options.width+1)*Math.sqrt(3))-1,hexSizeHeight=availHeight/(2+1.5*(this._options.height-1)),hexSize=Math.min(hexSizeWidth,hexSizeHeight),oldFont=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var width=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=oldFont;var ratio=width/100,fontSize=2*(hexSize=Math.floor(hexSize)+1)/(this._options.spacing*(1+ratio/Math.sqrt(3)));return Math.ceil(fontSize)-1}},{key:"_normalizedEventToPosition",value:function(x,y){var nodeSize;this._options.transpose?(x+=y,x-=y=x-y,nodeSize=this._ctx.canvas.width):nodeSize=this._ctx.canvas.height;var size=nodeSize/this._options.height;return y=Math.floor(y/size),Object(_util_js__WEBPACK_IMPORTED_MODULE_1__.mod)(y,2)?(x-=this._spacingX,x=1+2*Math.floor(x/(2*this._spacingX))):x=2*Math.floor(x/(2*this._spacingX)),[x,y]}},{key:"_fill",value:function(cx,cy){var a=this._hexSize,b=this._options.border,ctx=this._ctx;ctx.beginPath(),this._options.transpose?(ctx.moveTo(cx-a+b,cy),ctx.lineTo(cx-a/2+b,cy+this._spacingX-b),ctx.lineTo(cx+a/2-b,cy+this._spacingX-b),ctx.lineTo(cx+a-b,cy),ctx.lineTo(cx+a/2-b,cy-this._spacingX+b),ctx.lineTo(cx-a/2+b,cy-this._spacingX+b),ctx.lineTo(cx-a+b,cy)):(ctx.moveTo(cx,cy-a+b),ctx.lineTo(cx+this._spacingX-b,cy-a/2+b),ctx.lineTo(cx+this._spacingX-b,cy+a/2-b),ctx.lineTo(cx,cy+a-b),ctx.lineTo(cx-this._spacingX+b,cy+a/2-b),ctx.lineTo(cx-this._spacingX+b,cy-a/2+b),ctx.lineTo(cx,cy-a+b)),ctx.fill()}},{key:"_updateSize",value:function(){var xprop,yprop,opts=this._options,charWidth=Math.ceil(this._ctx.measureText("W").width);this._hexSize=Math.floor(opts.spacing*(opts.fontSize+charWidth/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,opts.transpose?(xprop="height",yprop="width"):(xprop="width",yprop="height"),this._ctx.canvas[xprop]=Math.ceil((opts.width+1)*this._spacingX),this._ctx.canvas[yprop]=Math.ceil((opts.height-1)*this._spacingY+2*this._hexSize)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Hex}(_canvas_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/display/rect.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _canvas_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/display/canvas.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Rect=function(){var Rect=function(_Canvas){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Rect,_Canvas);var Constructor,protoProps,staticProps,_super=_createSuper(Rect);function Rect(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Rect),(_this=_super.call(this))._spacingX=0,_this._spacingY=0,_this._canvasCache={},_this}return Constructor=Rect,(protoProps=[{key:"setOptions",value:function(options){_get(_getPrototypeOf(Rect.prototype),"setOptions",this).call(this,options),this._canvasCache={}}},{key:"draw",value:function(data,clearBefore){Rect.cache?this._drawWithCache(data):this._drawNoCache(data,clearBefore)}},{key:"_drawWithCache",value:function(data){var canvas,_data=_slicedToArray(data,5),x=_data[0],y=_data[1],ch=_data[2],fg=_data[3],bg=_data[4],hash=""+ch+fg+bg;if(hash in this._canvasCache)canvas=this._canvasCache[hash];else{var b=this._options.border,ctx=(canvas=document.createElement("canvas")).getContext("2d");if(canvas.width=this._spacingX,canvas.height=this._spacingY,ctx.fillStyle=bg,ctx.fillRect(b,b,canvas.width-b,canvas.height-b),ch){ctx.fillStyle=fg,ctx.font=this._ctx.font,ctx.textAlign="center",ctx.textBaseline="middle";for(var chars=[].concat(ch),i=0;i<chars.length;i++)ctx.fillText(chars[i],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[hash]=canvas}this._ctx.drawImage(canvas,x*this._spacingX,y*this._spacingY)}},{key:"_drawNoCache",value:function(data,clearBefore){var _data2=_slicedToArray(data,5),x=_data2[0],y=_data2[1],ch=_data2[2],fg=_data2[3],bg=_data2[4];if(clearBefore){var b=this._options.border;this._ctx.fillStyle=bg,this._ctx.fillRect(x*this._spacingX+b,y*this._spacingY+b,this._spacingX-b,this._spacingY-b)}if(ch){this._ctx.fillStyle=fg;for(var chars=[].concat(ch),i=0;i<chars.length;i++)this._ctx.fillText(chars[i],(x+.5)*this._spacingX,Math.ceil((y+.5)*this._spacingY))}}},{key:"computeSize",value:function(availWidth,availHeight){return[Math.floor(availWidth/this._spacingX),Math.floor(availHeight/this._spacingY)]}},{key:"computeFontSize",value:function(availWidth,availHeight){var boxWidth=Math.floor(availWidth/this._options.width),boxHeight=Math.floor(availHeight/this._options.height),oldFont=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var width=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=oldFont;var widthFraction=width/100*boxHeight/boxWidth;return widthFraction>1&&(boxHeight=Math.floor(boxHeight/widthFraction)),Math.floor(boxHeight/this._options.spacing)}},{key:"_normalizedEventToPosition",value:function(x,y){return[Math.floor(x/this._spacingX),Math.floor(y/this._spacingY)]}},{key:"_updateSize",value:function(){var opts=this._options,charWidth=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(opts.spacing*charWidth),this._spacingY=Math.ceil(opts.spacing*opts.fontSize),opts.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=opts.width*this._spacingX,this._ctx.canvas.height=opts.height*this._spacingY}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Rect}(_canvas_js__WEBPACK_IMPORTED_MODULE_0__.default);return Rect.cache=!1,Rect}();__webpack_exports__.default=Rect},"./node_modules/rot-js/lib/display/term.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(process){__webpack_require__.d(__webpack_exports__,"default",(function(){return Term}));var _backend_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/display/backend.js"),_color_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/color.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function termcolor(color){var rgb=_color_js__WEBPACK_IMPORTED_MODULE_1__.fromString(color);return 36*Math.floor(rgb[0]*(6/256))+6*Math.floor(rgb[1]*(6/256))+1*Math.floor(rgb[2]*(6/256))+16}var Term=function(_Backend){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Term,_Backend);var Constructor,protoProps,staticProps,_super=_createSuper(Term);function Term(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Term),(_this=_super.call(this))._offset=[0,0],_this._cursor=[-1,-1],_this._lastColor="",_this}return Constructor=Term,(protoProps=[{key:"schedule",value:function(cb){setTimeout(cb,1e3/60)}},{key:"setOptions",value:function(options){_get(_getPrototypeOf(Term.prototype),"setOptions",this).call(this,options);var size=[options.width,options.height],avail=this.computeSize();this._offset=avail.map((function(val,index){return Math.floor((val-size[index])/2)}))}},{key:"clear",value:function(){var bg;process.stdout.write((bg=this._options.bg,"[0;48;5;".concat(termcolor(bg),"m[2J")))}},{key:"draw",value:function(data,clearBefore){var _data=_slicedToArray(data,5),x=_data[0],y=_data[1],ch=_data[2],fg=_data[3],bg=_data[4],dx=this._offset[0]+x,dy=this._offset[1]+y,size=this.computeSize();if(!(dx<0||dx>=size[0])&&!(dy<0||dy>=size[1])&&(dx===this._cursor[0]&&dy===this._cursor[1]||(process.stdout.write(function(x,y){return"[".concat(y+1,";").concat(x+1,"H")}(dx,dy)),this._cursor[0]=dx,this._cursor[1]=dy),clearBefore&&(ch||(ch=" ")),ch)){var newColor=function(fg,bg){return"[0;38;5;".concat(termcolor(fg),";48;5;").concat(termcolor(bg),"m")}(fg,bg);if(newColor!==this._lastColor&&(process.stdout.write(newColor),this._lastColor=newColor),"\t"!=ch){var chars=[].concat(ch);process.stdout.write(chars[0])}this._cursor[0]++,this._cursor[0]>=size[0]&&(this._cursor[0]=0,this._cursor[1]++)}}},{key:"computeFontSize",value:function(){throw new Error("Terminal backend has no notion of font size")}},{key:"eventToPosition",value:function(x,y){return[x,y]}},{key:"computeSize",value:function(){return[process.stdout.columns,process.stdout.rows]}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Term}(_backend_js__WEBPACK_IMPORTED_MODULE_0__.default)}.call(this,__webpack_require__("./node_modules/process/browser.js"))},"./node_modules/rot-js/lib/display/tile-gl.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return TileGL}));var _backend_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/display/backend.js"),_color_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/color.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _toConsumableArray(arr){return function(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var TileGL=function(_Backend){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(TileGL,_Backend);var Constructor,protoProps,staticProps,_super=_createSuper(TileGL);function TileGL(){var _this;!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,TileGL),(_this=_super.call(this))._uniforms={};try{_this._gl=_this._initWebGL()}catch(e){alert(e.message)}return _this}return Constructor=TileGL,staticProps=[{key:"isSupported",value:function(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}}],(protoProps=[{key:"schedule",value:function(cb){requestAnimationFrame(cb)}},{key:"getContainer",value:function(){return this._gl.canvas}},{key:"setOptions",value:function(opts){var _this2=this;_get(_getPrototypeOf(TileGL.prototype),"setOptions",this).call(this,opts),this._updateSize();var tileSet=this._options.tileSet;tileSet&&"complete"in tileSet&&!tileSet.complete?tileSet.addEventListener("load",(function(){return _this2._updateTexture(tileSet)})):this._updateTexture(tileSet)}},{key:"draw",value:function(data,clearBefore){var gl=this._gl,opts=this._options,_data=_slicedToArray(data,5),x=_data[0],y=_data[1],ch=_data[2],fg=_data[3],bg=_data[4],scissorY=gl.canvas.height-(y+1)*opts.tileHeight;if(gl.scissor(x*opts.tileWidth,scissorY,opts.tileWidth,opts.tileHeight),clearBefore&&(opts.tileColorize?gl.clearColor(0,0,0,0):gl.clearColor.apply(gl,_toConsumableArray(parseColor(bg))),gl.clear(gl.COLOR_BUFFER_BIT)),ch){var chars=[].concat(ch),bgs=[].concat(bg),fgs=[].concat(fg);gl.uniform2fv(this._uniforms.targetPosRel,[x,y]);for(var i=0;i<chars.length;i++){var tile=this._options.tileMap[chars[i]];if(!tile)throw new Error('Char "'.concat(chars[i],'" not found in tileMap'));gl.uniform1f(this._uniforms.colorize,opts.tileColorize?1:0),gl.uniform2fv(this._uniforms.tilesetPosAbs,tile),opts.tileColorize&&(gl.uniform4fv(this._uniforms.tint,parseColor(fgs[i])),gl.uniform4fv(this._uniforms.bg,parseColor(bgs[i]))),gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}}}},{key:"clear",value:function(){var gl=this._gl;gl.clearColor.apply(gl,_toConsumableArray(parseColor(this._options.bg))),gl.scissor(0,0,gl.canvas.width,gl.canvas.height),gl.clear(gl.COLOR_BUFFER_BIT)}},{key:"computeSize",value:function(availWidth,availHeight){return[Math.floor(availWidth/this._options.tileWidth),Math.floor(availHeight/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"eventToPosition",value:function(x,y){var canvas=this._gl.canvas,rect=canvas.getBoundingClientRect();return x-=rect.left,y-=rect.top,x*=canvas.width/rect.width,y*=canvas.height/rect.height,x<0||y<0||x>=canvas.width||y>=canvas.height?[-1,-1]:this._normalizedEventToPosition(x,y)}},{key:"_initWebGL",value:function(){var _this3=this,gl=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=gl;var program=function(gl,vss,fss){var vs=gl.createShader(gl.VERTEX_SHADER);if(gl.shaderSource(vs,vss),gl.compileShader(vs),!gl.getShaderParameter(vs,gl.COMPILE_STATUS))throw new Error(gl.getShaderInfoLog(vs)||"");var fs=gl.createShader(gl.FRAGMENT_SHADER);if(gl.shaderSource(fs,fss),gl.compileShader(fs),!gl.getShaderParameter(fs,gl.COMPILE_STATUS))throw new Error(gl.getShaderInfoLog(fs)||"");var p=gl.createProgram();if(gl.attachShader(p,vs),gl.attachShader(p,fs),gl.linkProgram(p),!gl.getProgramParameter(p,gl.LINK_STATUS))throw new Error(gl.getProgramInfoLog(p)||"");return p}(gl,VS,FS);return gl.useProgram(program),function(gl){var pos=new Float32Array([0,0,1,0,0,1,1,1]),buf=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buf),gl.bufferData(gl.ARRAY_BUFFER,pos,gl.STATIC_DRAW),gl.enableVertexAttribArray(0),gl.vertexAttribPointer(0,2,gl.FLOAT,!1,0,0)}(gl),UNIFORMS.forEach((function(name){return _this3._uniforms[name]=gl.getUniformLocation(program,name)})),this._program=program,gl.enable(gl.BLEND),gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.SCISSOR_TEST),gl}},{key:"_normalizedEventToPosition",value:function(x,y){return[Math.floor(x/this._options.tileWidth),Math.floor(y/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var gl=this._gl,opts=this._options,canvasSize=[opts.width*opts.tileWidth,opts.height*opts.tileHeight];gl.canvas.width=canvasSize[0],gl.canvas.height=canvasSize[1],gl.viewport(0,0,canvasSize[0],canvasSize[1]),gl.uniform2fv(this._uniforms.tileSize,[opts.tileWidth,opts.tileHeight]),gl.uniform2fv(this._uniforms.targetSize,canvasSize)}},{key:"_updateTexture",value:function(tileSet){var gl,data,t;gl=this._gl,data=tileSet,t=gl.createTexture(),gl.bindTexture(gl.TEXTURE_2D,t),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,0),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,data)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),TileGL}(_backend_js__WEBPACK_IMPORTED_MODULE_0__.default),UNIFORMS=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],VS="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),FS="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();var colorCache={};function parseColor(color){if(!(color in colorCache)){var parsed;if("transparent"==color)parsed=[0,0,0,0];else if(color.indexOf("rgba")>-1){parsed=(color.match(/[\d.]+/g)||[]).map(Number);for(var i=0;i<3;i++)parsed[i]=parsed[i]/255}else(parsed=_color_js__WEBPACK_IMPORTED_MODULE_1__.fromString(color).map((function($){return $/255}))).push(1);colorCache[color]=parsed}return colorCache[color]}},"./node_modules/rot-js/lib/display/tile.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Tile}));var Tile=function(_Canvas){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Tile,_Canvas);var Constructor,protoProps,staticProps,_super=_createSuper(Tile);function Tile(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Tile),(_this=_super.call(this))._colorCanvas=document.createElement("canvas"),_this}return Constructor=Tile,(protoProps=[{key:"draw",value:function(data,clearBefore){var _data=_slicedToArray(data,5),x=_data[0],y=_data[1],ch=_data[2],fg=_data[3],bg=_data[4],tileWidth=this._options.tileWidth,tileHeight=this._options.tileHeight;if(clearBefore&&(this._options.tileColorize?this._ctx.clearRect(x*tileWidth,y*tileHeight,tileWidth,tileHeight):(this._ctx.fillStyle=bg,this._ctx.fillRect(x*tileWidth,y*tileHeight,tileWidth,tileHeight))),ch)for(var chars=[].concat(ch),fgs=[].concat(fg),bgs=[].concat(bg),i=0;i<chars.length;i++){var tile=this._options.tileMap[chars[i]];if(!tile)throw new Error('Char "'.concat(chars[i],'" not found in tileMap'));if(this._options.tileColorize){var canvas=this._colorCanvas,context=canvas.getContext("2d");context.globalCompositeOperation="source-over",context.clearRect(0,0,tileWidth,tileHeight);var _fg=fgs[i],_bg=bgs[i];context.drawImage(this._options.tileSet,tile[0],tile[1],tileWidth,tileHeight,0,0,tileWidth,tileHeight),"transparent"!=_fg&&(context.fillStyle=_fg,context.globalCompositeOperation="source-atop",context.fillRect(0,0,tileWidth,tileHeight)),"transparent"!=_bg&&(context.fillStyle=_bg,context.globalCompositeOperation="destination-over",context.fillRect(0,0,tileWidth,tileHeight)),this._ctx.drawImage(canvas,x*tileWidth,y*tileHeight,tileWidth,tileHeight)}else this._ctx.drawImage(this._options.tileSet,tile[0],tile[1],tileWidth,tileHeight,x*tileWidth,y*tileHeight,tileWidth,tileHeight)}}},{key:"computeSize",value:function(availWidth,availHeight){return[Math.floor(availWidth/this._options.tileWidth),Math.floor(availHeight/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"_normalizedEventToPosition",value:function(x,y){return[Math.floor(x/this._options.tileWidth),Math.floor(y/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var opts=this._options;this._ctx.canvas.width=opts.width*opts.tileWidth,this._ctx.canvas.height=opts.height*opts.tileHeight,this._colorCanvas.width=opts.tileWidth,this._colorCanvas.height=opts.tileHeight}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Tile}(__webpack_require__("./node_modules/rot-js/lib/display/canvas.js").default)},"./node_modules/rot-js/lib/engine.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Engine}));var Engine=function(){function Engine(scheduler){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Engine),this._scheduler=scheduler,this._lock=1}var Constructor,protoProps,staticProps;return Constructor=Engine,(protoProps=[{key:"start",value:function(){return this.unlock()}},{key:"lock",value:function(){return this._lock++,this}},{key:"unlock",value:function(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){var actor=this._scheduler.next();if(!actor)return this.lock();var result=actor.act();result&&result.then&&(this.lock(),result.then(this.unlock.bind(this)))}return this}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Engine}()},"./node_modules/rot-js/lib/eventqueue.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return EventQueue}));var _MinHeap__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/MinHeap.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var EventQueue=function(){function EventQueue(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,EventQueue),this._time=0,this._events=new _MinHeap__WEBPACK_IMPORTED_MODULE_0__.MinHeap}var Constructor,protoProps,staticProps;return Constructor=EventQueue,(protoProps=[{key:"getTime",value:function(){return this._time}},{key:"clear",value:function(){return this._events=new _MinHeap__WEBPACK_IMPORTED_MODULE_0__.MinHeap,this}},{key:"add",value:function(event,time){this._events.push(event,time)}},{key:"get",value:function(){if(!this._events.len())return null;var _this$_events$pop=this._events.pop(),time=_this$_events$pop.key,event=_this$_events$pop.value;return time>0&&(this._time+=time,this._events.shift(-time)),event}},{key:"getEventTime",value:function(event){var r=this._events.find(event);if(r)return r.key}},{key:"remove",value:function(event){return this._events.remove(event)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),EventQueue}()},"./node_modules/rot-js/lib/fov/discrete-shadowcasting.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return DiscreteShadowcasting}));var DiscreteShadowcasting=function(_FOV){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(DiscreteShadowcasting,_FOV);var Constructor,protoProps,staticProps,_super=_createSuper(DiscreteShadowcasting);function DiscreteShadowcasting(){return _classCallCheck(this,DiscreteShadowcasting),_super.apply(this,arguments)}return Constructor=DiscreteShadowcasting,(protoProps=[{key:"compute",value:function(x,y,R,callback){if(callback(x,y,0,1),this._lightPasses(x,y))for(var A,B,cx,cy,blocks,DATA=[],r=1;r<=R;r++)for(var neighbors=this._getCircle(x,y,r),angle=360/neighbors.length,i=0;i<neighbors.length;i++)if(cx=neighbors[i][0],cy=neighbors[i][1],B=(A=angle*(i-.5))+angle,blocks=!this._lightPasses(cx,cy),this._visibleCoords(Math.floor(A),Math.ceil(B),blocks,DATA)&&callback(cx,cy,r,1),2==DATA.length&&0==DATA[0]&&360==DATA[1])return}},{key:"_visibleCoords",value:function(A,B,blocks,DATA){if(A<0){var v1=this._visibleCoords(0,B,blocks,DATA),v2=this._visibleCoords(360+A,360,blocks,DATA);return v1||v2}for(var index=0;index<DATA.length&&DATA[index]<A;)index++;if(index==DATA.length)return blocks&&DATA.push(A,B),!0;var count=0;if(index%2){for(;index<DATA.length&&DATA[index]<B;)index++,count++;return 0!=count&&(blocks&&(count%2?DATA.splice(index-count,count,B):DATA.splice(index-count,count)),!0)}for(;index<DATA.length&&DATA[index]<B;)index++,count++;return(A!=DATA[index-count]||1!=count)&&(blocks&&(count%2?DATA.splice(index-count,count,A):DATA.splice(index-count,count,A,B)),!0)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),DiscreteShadowcasting}(__webpack_require__("./node_modules/rot-js/lib/fov/fov.js").default)},"./node_modules/rot-js/lib/fov/fov.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return FOV}));var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var FOV=function(){function FOV(lightPassesCallback){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,FOV),this._lightPasses=lightPassesCallback,this._options=Object.assign({topology:8},options)}var Constructor,protoProps,staticProps;return Constructor=FOV,(protoProps=[{key:"_getCircle",value:function(cx,cy,r){var dirs,countFactor,startOffset,result=[];switch(this._options.topology){case 4:countFactor=1,startOffset=[0,1],dirs=[_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[8][7],_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[8][1],_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[8][3],_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[8][5]];break;case 6:dirs=_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[6],countFactor=1,startOffset=[-1,1];break;case 8:dirs=_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[4],countFactor=2,startOffset=[-1,1];break;default:throw new Error("Incorrect topology for FOV computation")}for(var x=cx+startOffset[0]*r,y=cy+startOffset[1]*r,i=0;i<dirs.length;i++)for(var j=0;j<r*countFactor;j++)result.push([x,y]),x+=dirs[i][0],y+=dirs[i][1];return result}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),FOV}()},"./node_modules/rot-js/lib/fov/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _discrete_shadowcasting_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/fov/discrete-shadowcasting.js"),_precise_shadowcasting_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/fov/precise-shadowcasting.js"),_recursive_shadowcasting_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/fov/recursive-shadowcasting.js");__webpack_exports__.default={DiscreteShadowcasting:_discrete_shadowcasting_js__WEBPACK_IMPORTED_MODULE_0__.default,PreciseShadowcasting:_precise_shadowcasting_js__WEBPACK_IMPORTED_MODULE_1__.default,RecursiveShadowcasting:_recursive_shadowcasting_js__WEBPACK_IMPORTED_MODULE_2__.default}},"./node_modules/rot-js/lib/fov/precise-shadowcasting.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return PreciseShadowcasting}));var PreciseShadowcasting=function(_FOV){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(PreciseShadowcasting,_FOV);var Constructor,protoProps,staticProps,_super=_createSuper(PreciseShadowcasting);function PreciseShadowcasting(){return _classCallCheck(this,PreciseShadowcasting),_super.apply(this,arguments)}return Constructor=PreciseShadowcasting,(protoProps=[{key:"compute",value:function(x,y,R,callback){if(callback(x,y,0,1),this._lightPasses(x,y))for(var cx,cy,blocks,A1,A2,visibility,SHADOWS=[],r=1;r<=R;r++)for(var neighbors=this._getCircle(x,y,r),neighborCount=neighbors.length,i=0;i<neighborCount;i++)if(cx=neighbors[i][0],cy=neighbors[i][1],A1=[i?2*i-1:2*neighborCount-1,2*neighborCount],A2=[2*i+1,2*neighborCount],blocks=!this._lightPasses(cx,cy),(visibility=this._checkVisibility(A1,A2,blocks,SHADOWS))&&callback(cx,cy,r,visibility),2==SHADOWS.length&&0==SHADOWS[0][0]&&SHADOWS[1][0]==SHADOWS[1][1])return}},{key:"_checkVisibility",value:function(A1,A2,blocks,SHADOWS){if(A1[0]>A2[0])return(this._checkVisibility(A1,[A1[1],A1[1]],blocks,SHADOWS)+this._checkVisibility([0,1],A2,blocks,SHADOWS))/2;for(var index1=0,edge1=!1;index1<SHADOWS.length;){var old=SHADOWS[index1],diff=old[0]*A1[1]-A1[0]*old[1];if(diff>=0){0!=diff||index1%2||(edge1=!0);break}index1++}for(var index2=SHADOWS.length,edge2=!1;index2--;){var _old=SHADOWS[index2],_diff=A2[0]*_old[1]-_old[0]*A2[1];if(_diff>=0){0==_diff&&index2%2&&(edge2=!0);break}}var visibleLength,visible=!0;if((index1==index2&&(edge1||edge2)||edge1&&edge2&&index1+1==index2&&index2%2||index1>index2&&index1%2)&&(visible=!1),!visible)return 0;var remove=index2-index1+1;if(remove%2)if(index1%2){var P=SHADOWS[index1];visibleLength=(A2[0]*P[1]-P[0]*A2[1])/(P[1]*A2[1]),blocks&&SHADOWS.splice(index1,remove,A2)}else{var _P=SHADOWS[index2];visibleLength=(_P[0]*A1[1]-A1[0]*_P[1])/(A1[1]*_P[1]),blocks&&SHADOWS.splice(index1,remove,A1)}else{if(!(index1%2))return blocks&&SHADOWS.splice(index1,remove,A1,A2),1;var P1=SHADOWS[index1],P2=SHADOWS[index2];visibleLength=(P2[0]*P1[1]-P1[0]*P2[1])/(P1[1]*P2[1]),blocks&&SHADOWS.splice(index1,remove)}return visibleLength/((A2[0]*A1[1]-A1[0]*A2[1])/(A1[1]*A2[1]))}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),PreciseShadowcasting}(__webpack_require__("./node_modules/rot-js/lib/fov/fov.js").default)},"./node_modules/rot-js/lib/fov/recursive-shadowcasting.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return RecursiveShadowcasting}));var _fov_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/fov/fov.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var OCTANTS=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]],RecursiveShadowcasting=function(_FOV){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(RecursiveShadowcasting,_FOV);var Constructor,protoProps,staticProps,_super=_createSuper(RecursiveShadowcasting);function RecursiveShadowcasting(){return _classCallCheck(this,RecursiveShadowcasting),_super.apply(this,arguments)}return Constructor=RecursiveShadowcasting,(protoProps=[{key:"compute",value:function(x,y,R,callback){callback(x,y,0,1);for(var i=0;i<OCTANTS.length;i++)this._renderOctant(x,y,OCTANTS[i],R,callback)}},{key:"compute180",value:function(x,y,R,dir,callback){callback(x,y,0,1);var previousOctant=(dir-1+8)%8,nextPreviousOctant=(dir-2+8)%8,nextOctant=(dir+1+8)%8;this._renderOctant(x,y,OCTANTS[nextPreviousOctant],R,callback),this._renderOctant(x,y,OCTANTS[previousOctant],R,callback),this._renderOctant(x,y,OCTANTS[dir],R,callback),this._renderOctant(x,y,OCTANTS[nextOctant],R,callback)}},{key:"compute90",value:function(x,y,R,dir,callback){callback(x,y,0,1);var previousOctant=(dir-1+8)%8;this._renderOctant(x,y,OCTANTS[dir],R,callback),this._renderOctant(x,y,OCTANTS[previousOctant],R,callback)}},{key:"_renderOctant",value:function(x,y,octant,R,callback){this._castVisibility(x,y,1,1,0,R+1,octant[0],octant[1],octant[2],octant[3],callback)}},{key:"_castVisibility",value:function(startX,startY,row,visSlopeStart,visSlopeEnd,radius,xx,xy,yx,yy,callback){if(!(visSlopeStart<visSlopeEnd))for(var i=row;i<=radius;i++){for(var dx=-i-1,dy=-i,blocked=!1,newStart=0;dx<=0;){var mapX=startX+(dx+=1)*xx+dy*xy,mapY=startY+dx*yx+dy*yy,slopeStart=(dx-.5)/(dy+.5),slopeEnd=(dx+.5)/(dy-.5);if(!(slopeEnd>visSlopeStart)){if(slopeStart<visSlopeEnd)break;if(dx*dx+dy*dy<radius*radius&&callback(mapX,mapY,i,1),blocked){if(!this._lightPasses(mapX,mapY)){newStart=slopeEnd;continue}blocked=!1,visSlopeStart=newStart}else!this._lightPasses(mapX,mapY)&&i<radius&&(blocked=!0,this._castVisibility(startX,startY,i+1,visSlopeStart,slopeStart,radius,xx,xy,yx,yy,callback),newStart=slopeEnd)}}if(blocked)break}}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),RecursiveShadowcasting}(_fov_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Util",(function(){return Util})),__webpack_require__.d(__webpack_exports__,"Color",(function(){return Color})),__webpack_require__.d(__webpack_exports__,"Text",(function(){return Text}));var _rng_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/rng.js");__webpack_require__.d(__webpack_exports__,"RNG",(function(){return _rng_js__WEBPACK_IMPORTED_MODULE_0__.default}));var _display_display_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/display/display.js");__webpack_require__.d(__webpack_exports__,"Display",(function(){return _display_display_js__WEBPACK_IMPORTED_MODULE_1__.default}));var _stringgenerator_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/stringgenerator.js");__webpack_require__.d(__webpack_exports__,"StringGenerator",(function(){return _stringgenerator_js__WEBPACK_IMPORTED_MODULE_2__.default}));var _eventqueue_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/eventqueue.js");__webpack_require__.d(__webpack_exports__,"EventQueue",(function(){return _eventqueue_js__WEBPACK_IMPORTED_MODULE_3__.default}));var _scheduler_index_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rot-js/lib/scheduler/index.js");__webpack_require__.d(__webpack_exports__,"Scheduler",(function(){return _scheduler_index_js__WEBPACK_IMPORTED_MODULE_4__.default}));var _fov_index_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rot-js/lib/fov/index.js");__webpack_require__.d(__webpack_exports__,"FOV",(function(){return _fov_index_js__WEBPACK_IMPORTED_MODULE_5__.default}));var _map_index_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rot-js/lib/map/index.js");__webpack_require__.d(__webpack_exports__,"Map",(function(){return _map_index_js__WEBPACK_IMPORTED_MODULE_6__.default}));var _noise_index_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rot-js/lib/noise/index.js");__webpack_require__.d(__webpack_exports__,"Noise",(function(){return _noise_index_js__WEBPACK_IMPORTED_MODULE_7__.default}));var _path_index_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/rot-js/lib/path/index.js");__webpack_require__.d(__webpack_exports__,"Path",(function(){return _path_index_js__WEBPACK_IMPORTED_MODULE_8__.default}));var _engine_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/rot-js/lib/engine.js");__webpack_require__.d(__webpack_exports__,"Engine",(function(){return _engine_js__WEBPACK_IMPORTED_MODULE_9__.default}));var _lighting_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/rot-js/lib/lighting.js");__webpack_require__.d(__webpack_exports__,"Lighting",(function(){return _lighting_js__WEBPACK_IMPORTED_MODULE_10__.default}));var _constants_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/rot-js/lib/constants.js");__webpack_require__.d(__webpack_exports__,"DEFAULT_WIDTH",(function(){return _constants_js__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_WIDTH})),__webpack_require__.d(__webpack_exports__,"DEFAULT_HEIGHT",(function(){return _constants_js__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_HEIGHT})),__webpack_require__.d(__webpack_exports__,"DIRS",(function(){return _constants_js__WEBPACK_IMPORTED_MODULE_11__.DIRS})),__webpack_require__.d(__webpack_exports__,"KEYS",(function(){return _constants_js__WEBPACK_IMPORTED_MODULE_11__.KEYS}));var _util_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/rot-js/lib/util.js"),_color_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/rot-js/lib/color.js"),_text_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./node_modules/rot-js/lib/text.js"),Util=_util_js__WEBPACK_IMPORTED_MODULE_12__,Color=_color_js__WEBPACK_IMPORTED_MODULE_13__,Text=_text_js__WEBPACK_IMPORTED_MODULE_14__},"./node_modules/rot-js/lib/lighting.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Lighting}));var _color_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/color.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Lighting=function(){function Lighting(reflectivityCallback){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,Lighting),this._reflectivityCallback=reflectivityCallback,this._options={},options=Object.assign({passes:1,emissionThreshold:100,range:10},options),this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(options)}var Constructor,protoProps,staticProps;return Constructor=Lighting,(protoProps=[{key:"setOptions",value:function(options){return Object.assign(this._options,options),options&&options.range&&this.reset(),this}},{key:"setFOV",value:function(fov){return this._fov=fov,this._fovCache={},this}},{key:"setLight",value:function(x,y,color){var key=x+","+y;return color?this._lights[key]="string"==typeof color?_color_js__WEBPACK_IMPORTED_MODULE_0__.fromString(color):color:delete this._lights[key],this}},{key:"clearLights",value:function(){this._lights={}}},{key:"reset",value:function(){return this._reflectivityCache={},this._fovCache={},this}},{key:"compute",value:function(lightingCallback){var doneCells={},emittingCells={},litCells={};for(var key in this._lights){var light=this._lights[key];emittingCells[key]=[0,0,0],_color_js__WEBPACK_IMPORTED_MODULE_0__.add_(emittingCells[key],light)}for(var i=0;i<this._options.passes;i++)this._emitLight(emittingCells,litCells,doneCells),i+1!=this._options.passes&&(emittingCells=this._computeEmitters(litCells,doneCells));for(var litKey in litCells){var parts=litKey.split(",");lightingCallback(parseInt(parts[0]),parseInt(parts[1]),litCells[litKey])}return this}},{key:"_emitLight",value:function(emittingCells,litCells,doneCells){for(var key in emittingCells){var parts=key.split(","),x=parseInt(parts[0]),y=parseInt(parts[1]);this._emitLightFromCell(x,y,emittingCells[key],litCells),doneCells[key]=1}return this}},{key:"_computeEmitters",value:function(litCells,doneCells){var result={};for(var key in litCells)if(!(key in doneCells)){var color=litCells[key],reflectivity=void 0;if(key in this._reflectivityCache)reflectivity=this._reflectivityCache[key];else{var parts=key.split(","),x=parseInt(parts[0]),y=parseInt(parts[1]);reflectivity=this._reflectivityCallback(x,y),this._reflectivityCache[key]=reflectivity}if(0!=reflectivity){for(var emission=[0,0,0],intensity=0,i=0;i<3;i++){var part=Math.round(color[i]*reflectivity);emission[i]=part,intensity+=part}intensity>this._options.emissionThreshold&&(result[key]=emission)}}return result}},{key:"_emitLightFromCell",value:function(x,y,color,litCells){var fov,key=x+","+y;for(var fovKey in fov=key in this._fovCache?this._fovCache[key]:this._updateFOV(x,y)){var formFactor=fov[fovKey],result=void 0;fovKey in litCells?result=litCells[fovKey]:(result=[0,0,0],litCells[fovKey]=result);for(var i=0;i<3;i++)result[i]+=Math.round(color[i]*formFactor)}return this}},{key:"_updateFOV",value:function(x,y){var key1=x+","+y,cache={};this._fovCache[key1]=cache;var range=this._options.range;return this._fov.compute(x,y,range,function(x,y,r,vis){var formFactor=vis*(1-r/range);0!=formFactor&&(cache[x+","+y]=formFactor)}.bind(this)),cache}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Lighting}()},"./node_modules/rot-js/lib/map/arena.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Arena}));var Arena=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Arena,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(Arena);function Arena(){return _classCallCheck(this,Arena),_super.apply(this,arguments)}return Constructor=Arena,(protoProps=[{key:"create",value:function(callback){for(var w=this._width-1,h=this._height-1,i=0;i<=w;i++)for(var j=0;j<=h;j++)callback(i,j,i&&j&&i<w&&j<h?0:1);return this}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Arena}(__webpack_require__("./node_modules/rot-js/lib/map/map.js").default)},"./node_modules/rot-js/lib/map/cellular.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Cellular}));var _map_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/map.js"),_constants_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/constants.js"),_rng_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Cellular=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Cellular,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(Cellular);function Cellular(width,height){var _this,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classCallCheck(this,Cellular),(_this=_super.call(this,width,height))._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},_this.setOptions(options),_this._dirs=_constants_js__WEBPACK_IMPORTED_MODULE_1__.DIRS[_this._options.topology],_this._map=_this._fillMap(0),_this}return Constructor=Cellular,(protoProps=[{key:"randomize",value:function(probability){for(var i=0;i<this._width;i++)for(var j=0;j<this._height;j++)this._map[i][j]=_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getUniform()<probability?1:0;return this}},{key:"setOptions",value:function(options){Object.assign(this._options,options)}},{key:"set",value:function(x,y,value){this._map[x][y]=value}},{key:"create",value:function(callback){for(var newMap=this._fillMap(0),born=this._options.born,survive=this._options.survive,j=0;j<this._height;j++){var widthStep=1,widthStart=0;6==this._options.topology&&(widthStep=2,widthStart=j%2);for(var i=widthStart;i<this._width;i+=widthStep){var cur=this._map[i][j],ncount=this._getNeighbors(i,j);cur&&-1!=survive.indexOf(ncount)?newMap[i][j]=1:cur||-1==born.indexOf(ncount)||(newMap[i][j]=1)}}this._map=newMap,callback&&this._serviceCallback(callback)}},{key:"_serviceCallback",value:function(callback){for(var j=0;j<this._height;j++){var widthStep=1,widthStart=0;6==this._options.topology&&(widthStep=2,widthStart=j%2);for(var i=widthStart;i<this._width;i+=widthStep)callback(i,j,this._map[i][j])}}},{key:"_getNeighbors",value:function(cx,cy){for(var result=0,i=0;i<this._dirs.length;i++){var dir=this._dirs[i],x=cx+dir[0],y=cy+dir[1];x<0||x>=this._width||y<0||y>=this._height||(result+=1==this._map[x][y]?1:0)}return result}},{key:"connect",value:function(callback,value,connectionCallback){value||(value=0);var allFreeSpace=[],notConnected={},widthStep=1,widthStarts=[0,0];6==this._options.topology&&(widthStep=2,widthStarts=[0,1]);for(var y=0;y<this._height;y++)for(var x=widthStarts[y%2];x<this._width;x+=widthStep)if(this._freeSpace(x,y,value)){var p=[x,y];notConnected[this._pointKey(p)]=p,allFreeSpace.push([x,y])}var start=allFreeSpace[_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getUniformInt(0,allFreeSpace.length-1)],key=this._pointKey(start),connected={};for(connected[key]=start,delete notConnected[key],this._findConnected(connected,notConnected,[start],!1,value);Object.keys(notConnected).length>0;){var _p=this._getFromTo(connected,notConnected),from=_p[0],to=_p[1],local={};local[this._pointKey(from)]=from,this._findConnected(local,notConnected,[from],!0,value);var tunnelFn=6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected;for(var k in tunnelFn.call(this,to,from,connected,notConnected,value,connectionCallback),local){var pp=local[k];this._map[pp[0]][pp[1]]=value,connected[k]=pp,delete notConnected[k]}}callback&&this._serviceCallback(callback)}},{key:"_getFromTo",value:function(connected,notConnected){for(var from=[0,0],to=[0,0],connectedKeys=Object.keys(connected),notConnectedKeys=Object.keys(notConnected),i=0;i<5;i++){if(connectedKeys.length<notConnectedKeys.length){var keys=connectedKeys;to=connected[keys[_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getUniformInt(0,keys.length-1)]],from=this._getClosest(to,notConnected)}else{var _keys=notConnectedKeys;from=notConnected[_keys[_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getUniformInt(0,_keys.length-1)]],to=this._getClosest(from,connected)}if((from[0]-to[0])*(from[0]-to[0])+(from[1]-to[1])*(from[1]-to[1])<64)break}return[from,to]}},{key:"_getClosest",value:function(point,space){var minPoint=null,minDist=null;for(var k in space){var p=space[k],d=(p[0]-point[0])*(p[0]-point[0])+(p[1]-point[1])*(p[1]-point[1]);(null==minDist||d<minDist)&&(minDist=d,minPoint=p)}return minPoint}},{key:"_findConnected",value:function(connected,notConnected,stack,keepNotConnected,value){for(;stack.length>0;){var p=stack.splice(0,1)[0],tests=void 0;tests=6==this._options.topology?[[p[0]+2,p[1]],[p[0]+1,p[1]-1],[p[0]-1,p[1]-1],[p[0]-2,p[1]],[p[0]-1,p[1]+1],[p[0]+1,p[1]+1]]:[[p[0]+1,p[1]],[p[0]-1,p[1]],[p[0],p[1]+1],[p[0],p[1]-1]];for(var i=0;i<tests.length;i++){var key=this._pointKey(tests[i]);null==connected[key]&&this._freeSpace(tests[i][0],tests[i][1],value)&&(connected[key]=tests[i],keepNotConnected||delete notConnected[key],stack.push(tests[i]))}}}},{key:"_tunnelToConnected",value:function(to,from,connected,notConnected,value,connectionCallback){var a,b;from[0]<to[0]?(a=from,b=to):(a=to,b=from);for(var xx=a[0];xx<=b[0];xx++){this._map[xx][a[1]]=value;var p=[xx,a[1]],pkey=this._pointKey(p);connected[pkey]=p,delete notConnected[pkey]}connectionCallback&&a[0]<b[0]&&connectionCallback(a,[b[0],a[1]]);var x=b[0];from[1]<to[1]?(a=from,b=to):(a=to,b=from);for(var yy=a[1];yy<b[1];yy++){this._map[x][yy]=value;var _p2=[x,yy],_pkey=this._pointKey(_p2);connected[_pkey]=_p2,delete notConnected[_pkey]}connectionCallback&&a[1]<b[1]&&connectionCallback([b[0],a[1]],[b[0],b[1]])}},{key:"_tunnelToConnected6",value:function(to,from,connected,notConnected,value,connectionCallback){var a,b;from[0]<to[0]?(a=from,b=to):(a=to,b=from);for(var xx=a[0],yy=a[1];xx!=b[0]||yy!=b[1];){var stepWidth=2;yy<b[1]?(yy++,stepWidth=1):yy>b[1]&&(yy--,stepWidth=1),xx<b[0]?xx+=stepWidth:xx>b[0]||b[1]%2?xx-=stepWidth:xx+=stepWidth,this._map[xx][yy]=value;var p=[xx,yy],pkey=this._pointKey(p);connected[pkey]=p,delete notConnected[pkey]}connectionCallback&&connectionCallback(from,to)}},{key:"_freeSpace",value:function(x,y,value){return x>=0&&x<this._width&&y>=0&&y<this._height&&this._map[x][y]==value}},{key:"_pointKey",value:function(p){return p[0]+"."+p[1]}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Cellular}(_map_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/digger.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Digger}));var _dungeon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/dungeon.js"),_features_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/map/features.js"),_rng_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/rng.js"),_constants_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?_assertThisInitialized(self):call}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var FEATURES={room:_features_js__WEBPACK_IMPORTED_MODULE_1__.Room,corridor:_features_js__WEBPACK_IMPORTED_MODULE_1__.Corridor},Digger=function(_Dungeon){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Digger,_Dungeon);var Constructor,protoProps,staticProps,_super=_createSuper(Digger);function Digger(width,height){var _this,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classCallCheck(this,Digger),(_this=_super.call(this,width,height))._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},options),_this._features={room:4,corridor:4},_this._map=[],_this._featureAttempts=20,_this._walls={},_this._dug=0,_this._digCallback=_this._digCallback.bind(_assertThisInitialized(_this)),_this._canBeDugCallback=_this._canBeDugCallback.bind(_assertThisInitialized(_this)),_this._isWallCallback=_this._isWallCallback.bind(_assertThisInitialized(_this)),_this._priorityWallCallback=_this._priorityWallCallback.bind(_assertThisInitialized(_this)),_this}return Constructor=Digger,(protoProps=[{key:"create",value:function(callback){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;var area=(this._width-2)*(this._height-2);this._firstRoom();var priorityWalls,t1=Date.now();do{if(priorityWalls=0,Date.now()-t1>this._options.timeLimit)break;var wall=this._findWall();if(!wall)break;var parts=wall.split(","),x=parseInt(parts[0]),y=parseInt(parts[1]),dir=this._getDiggingDirection(x,y);if(dir){var featureAttempts=0;do{if(featureAttempts++,this._tryFeature(x,y,dir[0],dir[1])){this._removeSurroundingWalls(x,y),this._removeSurroundingWalls(x-dir[0],y-dir[1]);break}}while(featureAttempts<this._featureAttempts);for(var id in this._walls)this._walls[id]>1&&priorityWalls++}}while(this._dug/area<this._options.dugPercentage||priorityWalls);if(this._addDoors(),callback)for(var i=0;i<this._width;i++)for(var j=0;j<this._height;j++)callback(i,j,this._map[i][j]);return this._walls={},this._map=[],this}},{key:"_digCallback",value:function(x,y,value){0==value||2==value?(this._map[x][y]=0,this._dug++):this._walls[x+","+y]=1}},{key:"_isWallCallback",value:function(x,y){return!(x<0||y<0||x>=this._width||y>=this._height)&&1==this._map[x][y]}},{key:"_canBeDugCallback",value:function(x,y){return!(x<1||y<1||x+1>=this._width||y+1>=this._height)&&1==this._map[x][y]}},{key:"_priorityWallCallback",value:function(x,y){this._walls[x+","+y]=2}},{key:"_firstRoom",value:function(){var cx=Math.floor(this._width/2),cy=Math.floor(this._height/2),room=_features_js__WEBPACK_IMPORTED_MODULE_1__.Room.createRandomCenter(cx,cy,this._options);this._rooms.push(room),room.create(this._digCallback)}},{key:"_findWall",value:function(){var prio1=[],prio2=[];for(var _id in this._walls)2==this._walls[_id]?prio2.push(_id):prio1.push(_id);var arr=prio2.length?prio2:prio1;if(!arr.length)return null;var id=_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getItem(arr.sort());return delete this._walls[id],id}},{key:"_tryFeature",value:function(x,y,dx,dy){var featureName=_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getWeightedValue(this._features),feature=FEATURES[featureName].createRandomAt(x,y,dx,dy,this._options);return!!feature.isValid(this._isWallCallback,this._canBeDugCallback)&&(feature.create(this._digCallback),feature instanceof _features_js__WEBPACK_IMPORTED_MODULE_1__.Room&&this._rooms.push(feature),feature instanceof _features_js__WEBPACK_IMPORTED_MODULE_1__.Corridor&&(feature.createPriorityWalls(this._priorityWallCallback),this._corridors.push(feature)),!0)}},{key:"_removeSurroundingWalls",value:function(cx,cy){for(var deltas=_constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRS[4],i=0;i<deltas.length;i++){var delta=deltas[i],x=cx+delta[0],y=cy+delta[1];delete this._walls[x+","+y],x=cx+2*delta[0],y=cy+2*delta[1],delete this._walls[x+","+y]}}},{key:"_getDiggingDirection",value:function(cx,cy){if(cx<=0||cy<=0||cx>=this._width-1||cy>=this._height-1)return null;for(var result=null,deltas=_constants_js__WEBPACK_IMPORTED_MODULE_3__.DIRS[4],i=0;i<deltas.length;i++){var delta=deltas[i],x=cx+delta[0],y=cy+delta[1];if(!this._map[x][y]){if(result)return null;result=delta}}return result?[-result[0],-result[1]]:null}},{key:"_addDoors",value:function(){var data=this._map;function isWallCallback(x,y){return 1==data[x][y]}for(var i=0;i<this._rooms.length;i++){var room=this._rooms[i];room.clearDoors(),room.addDoors(isWallCallback)}}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Digger}(_dungeon_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/dividedmaze.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return DividedMaze}));var _map_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/map.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var DividedMaze=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(DividedMaze,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(DividedMaze);function DividedMaze(){var _this;return _classCallCheck(this,DividedMaze),(_this=_super.apply(this,arguments))._stack=[],_this._map=[],_this}return Constructor=DividedMaze,(protoProps=[{key:"create",value:function(callback){var w=this._width,h=this._height;this._map=[];for(var i=0;i<w;i++){this._map.push([]);for(var j=0;j<h;j++){var border=0==i||0==j||i+1==w||j+1==h;this._map[i].push(border?1:0)}}this._stack=[[1,1,w-2,h-2]],this._process();for(var _i=0;_i<w;_i++)for(var _j=0;_j<h;_j++)callback(_i,_j,this._map[_i][_j]);return this._map=[],this}},{key:"_process",value:function(){for(;this._stack.length;){var room=this._stack.shift();this._partitionRoom(room)}}},{key:"_partitionRoom",value:function(room){for(var availX=[],availY=[],i=room[0]+1;i<room[2];i++){var top=this._map[i][room[1]-1],bottom=this._map[i][room[3]+1];!top||!bottom||i%2||availX.push(i)}for(var j=room[1]+1;j<room[3];j++){var left=this._map[room[0]-1][j],right=this._map[room[2]+1][j];!left||!right||j%2||availY.push(j)}if(availX.length&&availY.length){var x=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getItem(availX),y=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getItem(availY);this._map[x][y]=1;var walls=[],w=[];walls.push(w);for(var _i2=room[0];_i2<x;_i2++)this._map[_i2][y]=1,_i2%2&&w.push([_i2,y]);w=[],walls.push(w);for(var _i3=x+1;_i3<=room[2];_i3++)this._map[_i3][y]=1,_i3%2&&w.push([_i3,y]);w=[],walls.push(w);for(var _j2=room[1];_j2<y;_j2++)this._map[x][_j2]=1,_j2%2&&w.push([x,_j2]);w=[],walls.push(w);for(var _j3=y+1;_j3<=room[3];_j3++)this._map[x][_j3]=1,_j3%2&&w.push([x,_j3]);for(var solid=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getItem(walls),_i4=0;_i4<walls.length;_i4++){var _w=walls[_i4];if(_w!=solid){var hole=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getItem(_w);this._map[hole[0]][hole[1]]=0}}this._stack.push([room[0],room[1],x-1,y-1]),this._stack.push([x+1,room[1],room[2],y-1]),this._stack.push([room[0],y+1,x-1,room[3]]),this._stack.push([x+1,y+1,room[2],room[3]])}}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),DividedMaze}(_map_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/dungeon.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Dungeon}));var Dungeon=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Dungeon,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(Dungeon);function Dungeon(width,height){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Dungeon),(_this=_super.call(this,width,height))._rooms=[],_this._corridors=[],_this}return Constructor=Dungeon,(protoProps=[{key:"getRooms",value:function(){return this._rooms}},{key:"getCorridors",value:function(){return this._corridors}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Dungeon}(__webpack_require__("./node_modules/rot-js/lib/map/map.js").default)},"./node_modules/rot-js/lib/map/ellermaze.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return EllerMaze}));var _map_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/map.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function addToList(i,L,R){R[L[i+1]]=R[i],L[R[i]]=L[i+1],R[i]=i+1,L[i+1]=i}function removeFromList(i,L,R){R[L[i]]=R[i],L[R[i]]=L[i],R[i]=i,L[i]=i}var EllerMaze=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(EllerMaze,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(EllerMaze);function EllerMaze(){return _classCallCheck(this,EllerMaze),_super.apply(this,arguments)}return Constructor=EllerMaze,(protoProps=[{key:"create",value:function(callback){for(var j,map=this._fillMap(1),w=Math.ceil((this._width-2)/2),L=[],R=[],i=0;i<w;i++)L.push(i),R.push(i);for(L.push(w-1),j=1;j+3<this._height;j+=2)for(var _i=0;_i<w;_i++){var x=2*_i+1,y=j;map[x][y]=0,_i!=L[_i+1]&&_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()>9/24&&(addToList(_i,L,R),map[x+1][y]=0),_i!=L[_i]&&_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()>9/24?removeFromList(_i,L,R):map[x][y+1]=0}for(var _i2=0;_i2<w;_i2++){var _x=2*_i2+1,_y=j;map[_x][_y]=0,_i2!=L[_i2+1]&&(_i2==L[_i2]||_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()>9/24)&&(addToList(_i2,L,R),map[_x+1][_y]=0),removeFromList(_i2,L,R)}for(var _i3=0;_i3<this._width;_i3++)for(var _j=0;_j<this._height;_j++)callback(_i3,_j,map[_i3][_j]);return this}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),EllerMaze}(_map_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/features.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Room",(function(){return Room})),__webpack_require__.d(__webpack_exports__,"Corridor",(function(){return Corridor}));var _rng_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var Feature=function Feature(){_classCallCheck(this,Feature)},Room=function(_Feature){_inherits(Room,_Feature);var _super=_createSuper(Room);function Room(x1,y1,x2,y2,doorX,doorY){var _this;return _classCallCheck(this,Room),(_this=_super.call(this))._x1=x1,_this._y1=y1,_this._x2=x2,_this._y2=y2,_this._doors={},void 0!==doorX&&void 0!==doorY&&_this.addDoor(doorX,doorY),_this}return _createClass(Room,[{key:"addDoor",value:function(x,y){return this._doors[x+","+y]=1,this}},{key:"getDoors",value:function(cb){for(var key in this._doors){var parts=key.split(",");cb(parseInt(parts[0]),parseInt(parts[1]))}return this}},{key:"clearDoors",value:function(){return this._doors={},this}},{key:"addDoors",value:function(isWallCallback){for(var left=this._x1-1,right=this._x2+1,top=this._y1-1,bottom=this._y2+1,x=left;x<=right;x++)for(var y=top;y<=bottom;y++)x!=left&&x!=right&&y!=top&&y!=bottom||isWallCallback(x,y)||this.addDoor(x,y);return this}},{key:"debug",value:function(){console.log("room",this._x1,this._y1,this._x2,this._y2)}},{key:"isValid",value:function(isWallCallback,canBeDugCallback){for(var left=this._x1-1,right=this._x2+1,top=this._y1-1,bottom=this._y2+1,x=left;x<=right;x++)for(var y=top;y<=bottom;y++)if(x==left||x==right||y==top||y==bottom){if(!isWallCallback(x,y))return!1}else if(!canBeDugCallback(x,y))return!1;return!0}},{key:"create",value:function(digCallback){for(var left=this._x1-1,right=this._x2+1,top=this._y1-1,bottom=this._y2+1,x=left;x<=right;x++)for(var y=top;y<=bottom;y++)digCallback(x,y,x+","+y in this._doors?2:x==left||x==right||y==top||y==bottom?1:0)}},{key:"getCenter",value:function(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}},{key:"getLeft",value:function(){return this._x1}},{key:"getRight",value:function(){return this._x2}},{key:"getTop",value:function(){return this._y1}},{key:"getBottom",value:function(){return this._y2}}],[{key:"createRandomAt",value:function(x,y,dx,dy,options){var min=options.roomWidth[0],max=options.roomWidth[1],width=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max);min=options.roomHeight[0],max=options.roomHeight[1];var height=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max);if(1==dx){var y2=y-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*height);return new this(x+1,y2,x+width,y2+height-1,x,y)}if(-1==dx){var _y=y-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*height);return new this(x-width,_y,x-1,_y+height-1,x,y)}if(1==dy){var x2=x-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*width);return new this(x2,y+1,x2+width-1,y+height,x,y)}if(-1==dy){var _x=x-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*width);return new this(_x,y-height,_x+width-1,y-1,x,y)}throw new Error("dx or dy must be 1 or -1")}},{key:"createRandomCenter",value:function(cx,cy,options){var min=options.roomWidth[0],max=options.roomWidth[1],width=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max);min=options.roomHeight[0],max=options.roomHeight[1];var height=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max),x1=cx-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*width),y1=cy-Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*height);return new this(x1,y1,x1+width-1,y1+height-1)}},{key:"createRandom",value:function(availWidth,availHeight,options){var min=options.roomWidth[0],max=options.roomWidth[1],width=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max);min=options.roomHeight[0],max=options.roomHeight[1];var height=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max),left=availWidth-width-1,top=availHeight-height-1,x1=1+Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*left),y1=1+Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniform()*top);return new this(x1,y1,x1+width-1,y1+height-1)}}]),Room}(Feature),Corridor=function(_Feature2){_inherits(Corridor,_Feature2);var _super2=_createSuper(Corridor);function Corridor(startX,startY,endX,endY){var _this2;return _classCallCheck(this,Corridor),(_this2=_super2.call(this))._startX=startX,_this2._startY=startY,_this2._endX=endX,_this2._endY=endY,_this2._endsWithAWall=!0,_this2}return _createClass(Corridor,[{key:"debug",value:function(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}},{key:"isValid",value:function(isWallCallback,canBeDugCallback){var sx=this._startX,sy=this._startY,dx=this._endX-sx,dy=this._endY-sy,length=1+Math.max(Math.abs(dx),Math.abs(dy));dx&&(dx/=Math.abs(dx)),dy&&(dy/=Math.abs(dy));for(var nx=dy,ny=-dx,ok=!0,i=0;i<length;i++){var x=sx+i*dx,y=sy+i*dy;if(canBeDugCallback(x,y)||(ok=!1),isWallCallback(x+nx,y+ny)||(ok=!1),isWallCallback(x-nx,y-ny)||(ok=!1),!ok){length=i,this._endX=x-dx,this._endY=y-dy;break}}if(0==length)return!1;if(1==length&&isWallCallback(this._endX+dx,this._endY+dy))return!1;var firstCornerBad=!isWallCallback(this._endX+dx+nx,this._endY+dy+ny),secondCornerBad=!isWallCallback(this._endX+dx-nx,this._endY+dy-ny);return this._endsWithAWall=isWallCallback(this._endX+dx,this._endY+dy),!firstCornerBad&&!secondCornerBad||!this._endsWithAWall}},{key:"create",value:function(digCallback){var sx=this._startX,sy=this._startY,dx=this._endX-sx,dy=this._endY-sy,length=1+Math.max(Math.abs(dx),Math.abs(dy));dx&&(dx/=Math.abs(dx)),dy&&(dy/=Math.abs(dy));for(var i=0;i<length;i++){digCallback(sx+i*dx,sy+i*dy,0)}return!0}},{key:"createPriorityWalls",value:function(priorityWallCallback){if(this._endsWithAWall){var sx=this._startX,sy=this._startY,dx=this._endX-sx,dy=this._endY-sy;dx&&(dx/=Math.abs(dx)),dy&&(dy/=Math.abs(dy));var nx=dy,ny=-dx;priorityWallCallback(this._endX+dx,this._endY+dy),priorityWallCallback(this._endX+nx,this._endY+ny),priorityWallCallback(this._endX-nx,this._endY-ny)}}}],[{key:"createRandomAt",value:function(x,y,dx,dy,options){var min=options.corridorLength[0],max=options.corridorLength[1],length=_rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getUniformInt(min,max);return new this(x,y,x+dx*length,y+dy*length)}}]),Corridor}(Feature)},"./node_modules/rot-js/lib/map/iceymaze.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return IceyMaze}));var _map_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/map.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var IceyMaze=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(IceyMaze,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(IceyMaze);function IceyMaze(width,height){var _this,regularity=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return _classCallCheck(this,IceyMaze),(_this=_super.call(this,width,height))._regularity=regularity,_this._map=[],_this}return Constructor=IceyMaze,(protoProps=[{key:"create",value:function(callback){var width=this._width,height=this._height,map=this._fillMap(1);width-=width%2?1:2,height-=height%2?1:2;var cx=0,cy=0,nx=0,ny=0,done=0,blocked=!1,dirs=[[0,0],[0,0],[0,0],[0,0]];do{if(cx=1+2*Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()*(width-1)/2),cy=1+2*Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()*(height-1)/2),done||(map[cx][cy]=0),!map[cx][cy]){this._randomize(dirs);do{0==Math.floor(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform()*(this._regularity+1))&&this._randomize(dirs),blocked=!0;for(var i=0;i<4;i++)if(nx=cx+2*dirs[i][0],ny=cy+2*dirs[i][1],this._isFree(map,nx,ny,width,height)){map[nx][ny]=0,map[cx+dirs[i][0]][cy+dirs[i][1]]=0,cx=nx,cy=ny,blocked=!1,done++;break}}while(!blocked)}}while(done+1<width*height/4);for(var _i=0;_i<this._width;_i++)for(var j=0;j<this._height;j++)callback(_i,j,map[_i][j]);return this._map=[],this}},{key:"_randomize",value:function(dirs){for(var i=0;i<4;i++)dirs[i][0]=0,dirs[i][1]=0;switch(Math.floor(4*_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform())){case 0:dirs[0][0]=-1,dirs[1][0]=1,dirs[2][1]=-1,dirs[3][1]=1;break;case 1:dirs[3][0]=-1,dirs[2][0]=1,dirs[1][1]=-1,dirs[0][1]=1;break;case 2:dirs[2][0]=-1,dirs[3][0]=1,dirs[0][1]=-1,dirs[1][1]=1;break;case 3:dirs[1][0]=-1,dirs[0][0]=1,dirs[3][1]=-1,dirs[2][1]=1}}},{key:"_isFree",value:function(map,x,y,width,height){return!(x<1||y<1||x>=width||y>=height)&&map[x][y]}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),IceyMaze}(_map_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _arena_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/arena.js"),_uniform_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/map/uniform.js"),_cellular_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/map/cellular.js"),_digger_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/map/digger.js"),_ellermaze_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rot-js/lib/map/ellermaze.js"),_dividedmaze_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rot-js/lib/map/dividedmaze.js"),_iceymaze_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rot-js/lib/map/iceymaze.js"),_rogue_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rot-js/lib/map/rogue.js");__webpack_exports__.default={Arena:_arena_js__WEBPACK_IMPORTED_MODULE_0__.default,Uniform:_uniform_js__WEBPACK_IMPORTED_MODULE_1__.default,Cellular:_cellular_js__WEBPACK_IMPORTED_MODULE_2__.default,Digger:_digger_js__WEBPACK_IMPORTED_MODULE_3__.default,EllerMaze:_ellermaze_js__WEBPACK_IMPORTED_MODULE_4__.default,DividedMaze:_dividedmaze_js__WEBPACK_IMPORTED_MODULE_5__.default,IceyMaze:_iceymaze_js__WEBPACK_IMPORTED_MODULE_6__.default,Rogue:_rogue_js__WEBPACK_IMPORTED_MODULE_7__.default}},"./node_modules/rot-js/lib/map/map.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Map}));var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Map=function(){function Map(){var width=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_WIDTH,height=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_HEIGHT;_classCallCheck(this,Map),this._width=width,this._height=height}var Constructor,protoProps,staticProps;return Constructor=Map,(protoProps=[{key:"_fillMap",value:function(value){for(var map=[],i=0;i<this._width;i++){map.push([]);for(var j=0;j<this._height;j++)map[i].push(value)}return map}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Map}()},"./node_modules/rot-js/lib/map/rogue.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Rogue}));var _map_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/map.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js"),_constants_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Rogue=function(_Map){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Rogue,_Map);var Constructor,protoProps,staticProps,_super=_createSuper(Rogue);function Rogue(width,height,options){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Rogue),(_this=_super.call(this,width,height)).map=[],_this.rooms=[],_this.connectedCells=[],(options=Object.assign({cellWidth:3,cellHeight:3},options)).hasOwnProperty("roomWidth")||(options.roomWidth=_this._calculateRoomSize(_this._width,options.cellWidth)),options.hasOwnProperty("roomHeight")||(options.roomHeight=_this._calculateRoomSize(_this._height,options.cellHeight)),_this._options=options,_this}return Constructor=Rogue,(protoProps=[{key:"create",value:function(callback){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),callback)for(var i=0;i<this._width;i++)for(var j=0;j<this._height;j++)callback(i,j,this.map[i][j]);return this}},{key:"_calculateRoomSize",value:function(size,cell){var max=Math.floor(size/cell*.8),min=Math.floor(size/cell*.25);return min<2&&(min=2),max<2&&(max=2),[min,max]}},{key:"_initRooms",value:function(){for(var i=0;i<this._options.cellWidth;i++){this.rooms.push([]);for(var j=0;j<this._options.cellHeight;j++)this.rooms[i].push({x:0,y:0,width:0,height:0,connections:[],cellx:i,celly:j})}}},{key:"_connectRooms",value:function(){var idx,ncgx,ncgy,room,otherRoom,dirToCheck,cgx=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(0,this._options.cellWidth-1),cgy=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(0,this._options.cellHeight-1),found=!1;do{dirToCheck=[0,2,4,6],dirToCheck=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.shuffle(dirToCheck);do{if(found=!1,idx=dirToCheck.pop(),ncgx=cgx+_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][idx][0],ncgy=cgy+_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][idx][1],!(ncgx<0||ncgx>=this._options.cellWidth||ncgy<0||ncgy>=this._options.cellHeight)){if((room=this.rooms[cgx][cgy]).connections.length>0&&room.connections[0][0]==ncgx&&room.connections[0][1]==ncgy)break;0==(otherRoom=this.rooms[ncgx][ncgy]).connections.length&&(otherRoom.connections.push([cgx,cgy]),this.connectedCells.push([ncgx,ncgy]),cgx=ncgx,cgy=ncgy,found=!0)}}while(dirToCheck.length>0&&0==found)}while(dirToCheck.length>0)}},{key:"_connectUnconnectedRooms",value:function(){var room,otherRoom,validRoom,cw=this._options.cellWidth,ch=this._options.cellHeight;this.connectedCells=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.shuffle(this.connectedCells);for(var i=0;i<this._options.cellWidth;i++)for(var j=0;j<this._options.cellHeight;j++)if(0==(room=this.rooms[i][j]).connections.length){var directions=[0,2,4,6];directions=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.shuffle(directions),validRoom=!1;do{var dirIdx=directions.pop(),newI=i+_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][dirIdx][0],newJ=j+_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][dirIdx][1];if(!(newI<0||newI>=cw||newJ<0||newJ>=ch)){if(validRoom=!0,0==(otherRoom=this.rooms[newI][newJ]).connections.length)break;for(var k=0;k<otherRoom.connections.length;k++)if(otherRoom.connections[k][0]==i&&otherRoom.connections[k][1]==j){validRoom=!1;break}if(validRoom)break}}while(directions.length);validRoom?room.connections.push([otherRoom.cellx,otherRoom.celly]):console.log("-- Unable to connect room.")}}},{key:"_createRandomRoomConnections",value:function(){}},{key:"_createRooms",value:function(){for(var roomw,roomh,sx,sy,otherRoom,w=this._width,h=this._height,cw=this._options.cellWidth,ch=this._options.cellHeight,cwp=Math.floor(this._width/cw),chp=Math.floor(this._height/ch),roomWidth=this._options.roomWidth,roomHeight=this._options.roomHeight,i=0;i<cw;i++)for(var j=0;j<ch;j++){if(0==(sx=cwp*i)&&(sx=1),0==(sy=chp*j)&&(sy=1),roomw=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(roomWidth[0],roomWidth[1]),roomh=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(roomHeight[0],roomHeight[1]),j>0)for(otherRoom=this.rooms[i][j-1];sy-(otherRoom.y+otherRoom.height)<3;)sy++;if(i>0)for(otherRoom=this.rooms[i-1][j];sx-(otherRoom.x+otherRoom.width)<3;)sx++;for(var sxOffset=Math.round(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(0,cwp-roomw)/2),syOffset=Math.round(_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(0,chp-roomh)/2);sx+sxOffset+roomw>=w;)sxOffset?sxOffset--:roomw--;for(;sy+syOffset+roomh>=h;)syOffset?syOffset--:roomh--;sx+=sxOffset,sy+=syOffset,this.rooms[i][j].x=sx,this.rooms[i][j].y=sy,this.rooms[i][j].width=roomw,this.rooms[i][j].height=roomh;for(var ii=sx;ii<sx+roomw;ii++)for(var jj=sy;jj<sy+roomh;jj++)this.map[ii][jj]=0}}},{key:"_getWallPosition",value:function(aRoom,aDirection){var rx,ry,door;return 1==aDirection||3==aDirection?(rx=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(aRoom.x+1,aRoom.x+aRoom.width-2),door=1==aDirection?1+(ry=aRoom.y-2):(ry=aRoom.y+aRoom.height+1)-1,this.map[rx][door]=0):(ry=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniformInt(aRoom.y+1,aRoom.y+aRoom.height-2),door=2==aDirection?(rx=aRoom.x+aRoom.width+1)-1:1+(rx=aRoom.x-2),this.map[door][ry]=0),[rx,ry]}},{key:"_drawCorridor",value:function(startPosition,endPosition){var tempDist,xDir,yDir,move,xOffset=endPosition[0]-startPosition[0],yOffset=endPosition[1]-startPosition[1],xpos=startPosition[0],ypos=startPosition[1],moves=[],xAbs=Math.abs(xOffset),yAbs=Math.abs(yOffset),percent=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.getUniform(),firstHalf=percent,secondHalf=1-percent;for(xDir=xOffset>0?2:6,yDir=yOffset>0?4:0,xAbs<yAbs?(tempDist=Math.ceil(yAbs*firstHalf),moves.push([yDir,tempDist]),moves.push([xDir,xAbs]),tempDist=Math.floor(yAbs*secondHalf),moves.push([yDir,tempDist])):(tempDist=Math.ceil(xAbs*firstHalf),moves.push([xDir,tempDist]),moves.push([yDir,yAbs]),tempDist=Math.floor(xAbs*secondHalf),moves.push([xDir,tempDist])),this.map[xpos][ypos]=0;moves.length>0;)for(move=moves.pop();move[1]>0;)xpos+=_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][move[0]][0],ypos+=_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIRS[8][move[0]][1],this.map[xpos][ypos]=0,move[1]=move[1]-1}},{key:"_createCorridors",value:function(){for(var room,connection,otherRoom,wall,otherWall,cw=this._options.cellWidth,ch=this._options.cellHeight,i=0;i<cw;i++)for(var j=0;j<ch;j++){room=this.rooms[i][j];for(var k=0;k<room.connections.length;k++)connection=room.connections[k],(otherRoom=this.rooms[connection[0]][connection[1]]).cellx>room.cellx?(wall=2,otherWall=4):otherRoom.cellx<room.cellx?(wall=4,otherWall=2):otherRoom.celly>room.celly?(wall=3,otherWall=1):(wall=1,otherWall=3),this._drawCorridor(this._getWallPosition(room,wall),this._getWallPosition(otherRoom,otherWall))}}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Rogue}(_map_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/map/uniform.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Uniform}));var _dungeon_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/map/dungeon.js"),_features_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/map/features.js"),_rng_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?_assertThisInitialized(self):call}function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var Uniform=function(_Dungeon){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Uniform,_Dungeon);var Constructor,protoProps,staticProps,_super=_createSuper(Uniform);function Uniform(width,height,options){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Uniform),(_this=_super.call(this,width,height))._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(_this._options,options),_this._map=[],_this._dug=0,_this._roomAttempts=20,_this._corridorAttempts=20,_this._connected=[],_this._unconnected=[],_this._digCallback=_this._digCallback.bind(_assertThisInitialized(_this)),_this._canBeDugCallback=_this._canBeDugCallback.bind(_assertThisInitialized(_this)),_this._isWallCallback=_this._isWallCallback.bind(_assertThisInitialized(_this)),_this}return Constructor=Uniform,(protoProps=[{key:"create",value:function(callback){for(var t1=Date.now();;){if(Date.now()-t1>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(callback)for(var i=0;i<this._width;i++)for(var j=0;j<this._height;j++)callback(i,j,this._map[i][j]);return this}},{key:"_generateRooms",value:function(){var room,w=this._width-2,h=this._height-2;do{if(room=this._generateRoom(),this._dug/(w*h)>this._options.roomDugPercentage)break}while(room)}},{key:"_generateRoom",value:function(){for(var count=0;count<this._roomAttempts;){count++;var room=_features_js__WEBPACK_IMPORTED_MODULE_1__.Room.createRandom(this._width,this._height,this._options);if(room.isValid(this._isWallCallback,this._canBeDugCallback))return room.create(this._digCallback),this._rooms.push(room),room}return null}},{key:"_generateCorridors",value:function(){for(var cnt=0;cnt<this._corridorAttempts;){cnt++,this._corridors=[],this._map=this._fillMap(1);for(var i=0;i<this._rooms.length;i++){var room=this._rooms[i];room.clearDoors(),room.create(this._digCallback)}for(this._unconnected=_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){var connected=_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getItem(this._connected);if(!connected)break;var room1=this._closestRoom(this._unconnected,connected);if(!room1)break;var room2=this._closestRoom(this._connected,room1);if(!room2)break;if(!this._connectRooms(room1,room2))break;if(!this._unconnected.length)return!0}}return!1}},{key:"_closestRoom",value:function(rooms,room){for(var dist=1/0,center=room.getCenter(),result=null,i=0;i<rooms.length;i++){var r=rooms[i],c=r.getCenter(),dx=c[0]-center[0],dy=c[1]-center[1],d=dx*dx+dy*dy;d<dist&&(dist=d,result=r)}return result}},{key:"_connectRooms",value:function(room1,room2){var start,end,dirIndex1,dirIndex2,min,max,index,center1=room1.getCenter(),center2=room2.getCenter(),diffX=center2[0]-center1[0],diffY=center2[1]-center1[1];if(Math.abs(diffX)<Math.abs(diffY)?(dirIndex2=(2+(dirIndex1=diffY>0?2:0))%4,min=room2.getLeft(),max=room2.getRight(),index=0):(dirIndex2=(2+(dirIndex1=diffX>0?1:3))%4,min=room2.getTop(),max=room2.getBottom(),index=1),!(start=this._placeInWall(room1,dirIndex1)))return!1;if(start[index]>=min&&start[index]<=max){end=start.slice();var value=0;switch(dirIndex2){case 0:value=room2.getTop()-1;break;case 1:value=room2.getRight()+1;break;case 2:value=room2.getBottom()+1;break;case 3:value=room2.getLeft()-1}end[(index+1)%2]=value,this._digLine([start,end])}else if(start[index]<min-1||start[index]>max+1){var diff=start[index]-center2[index],rotation=0;switch(dirIndex2){case 0:case 1:rotation=diff<0?3:1;break;case 2:case 3:rotation=diff<0?1:3}if(dirIndex2=(dirIndex2+rotation)%4,!(end=this._placeInWall(room2,dirIndex2)))return!1;var mid=[0,0];mid[index]=start[index];var index2=(index+1)%2;mid[index2]=end[index2],this._digLine([start,mid,end])}else{var _index=(index+1)%2;if(!(end=this._placeInWall(room2,dirIndex2)))return!1;var _mid=Math.round((end[_index]+start[_index])/2),mid1=[0,0],mid2=[0,0];mid1[index]=start[index],mid1[_index]=_mid,mid2[index]=end[index],mid2[_index]=_mid,this._digLine([start,mid1,mid2,end])}return room1.addDoor(start[0],start[1]),room2.addDoor(end[0],end[1]),-1!=(index=this._unconnected.indexOf(room1))&&(this._unconnected.splice(index,1),this._connected.push(room1)),-1!=(index=this._unconnected.indexOf(room2))&&(this._unconnected.splice(index,1),this._connected.push(room2)),!0}},{key:"_placeInWall",value:function(room,dirIndex){var start=[0,0],dir=[0,0],length=0;switch(dirIndex){case 0:dir=[1,0],start=[room.getLeft(),room.getTop()-1],length=room.getRight()-room.getLeft()+1;break;case 1:dir=[0,1],start=[room.getRight()+1,room.getTop()],length=room.getBottom()-room.getTop()+1;break;case 2:dir=[1,0],start=[room.getLeft(),room.getBottom()+1],length=room.getRight()-room.getLeft()+1;break;case 3:dir=[0,1],start=[room.getLeft()-1,room.getTop()],length=room.getBottom()-room.getTop()+1}for(var avail=[],lastBadIndex=-2,i=0;i<length;i++){var x=start[0]+i*dir[0],y=start[1]+i*dir[1];avail.push(null),1==this._map[x][y]?lastBadIndex!=i-1&&(avail[i]=[x,y]):(lastBadIndex=i,i&&(avail[i-1]=null))}for(var _i=avail.length-1;_i>=0;_i--)avail[_i]||avail.splice(_i,1);return avail.length?_rng_js__WEBPACK_IMPORTED_MODULE_2__.default.getItem(avail):null}},{key:"_digLine",value:function(points){for(var i=1;i<points.length;i++){var start=points[i-1],end=points[i],corridor=new _features_js__WEBPACK_IMPORTED_MODULE_1__.Corridor(start[0],start[1],end[0],end[1]);corridor.create(this._digCallback),this._corridors.push(corridor)}}},{key:"_digCallback",value:function(x,y,value){this._map[x][y]=value,0==value&&this._dug++}},{key:"_isWallCallback",value:function(x,y){return!(x<0||y<0||x>=this._width||y>=this._height)&&1==this._map[x][y]}},{key:"_canBeDugCallback",value:function(x,y){return!(x<1||y<1||x+1>=this._width||y+1>=this._height)&&1==this._map[x][y]}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Uniform}(_dungeon_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/noise/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _simplex_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/noise/simplex.js");__webpack_exports__.default={Simplex:_simplex_js__WEBPACK_IMPORTED_MODULE_0__.default}},"./node_modules/rot-js/lib/noise/noise.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Noise}));var Noise=function Noise(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Noise)}},"./node_modules/rot-js/lib/noise/simplex.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Simplex}));var _noise_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/noise/noise.js"),_rng_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/rng.js"),_util_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/util.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}var F2=.5*(Math.sqrt(3)-1),G2=(3-Math.sqrt(3))/6,Simplex=function(_Noise){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Simplex,_Noise);var Constructor,protoProps,staticProps,_super=_createSuper(Simplex);function Simplex(){var _this,gradients=arguments.length>0&&void 0!==arguments[0]?arguments[0]:256;_classCallCheck(this,Simplex),(_this=_super.call(this))._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];for(var permutations=[],i=0;i<gradients;i++)permutations.push(i);permutations=_rng_js__WEBPACK_IMPORTED_MODULE_1__.default.shuffle(permutations),_this._perms=[],_this._indexes=[];for(var _i=0;_i<2*gradients;_i++)_this._perms.push(permutations[_i%gradients]),_this._indexes.push(_this._perms[_i]%_this._gradients.length);return _this}return Constructor=Simplex,(protoProps=[{key:"get",value:function(xin,yin){var gi,i1,j1,perms=this._perms,indexes=this._indexes,count=perms.length/2,n0=0,n1=0,n2=0,s=(xin+yin)*F2,i=Math.floor(xin+s),j=Math.floor(yin+s),t=(i+j)*G2,x0=xin-(i-t),y0=yin-(j-t);x0>y0?(i1=1,j1=0):(i1=0,j1=1);var x1=x0-i1+G2,y1=y0-j1+G2,x2=x0-1+2*G2,y2=y0-1+2*G2,ii=Object(_util_js__WEBPACK_IMPORTED_MODULE_2__.mod)(i,count),jj=Object(_util_js__WEBPACK_IMPORTED_MODULE_2__.mod)(j,count),t0=.5-x0*x0-y0*y0;if(t0>=0){t0*=t0,gi=indexes[ii+perms[jj]];var grad=this._gradients[gi];n0=t0*t0*(grad[0]*x0+grad[1]*y0)}var t1=.5-x1*x1-y1*y1;if(t1>=0){t1*=t1,gi=indexes[ii+i1+perms[jj+j1]];var _grad=this._gradients[gi];n1=t1*t1*(_grad[0]*x1+_grad[1]*y1)}var t2=.5-x2*x2-y2*y2;if(t2>=0){t2*=t2,gi=indexes[ii+1+perms[jj+1]];var _grad2=this._gradients[gi];n2=t2*t2*(_grad2[0]*x2+_grad2[1]*y2)}return 70*(n0+n1+n2)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Simplex}(_noise_js__WEBPACK_IMPORTED_MODULE_0__.default)},"./node_modules/rot-js/lib/path/astar.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return AStar}));var AStar=function(_Path){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(AStar,_Path);var Constructor,protoProps,staticProps,_super=_createSuper(AStar);function AStar(toX,toY,passableCallback){var _this,options=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return _classCallCheck(this,AStar),(_this=_super.call(this,toX,toY,passableCallback,options))._todo=[],_this._done={},_this}return Constructor=AStar,(protoProps=[{key:"compute",value:function(fromX,fromY,callback){for(this._todo=[],this._done={},this._fromX=fromX,this._fromY=fromY,this._add(this._toX,this._toY,null);this._todo.length;){var _item=this._todo.shift(),id=_item.x+","+_item.y;if(!(id in this._done)){if(this._done[id]=_item,_item.x==fromX&&_item.y==fromY)break;for(var neighbors=this._getNeighbors(_item.x,_item.y),i=0;i<neighbors.length;i++){var neighbor=neighbors[i],x=neighbor[0],y=neighbor[1];x+","+y in this._done||this._add(x,y,_item)}}}var item=this._done[fromX+","+fromY];if(item)for(;item;)callback(item.x,item.y),item=item.prev}},{key:"_add",value:function(x,y,prev){for(var h=this._distance(x,y),obj={x:x,y:y,prev:prev,g:prev?prev.g+1:0,h:h},f=obj.g+obj.h,i=0;i<this._todo.length;i++){var item=this._todo[i],itemF=item.g+item.h;if(f<itemF||f==itemF&&h<item.h)return void this._todo.splice(i,0,obj)}this._todo.push(obj)}},{key:"_distance",value:function(x,y){switch(this._options.topology){case 4:return Math.abs(x-this._fromX)+Math.abs(y-this._fromY);case 6:var dx=Math.abs(x-this._fromX),dy=Math.abs(y-this._fromY);return dy+Math.max(0,(dx-dy)/2);case 8:return Math.max(Math.abs(x-this._fromX),Math.abs(y-this._fromY))}}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),AStar}(__webpack_require__("./node_modules/rot-js/lib/path/path.js").default)},"./node_modules/rot-js/lib/path/dijkstra.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Dijkstra}));var Dijkstra=function(_Path){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Dijkstra,_Path);var Constructor,protoProps,staticProps,_super=_createSuper(Dijkstra);function Dijkstra(toX,toY,passableCallback,options){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Dijkstra),(_this=_super.call(this,toX,toY,passableCallback,options))._computed={},_this._todo=[],_this._add(toX,toY,null),_this}return Constructor=Dijkstra,(protoProps=[{key:"compute",value:function(fromX,fromY,callback){var key=fromX+","+fromY;if(key in this._computed||this._compute(fromX,fromY),key in this._computed)for(var item=this._computed[key];item;)callback(item.x,item.y),item=item.prev}},{key:"_compute",value:function(fromX,fromY){for(;this._todo.length;){var item=this._todo.shift();if(item.x==fromX&&item.y==fromY)return;for(var neighbors=this._getNeighbors(item.x,item.y),i=0;i<neighbors.length;i++){var neighbor=neighbors[i],x=neighbor[0],y=neighbor[1];x+","+y in this._computed||this._add(x,y,item)}}}},{key:"_add",value:function(x,y,prev){var obj={x:x,y:y,prev:prev};this._computed[x+","+y]=obj,this._todo.push(obj)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Dijkstra}(__webpack_require__("./node_modules/rot-js/lib/path/path.js").default)},"./node_modules/rot-js/lib/path/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _dijkstra_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/path/dijkstra.js"),_astar_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/path/astar.js");__webpack_exports__.default={Dijkstra:_dijkstra_js__WEBPACK_IMPORTED_MODULE_0__.default,AStar:_astar_js__WEBPACK_IMPORTED_MODULE_1__.default}},"./node_modules/rot-js/lib/path/path.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Path}));var _constants_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/constants.js");function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Path=function(){function Path(toX,toY,passableCallback){var options=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};_classCallCheck(this,Path),this._toX=toX,this._toY=toY,this._passableCallback=passableCallback,this._options=Object.assign({topology:8},options),this._dirs=_constants_js__WEBPACK_IMPORTED_MODULE_0__.DIRS[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}var Constructor,protoProps,staticProps;return Constructor=Path,(protoProps=[{key:"_getNeighbors",value:function(cx,cy){for(var result=[],i=0;i<this._dirs.length;i++){var dir=this._dirs[i],x=cx+dir[0],y=cy+dir[1];this._passableCallback(x,y)&&result.push([x,y])}return result}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Path}()},"./node_modules/rot-js/lib/rng.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}__webpack_require__.r(__webpack_exports__);var FRAC=2.3283064365386963e-10,RNG=function(){function RNG(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,RNG),this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}var Constructor,protoProps,staticProps;return Constructor=RNG,(protoProps=[{key:"getSeed",value:function(){return this._seed}},{key:"setSeed",value:function(seed){return seed=seed<1?1/seed:seed,this._seed=seed,this._s0=(seed>>>0)*FRAC,seed=69069*seed+1>>>0,this._s1=seed*FRAC,seed=69069*seed+1>>>0,this._s2=seed*FRAC,this._c=1,this}},{key:"getUniform",value:function(){var t=2091639*this._s0+this._c*FRAC;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}},{key:"getUniformInt",value:function(lowerBound,upperBound){var max=Math.max(lowerBound,upperBound),min=Math.min(lowerBound,upperBound);return Math.floor(this.getUniform()*(max-min+1))+min}},{key:"getNormal",value:function(){var u,v,r,mean=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,stddev=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;do{r=(u=2*this.getUniform()-1)*u+(v=2*this.getUniform()-1)*v}while(r>1||0==r);var gauss=u*Math.sqrt(-2*Math.log(r)/r);return mean+gauss*stddev}},{key:"getPercentage",value:function(){return 1+Math.floor(100*this.getUniform())}},{key:"getItem",value:function(array){return array.length?array[Math.floor(this.getUniform()*array.length)]:null}},{key:"shuffle",value:function(array){for(var result=[],clone=array.slice();clone.length;){var index=clone.indexOf(this.getItem(clone));result.push(clone.splice(index,1)[0])}return result}},{key:"getWeightedValue",value:function(data){var total=0;for(var _id in data)total+=data[_id];var id,random=this.getUniform()*total,part=0;for(id in data)if(random<(part+=data[id]))return id;return id}},{key:"getState",value:function(){return[this._s0,this._s1,this._s2,this._c]}},{key:"setState",value:function(state){return this._s0=state[0],this._s1=state[1],this._s2=state[2],this._c=state[3],this}},{key:"clone",value:function(){var clone=new RNG;return clone.setState(this.getState())}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),RNG}();__webpack_exports__.default=(new RNG).setSeed(Date.now())},"./node_modules/rot-js/lib/scheduler/action.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Action}));var Action=function(_Scheduler){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Action,_Scheduler);var Constructor,protoProps,staticProps,_super=_createSuper(Action);function Action(){var _this;return function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Action),(_this=_super.call(this))._defaultDuration=1,_this._duration=_this._defaultDuration,_this}return Constructor=Action,(protoProps=[{key:"add",value:function(item,repeat,time){return this._queue.add(item,time||this._defaultDuration),_get(_getPrototypeOf(Action.prototype),"add",this).call(this,item,repeat)}},{key:"clear",value:function(){return this._duration=this._defaultDuration,_get(_getPrototypeOf(Action.prototype),"clear",this).call(this)}},{key:"remove",value:function(item){return item==this._current&&(this._duration=this._defaultDuration),_get(_getPrototypeOf(Action.prototype),"remove",this).call(this,item)}},{key:"next",value:function(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),_get(_getPrototypeOf(Action.prototype),"next",this).call(this)}},{key:"setDuration",value:function(time){return this._current&&(this._duration=time),this}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Action}(__webpack_require__("./node_modules/rot-js/lib/scheduler/scheduler.js").default)},"./node_modules/rot-js/lib/scheduler/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _simple_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/scheduler/simple.js"),_speed_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rot-js/lib/scheduler/speed.js"),_action_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rot-js/lib/scheduler/action.js");__webpack_exports__.default={Simple:_simple_js__WEBPACK_IMPORTED_MODULE_0__.default,Speed:_speed_js__WEBPACK_IMPORTED_MODULE_1__.default,Action:_action_js__WEBPACK_IMPORTED_MODULE_2__.default}},"./node_modules/rot-js/lib/scheduler/scheduler.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Scheduler}));var _eventqueue_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/eventqueue.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var Scheduler=function(){function Scheduler(){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Scheduler),this._queue=new _eventqueue_js__WEBPACK_IMPORTED_MODULE_0__.default,this._repeat=[],this._current=null}var Constructor,protoProps,staticProps;return Constructor=Scheduler,(protoProps=[{key:"getTime",value:function(){return this._queue.getTime()}},{key:"add",value:function(item,repeat){return repeat&&this._repeat.push(item),this}},{key:"getTimeOf",value:function(item){return this._queue.getEventTime(item)}},{key:"clear",value:function(){return this._queue.clear(),this._repeat=[],this._current=null,this}},{key:"remove",value:function(item){var result=this._queue.remove(item),index=this._repeat.indexOf(item);return-1!=index&&this._repeat.splice(index,1),this._current==item&&(this._current=null),result}},{key:"next",value:function(){return this._current=this._queue.get(),this._current}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Scheduler}()},"./node_modules/rot-js/lib/scheduler/simple.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Simple}));var Simple=function(_Scheduler){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Simple,_Scheduler);var Constructor,protoProps,staticProps,_super=_createSuper(Simple);function Simple(){return _classCallCheck(this,Simple),_super.apply(this,arguments)}return Constructor=Simple,(protoProps=[{key:"add",value:function(item,repeat){return this._queue.add(item,0),_get(_getPrototypeOf(Simple.prototype),"add",this).call(this,item,repeat)}},{key:"next",value:function(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,0),_get(_getPrototypeOf(Simple.prototype),"next",this).call(this)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Simple}(__webpack_require__("./node_modules/rot-js/lib/scheduler/scheduler.js").default)},"./node_modules/rot-js/lib/scheduler/speed.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _get(target,property,receiver){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(target,property,receiver){var base=function(object,property){for(;!Object.prototype.hasOwnProperty.call(object,property)&&null!==(object=_getPrototypeOf(object)););return object}(target,property);if(base){var desc=Object.getOwnPropertyDescriptor(base,property);return desc.get?desc.get.call(receiver):desc.value}})(target,property,receiver||target)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return Speed}));var Speed=function(_Scheduler){!function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}(Speed,_Scheduler);var Constructor,protoProps,staticProps,_super=_createSuper(Speed);function Speed(){return _classCallCheck(this,Speed),_super.apply(this,arguments)}return Constructor=Speed,(protoProps=[{key:"add",value:function(item,repeat,time){return this._queue.add(item,void 0!==time?time:1/item.getSpeed()),_get(_getPrototypeOf(Speed.prototype),"add",this).call(this,item,repeat)}},{key:"next",value:function(){return this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,1/this._current.getSpeed()),_get(_getPrototypeOf(Speed.prototype),"next",this).call(this)}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Speed}(__webpack_require__("./node_modules/rot-js/lib/scheduler/scheduler.js").default)},"./node_modules/rot-js/lib/stringgenerator.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return StringGenerator}));var _rng_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/rng.js");function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}var StringGenerator=function(){function StringGenerator(options){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,StringGenerator),this._options={words:!1,order:3,prior:.001},Object.assign(this._options,options),this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(var i=0;i<this._options.order;i++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}}var Constructor,protoProps,staticProps;return Constructor=StringGenerator,(protoProps=[{key:"clear",value:function(){this._data={},this._priorValues={}}},{key:"generate",value:function(){for(var result=[this._sample(this._prefix)];result[result.length-1]!=this._boundary;)result.push(this._sample(result));return this._join(result.slice(0,-1))}},{key:"observe",value:function(string){for(var tokens=this._split(string),i=0;i<tokens.length;i++)this._priorValues[tokens[i]]=this._options.prior;tokens=this._prefix.concat(tokens).concat(this._suffix);for(var _i=this._options.order;_i<tokens.length;_i++)for(var context=tokens.slice(_i-this._options.order,_i),event=tokens[_i],j=0;j<context.length;j++){var subcontext=context.slice(j);this._observeEvent(subcontext,event)}}},{key:"getStats",value:function(){var parts=[],priorCount=Object.keys(this._priorValues).length;priorCount--,parts.push("distinct samples: "+priorCount);var dataCount=Object.keys(this._data).length,eventCount=0;for(var p in this._data)eventCount+=Object.keys(this._data[p]).length;return parts.push("dictionary size (contexts): "+dataCount),parts.push("dictionary size (events): "+eventCount),parts.join(", ")}},{key:"_split",value:function(str){return str.split(this._options.words?/\s+/:"")}},{key:"_join",value:function(arr){return arr.join(this._options.words?" ":"")}},{key:"_observeEvent",value:function(context,event){var key=this._join(context);key in this._data||(this._data[key]={});var data=this._data[key];event in data||(data[event]=0),data[event]++}},{key:"_sample",value:function(context){context=this._backoff(context);var key=this._join(context),data=this._data[key],available={};if(this._options.prior){for(var event in this._priorValues)available[event]=this._priorValues[event];for(var _event in data)available[_event]+=data[_event]}else available=data;return _rng_js__WEBPACK_IMPORTED_MODULE_0__.default.getWeightedValue(available)}},{key:"_backoff",value:function(context){for(context.length>this._options.order?context=context.slice(-this._options.order):context.length<this._options.order&&(context=this._prefix.slice(0,this._options.order-context.length).concat(context));!(this._join(context)in this._data)&&context.length>0;)context=context.slice(1);return context}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),StringGenerator}()},"./node_modules/rot-js/lib/text.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TYPE_TEXT",(function(){return TYPE_TEXT})),__webpack_require__.d(__webpack_exports__,"TYPE_NEWLINE",(function(){return TYPE_NEWLINE})),__webpack_require__.d(__webpack_exports__,"TYPE_FG",(function(){return TYPE_FG})),__webpack_require__.d(__webpack_exports__,"TYPE_BG",(function(){return TYPE_BG})),__webpack_require__.d(__webpack_exports__,"measure",(function(){return measure})),__webpack_require__.d(__webpack_exports__,"tokenize",(function(){return tokenize}));var RE_COLORS=/%([bc]){([^}]*)}/g,TYPE_TEXT=0,TYPE_NEWLINE=1,TYPE_FG=2,TYPE_BG=3;function measure(str,maxWidth){for(var result={width:0,height:1},tokens=tokenize(str,maxWidth),lineWidth=0,i=0;i<tokens.length;i++){var token=tokens[i];switch(token.type){case TYPE_TEXT:lineWidth+=token.value.length;break;case TYPE_NEWLINE:result.height++,result.width=Math.max(result.width,lineWidth),lineWidth=0}}return result.width=Math.max(result.width,lineWidth),result}function tokenize(str,maxWidth){var result=[],offset=0;str.replace(RE_COLORS,(function(match,type,name,index){var part=str.substring(offset,index);return part.length&&result.push({type:TYPE_TEXT,value:part}),result.push({type:"c"==type?TYPE_FG:TYPE_BG,value:name.trim()}),offset=index+match.length,""}));var part=str.substring(offset);return part.length&&result.push({type:TYPE_TEXT,value:part}),function(tokens,maxWidth){maxWidth||(maxWidth=1/0);var i=0,lineLength=0,lastTokenWithSpace=-1;for(;i<tokens.length;){var token=tokens[i];if(token.type==TYPE_NEWLINE&&(lineLength=0,lastTokenWithSpace=-1),token.type==TYPE_TEXT){for(;0==lineLength&&" "==token.value.charAt(0);)token.value=token.value.substring(1);var index=token.value.indexOf("\n");if(-1!=index){token.value=breakInsideToken(tokens,i,index,!0);for(var arr=token.value.split("");arr.length&&" "==arr[arr.length-1];)arr.pop();token.value=arr.join("")}if(token.value.length){if(lineLength+token.value.length>maxWidth){for(var _index=-1;;){var nextIndex=token.value.indexOf(" ",_index+1);if(-1==nextIndex)break;if(lineLength+nextIndex>maxWidth)break;_index=nextIndex}if(-1!=_index)token.value=breakInsideToken(tokens,i,_index,!0);else if(-1!=lastTokenWithSpace){var _token=tokens[lastTokenWithSpace],breakIndex=_token.value.lastIndexOf(" ");_token.value=breakInsideToken(tokens,lastTokenWithSpace,breakIndex,!0),i=lastTokenWithSpace}else token.value=breakInsideToken(tokens,i,maxWidth-lineLength,!1)}else lineLength+=token.value.length,-1!=token.value.indexOf(" ")&&(lastTokenWithSpace=i);i++}else tokens.splice(i,1)}else i++}tokens.push({type:TYPE_NEWLINE});for(var lastTextToken=null,_i=0;_i<tokens.length;_i++){var _token2=tokens[_i];switch(_token2.type){case TYPE_TEXT:lastTextToken=_token2;break;case TYPE_NEWLINE:if(lastTextToken){for(var _arr=lastTextToken.value.split("");_arr.length&&" "==_arr[_arr.length-1];)_arr.pop();lastTextToken.value=_arr.join("")}lastTextToken=null}}return tokens.pop(),tokens}(result,maxWidth)}function breakInsideToken(tokens,tokenIndex,breakIndex,removeBreakChar){var newBreakToken={type:TYPE_NEWLINE},newTextToken={type:TYPE_TEXT,value:tokens[tokenIndex].value.substring(breakIndex+(removeBreakChar?1:0))};return tokens.splice(tokenIndex+1,0,newBreakToken,newTextToken),tokens[tokenIndex].value.substring(0,breakIndex)}},"./node_modules/rot-js/lib/util.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function mod(x,n){return(x%n+n)%n}function clamp(val){var min=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,max=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return val<min?min:val>max?max:val}function capitalize(string){return string.charAt(0).toUpperCase()+string.substring(1)}function format(template){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];var map=format.map,replacer=function(match,group1,group2,index){if("%"==template.charAt(index-1))return match.substring(1);if(!args.length)return match;var obj=args[0],parts=(group1||group2).split(","),name=parts.shift()||"",method=map[name.toLowerCase()];if(!method)return match;var replaced=(obj=args.shift())[method].apply(obj,parts),first=name.charAt(0);return first!=first.toLowerCase()&&(replaced=capitalize(replaced)),replaced};return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,replacer)}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"mod",(function(){return mod})),__webpack_require__.d(__webpack_exports__,"clamp",(function(){return clamp})),__webpack_require__.d(__webpack_exports__,"capitalize",(function(){return capitalize})),__webpack_require__.d(__webpack_exports__,"format",(function(){return format})),format.map={s:"toString"}},"./node_modules/webpack/buildin/amd-options.js":function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(this,{})},"./node_modules/webpack/buildin/global.js":function(module,exports){function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var g;g=function(){return this}();try{g=g||new Function("return this")()}catch(e){"object"===("undefined"==typeof window?"undefined":_typeof(window))&&(g=window)}module.exports=g},"./node_modules/webpack/buildin/module.js":function(module,exports){module.exports=function(module){return module.webpackPolyfill||(module.deprecate=function(){},module.paths=[],module.children||(module.children=[]),Object.defineProperty(module,"loaded",{enumerable:!0,get:function(){return module.l}}),Object.defineProperty(module,"id",{enumerable:!0,get:function(){return module.i}}),module.webpackPolyfill=1),module}},"./src/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"gameState",(function(){return gameState})),__webpack_require__.d(__webpack_exports__,"previousGameState",(function(){return previousGameState})),__webpack_require__.d(__webpack_exports__,"SetQueuedAbility",(function(){return SetQueuedAbility})),__webpack_require__.d(__webpack_exports__,"SetQueuedEntity",(function(){return SetQueuedEntity})),__webpack_require__.d(__webpack_exports__,"targetEntity",(function(){return targetEntity})),__webpack_require__.d(__webpack_exports__,"ExamineTargetEnable",(function(){return ExamineTargetEnable})),__webpack_require__.d(__webpack_exports__,"ExamineTargetDisable",(function(){return ExamineTargetDisable})),__webpack_require__.d(__webpack_exports__,"setupTestFight",(function(){return setupTestFight}));__webpack_require__("./src/lib/canvas.js");var _state_ecs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/state/ecs.js"),_systems_render__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__("./node_modules/rot-js/lib/index.js"),__webpack_require__("./src/systems/render.js")),_state_dungeon__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/state/dungeon.js"),_state_component__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/state/component.js"),lodash__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/lodash/lodash.js"),_state_cache__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/state/cache.js"),_lib_grid__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/lib/grid.js"),_systems_ai__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/systems/ai.js"),_state_helpMenu__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./src/state/helpMenu.js"),_state_town__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./src/state/town.js"),_state_scenario__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./src/state/scenario.js"),gameState="loading",previousGameState="",queuedAbility="hi",queuedEntity="hi",SetQueuedAbility=function(abil){queuedAbility=abil},SetQueuedEntity=function(ent){queuedEntity=ent},targetEntity=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createEntity("targetEntity");targetEntity.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,{char:"X",color:"black",background:"green"});var userInput=null,playerEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,_state_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_5__.LayerUnit,_state_component__WEBPACK_IMPORTED_MODULE_5__.IsPlayerControlled],none:[_state_component__WEBPACK_IMPORTED_MODULE_5__.IsDead]}),allyEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,_state_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_5__.LayerUnit],none:[_state_component__WEBPACK_IMPORTED_MODULE_5__.IsEnemy,_state_component__WEBPACK_IMPORTED_MODULE_5__.IsPlayerControlled]}),enemyEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,_state_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_5__.LayerUnit,_state_component__WEBPACK_IMPORTED_MODULE_5__.IsEnemy],none:[_state_component__WEBPACK_IMPORTED_MODULE_5__.IsDead]}),dmgTileEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_5__.DmgTile]}),processUserInput=function(){if("PlayerTurnDefend"==gameState||"PlayerTurnAttack"==gameState)if("?"===userInput)SetPreviousState("Help"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)();else if("n"===userInput)_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetNextActive(),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)();else if("1"===userInput||"2"===userInput||"3"===userInput||"4"===userInput||"5"===userInput||"6"===userInput||"7"===userInput||"8"===userInput||"9"===userInput)userInput-1<_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().die.length&&(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().die[userInput-1].exhausted||(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().die[userInput-1].selected=!_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().die[userInput-1].selected),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)());else if("ArrowUp"===userInput)PlayerAttemptMove();else if("ArrowRight"===userInput)PlayerAttemptMove();else if("ArrowDown"===userInput)PlayerAttemptMove();else if("ArrowLeft"===userInput)PlayerAttemptMove();else if("q"===userInput||"w"===userInput||"e"===userInput||"r"===userInput||"t"===userInput||"y"===userInput){if((abilityIndex=ConvertSkillHotkey(userInput))<_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().abilityGrabBagList.abilities.length){var abil=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().abilityGrabBagList.abilities[abilityIndex],canUse=abil.abilityFunction.function.canUse(abil,_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive()),currentPhase="PlayerTurnDefend"==gameState?"Defend":"Attack";canUse.length>0&&("Any"==abil.abilityPhase.phase||abil.abilityPhase.phase==currentPhase)&&(abil.abilityFunction.function.onTarget?abil.abilityFunction.function.onTarget(abil,_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive()):abil.abilityFunction.function.onUse(abil,_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive(),GetTargetEntityPos()))}Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()}else if("Q"===userInput||"W"===userInput||"E"===userInput||"R"===userInput||"T"===userInput||"Y"===userInput){var abilityIndex=ConvertSkillHotkey(userInput);SetPreviousState("AbilityInfo"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.SetEntityToRender)(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().abilityGrabBagList.abilities[abilityIndex]),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()}else"Enter"==userInput?("PlayerTurnDefend"==gameState?(PlayerTurnDefend(),gameState="PlayerTurnAttack"):"PlayerTurnAttack"==gameState&&(ProcessDmgTiles(),EndTurnProcess(allyEntities.get()),EndTurnProcess(playerEntities.get()),CheckVictory(),gameState="EnemyTurnDefend"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"x"===userInput?(ExamineTargetEnable("examine"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"c"===userInput?(SetPreviousState("DamageShow"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"z"===userInput&&(SetPreviousState("EnemyNumbers"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)());else"examine"===gameState||"targeting"===gameState?"Escape"===userInput?(ExamineTargetDisable(),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"ArrowUp"===userInput||"ArrowRight"===userInput||"ArrowDown"===userInput||"ArrowLeft"===userInput?(TargetMove(),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"Enter"===userInput&&"targeting"===gameState&&(queuedAbility.abilityFunction.function.onUse(queuedAbility,queuedEntity,GetTargetEntityPos()),ExamineTargetDisable(),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"Help"!==gameState&&"AbilityInfo"!=gameState&&"DamageShow"!=gameState&&"EnemyNumbers"!=gameState||"Escape"===userInput&&(Object(_state_helpMenu__WEBPACK_IMPORTED_MODULE_10__.HideHelpMenu)(),ReturnPreviousGameState(),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)());userInput=null},ConvertSkillHotkey=function(hotkey){switch(userInput){case"q":case"Q":return 0;case"w":case"W":return 1;case"e":case"E":return 2;case"r":case"R":return 3;case"t":case"T":return 4;case"y":case"Y":return 5;default:return 0}},GetTargetEntityPos=function(){return targetEntity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position)?{x:targetEntity.position.x,y:targetEntity.position.y}:{x:0,y:0}},ExamineTargetEnable=function(state){SetPreviousState(state),targetEntity.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.x,y:_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.y})},SetPreviousState=function(state){previousGameState=gameState,gameState=state},ExamineTargetDisable=function(){ReturnPreviousGameState(),targetEntity.remove(targetEntity.position)},ReturnPreviousGameState=function(){gameState=previousGameState},PlayerAttemptMove=function(){"ArrowUp"===userInput&&(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().movement.y=-1),"ArrowRight"===userInput&&(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().movement.x=1),"ArrowDown"===userInput&&(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().movement.y=1),"ArrowLeft"===userInput&&(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().movement.x=-1),_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().fireEvent("attempt-move"),Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()},TargetMove=function(){"ArrowUp"===userInput?(targetEntity.position.y=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.y+-1,targetEntity.position.x=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.x):"ArrowRight"===userInput?(targetEntity.position.x=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.x+1,targetEntity.position.y=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.y):"ArrowDown"===userInput?(targetEntity.position.y=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.y+1,targetEntity.position.x=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.x):"ArrowLeft"===userInput&&(targetEntity.position.x=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.x+-1,targetEntity.position.y=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetActive().position.y)};document.addEventListener("keydown",(function(ev){userInput=ev.key}));var huntName,setupTestFight=function(){var newPlayer=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab("PlayerBeing",{appearance:{char:"@",color:"green"}}),emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)();newPlayer.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y}),CurrrentActivePlayer=newPlayer;var newPlayer2=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab("PlayerBeing",{appearance:{char:"@",color:"purple"}});emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)(),newPlayer2.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y}),Object(lodash__WEBPACK_IMPORTED_MODULE_6__.times)(6,(function(){emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)(),_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab("Goblin").add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y})})),emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)(),_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab("Orc Warrior").add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y})},EnemyAttackTurn=function(){enemyEntities.get().forEach((function(enem){_systems_ai__WEBPACK_IMPORTED_MODULE_9__.DoAiTurnAttack(enem)}))},PlayerTurnDefend=function(){ProcessDmgTiles(),allyEntities.get().forEach((function(ally){_systems_ai__WEBPACK_IMPORTED_MODULE_9__.DoAiTurnAttack(ally)}))},ProcessDmgTiles=function(){console.log("process dmg");var toDestroy=[];dmgTileEntities.get().forEach((function(entity){Object(_state_cache__WEBPACK_IMPORTED_MODULE_7__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_8__.toLocId)({x:entity.position.x,y:entity.position.y})).forEach((function(eId){var entityAtLoc=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.getEntity(eId);entityAtLoc.layerUnit&&entityAtLoc.fireEvent("take-damage",{amount:entity.dmgTile.dmg})})),toDestroy.push(entity)})),toDestroy.forEach((function(ent){ent.destroy()}))},EndTurnProcess=function(entities){entities.forEach((function(entity){entity.fireEvent("turn-end",entity)}))},CheckVictory=function(){var count=0;(console.log("check victory"),enemyEntities.get().forEach((function(enem){count++})),0==count)&&(console.log("VICTORY"),_state_scenario__WEBPACK_IMPORTED_MODULE_12__.StartNextScenario()?console.log("finished"):(console.log("going to next scenario"),CleanUpPostBattle(),StartScenario()))},CleanUpPostBattle=function(){for(var hunters=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetHunters(),x=0;x<hunters.length;x++)_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetVillager(hunters[x]).has(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position)&&_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetVillager(hunters[x]).remove(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetVillager(hunters[x]).position)},StartScenario=function(){var currScenario=_state_scenario__WEBPACK_IMPORTED_MODULE_12__.GetCurrentScenario();Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.makeMap)(),console.log(currScenario),currScenario.scenarioBattle.enemies.forEach((function(enem){Object(lodash__WEBPACK_IMPORTED_MODULE_6__.times)(enem[1],(function(){var emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)(),newEnem=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab(enem[0]);newEnem.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y}),newEnem.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsEnemy)}))})),currScenario.scenarioBattle.allies.forEach((function(ally){Object(lodash__WEBPACK_IMPORTED_MODULE_6__.times)(ally[1],(function(){var emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)(),newAlly=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createPrefab(ally[0]);newAlly.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y}),newAlly.appearance.color="blue"}))})),_state_town__WEBPACK_IMPORTED_MODULE_11__.default.SetHunters();var hunters=_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetHunters();console.log("hunters going to battle"),console.log(hunters),hunters.forEach((function(hunter){console.log("setting up hunter"),console.log(_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetVillager(hunter));var emptyTile=Object(_state_dungeon__WEBPACK_IMPORTED_MODULE_4__.FetchFreeTile)();_state_town__WEBPACK_IMPORTED_MODULE_11__.default.GetVillager(hunter).add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:emptyTile.position.x,y:emptyTile.position.y})})),gameState="setup",Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()};_state_scenario__WEBPACK_IMPORTED_MODULE_12__.SetupHunts(),console.log(_state_town__WEBPACK_IMPORTED_MODULE_11__.default),huntName="Hunt",_state_scenario__WEBPACK_IMPORTED_MODULE_12__.StartHunt(huntName),_state_scenario__WEBPACK_IMPORTED_MODULE_12__.GetCurrentHunt(),StartScenario();requestAnimationFrame((function gameLoop(){"setup"==gameState?gameState="EnemyTurnDefend":"EnemyTurnDefend"==gameState?(gameState="EnemyTurnAttack",Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"EnemyTurnAttack"==gameState?(EnemyAttackTurn(),EndTurnProcess(enemyEntities.get()),gameState="PlayerTurnDefend",Object(_systems_render__WEBPACK_IMPORTED_MODULE_3__.render)()):"PlayerTurnDefend"==gameState||"PlayerTurnAttack"==gameState?processUserInput():"examine"!=gameState&&"targeting"!=gameState&&"Help"!=gameState&&"AbilityInfo"!=gameState&&"DamageShow"!=gameState&&"EnemyNumbers"!=gameState||processUserInput(),requestAnimationFrame(gameLoop)}))},"./src/lib/canvas.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"grid",(function(){return grid})),__webpack_require__.d(__webpack_exports__,"display",(function(){return display})),__webpack_require__.d(__webpack_exports__,"divHelp",(function(){return divHelp})),__webpack_require__.d(__webpack_exports__,"displayHelp",(function(){return displayHelp}));var rot_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rot-js/lib/index.js"),grid=(window.devicePixelRatio,document.querySelector("#game"),{width:50,height:34,map:{width:20,height:10,x:10,y:3},enemies:{width:10,height:10,x:31,y:3},activePlayer:{width:10,height:2,x:1,y:3},dieMenu:{width:50,height:2,x:10,y:14},abilityMenu:{width:30,height:1,x:10,y:16},phaseMenu:{width:20,height:1,x:12,y:2},helpMenu:{width:45,height:30}}),displayOptions={bg:"black",fg:"Grey",fontFamily:"Fira Mono",width:grid.width,height:grid.height,fontSize:18,forceSquareRatio:!0},display=new rot_js__WEBPACK_IMPORTED_MODULE_0__.Display(displayOptions);document.body.appendChild(display.getContainer());var displayOptionsHelp={bg:"black",fg:"Grey",fontFamily:"Fira Mono",width:grid.helpMenu.width,height:grid.helpMenu.height,fontSize:18,forceSquareRatio:!1},divHelp=document.createElement("div");divHelp.id="helpMenu",document.body.appendChild(divHelp);var displayHelp=new rot_js__WEBPACK_IMPORTED_MODULE_0__.Display(displayOptionsHelp);divHelp.appendChild(displayHelp.getContainer()),displayHelp.drawText(0,0,"HELLO CAN YOU SEE THIS")},"./src/lib/grid.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"toCell",(function(){return toCell})),__webpack_require__.d(__webpack_exports__,"toLocId",(function(){return toLocId}));var toCell=function(cellOrId){var cell=cellOrId;return"string"==typeof cell&&(cell=idToCell(cell)),cell},toLocId=function(cellOrId){var locId=cellOrId;return"string"!=typeof locId&&(locId=cellToId(locId)),locId},idToCell=function(id){var coords=id.split(",");return{x:parseInt(coords[0],10),y:parseInt(coords[1],10)}},cellToId=function(_ref){var x=_ref.x,y=_ref.y;return"".concat(x,",").concat(y)}},"./src/state/cache.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"cache",(function(){return cache})),__webpack_require__.d(__webpack_exports__,"addCacheSet",(function(){return addCacheSet})),__webpack_require__.d(__webpack_exports__,"deleteCacheSet",(function(){return deleteCacheSet})),__webpack_require__.d(__webpack_exports__,"readCacheSet",(function(){return readCacheSet}));var cache={entitiesAtLocation:{}},addCacheSet=function(name,key,value){cache[name][key]||(cache[name][key]=new Set),cache[name][key].add(value)},deleteCacheSet=function(name,key,value){cache[name][key]&&cache[name][key].has(value)&&cache[name][key].delete(value)},readCacheSet=function(name,key,value){if(cache[name][key])return value?cache[name][key].get(value):cache[name][key]};__webpack_exports__.default=cache},"./src/state/component.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Appearance",(function(){return Appearance})),__webpack_require__.d(__webpack_exports__,"Description",(function(){return Description})),__webpack_require__.d(__webpack_exports__,"IsBlocking",(function(){return IsBlocking})),__webpack_require__.d(__webpack_exports__,"Position",(function(){return Position})),__webpack_require__.d(__webpack_exports__,"Health",(function(){return Health})),__webpack_require__.d(__webpack_exports__,"Movement",(function(){return Movement})),__webpack_require__.d(__webpack_exports__,"GainMovement",(function(){return GainMovement})),__webpack_require__.d(__webpack_exports__,"Armour",(function(){return Armour})),__webpack_require__.d(__webpack_exports__,"Stamina",(function(){return Stamina})),__webpack_require__.d(__webpack_exports__,"Die",(function(){return Die})),__webpack_require__.d(__webpack_exports__,"IsTurnEnd",(function(){return IsTurnEnd})),__webpack_require__.d(__webpack_exports__,"IsPlayerControlled",(function(){return IsPlayerControlled})),__webpack_require__.d(__webpack_exports__,"IsEnemy",(function(){return IsEnemy})),__webpack_require__.d(__webpack_exports__,"Ai",(function(){return Ai})),__webpack_require__.d(__webpack_exports__,"LayerMap",(function(){return LayerMap})),__webpack_require__.d(__webpack_exports__,"LayerUnit",(function(){return LayerUnit})),__webpack_require__.d(__webpack_exports__,"SlowAttack",(function(){return SlowAttack})),__webpack_require__.d(__webpack_exports__,"FastAttack",(function(){return FastAttack})),__webpack_require__.d(__webpack_exports__,"IsDead",(function(){return IsDead})),__webpack_require__.d(__webpack_exports__,"DmgTile",(function(){return DmgTile})),__webpack_require__.d(__webpack_exports__,"AbilityList",(function(){return AbilityList})),__webpack_require__.d(__webpack_exports__,"AbilityGrabBagList",(function(){return AbilityGrabBagList})),__webpack_require__.d(__webpack_exports__,"AbilityTarget",(function(){return AbilityTarget})),__webpack_require__.d(__webpack_exports__,"AbilityAllowedDie",(function(){return AbilityAllowedDie})),__webpack_require__.d(__webpack_exports__,"AbilityFunction",(function(){return AbilityFunction})),__webpack_require__.d(__webpack_exports__,"AbilityPhase",(function(){return AbilityPhase})),__webpack_require__.d(__webpack_exports__,"AbilitySpeed",(function(){return AbilitySpeed})),__webpack_require__.d(__webpack_exports__,"AbilityStaminaCost",(function(){return AbilityStaminaCost})),__webpack_require__.d(__webpack_exports__,"AbilitySmallName",(function(){return AbilitySmallName})),__webpack_require__.d(__webpack_exports__,"AbilityRange",(function(){return AbilityRange})),__webpack_require__.d(__webpack_exports__,"AbilityDamage",(function(){return AbilityDamage})),__webpack_require__.d(__webpack_exports__,"AbilityEndsTurn",(function(){return AbilityEndsTurn})),__webpack_require__.d(__webpack_exports__,"ScenarioBattle",(function(){return ScenarioBattle})),__webpack_require__.d(__webpack_exports__,"ScenarioMessage",(function(){return ScenarioMessage})),__webpack_require__.d(__webpack_exports__,"ScenarioChoice",(function(){return ScenarioChoice})),__webpack_require__.d(__webpack_exports__,"HuntScenarios",(function(){return HuntScenarios}));var _ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js"),geotic__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/geotic/build/index.js"),lodash__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lodash/lodash.js"),_cache__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/state/cache.js"),_systems_abilities__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/systems/abilities.js"),_systems_movement__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/systems/movement.js"),rot_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rot-js/lib/index.js");function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return(_setPrototypeOf=Object.setPrototypeOf||function(o,p){return o.__proto__=p,o})(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){return!call||"object"!==_typeof(call)&&"function"!=typeof call?function(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self):call}function _getPrototypeOf(o){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(o){return o.__proto__||Object.getPrototypeOf(o)})(o)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var Appearance=function(_Component){_inherits(Appearance,_Component);var _super=_createSuper(Appearance);function Appearance(){return _classCallCheck(this,Appearance),_super.apply(this,arguments)}return Appearance}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Appearance,"properties",{color:"#ff0077",char:"?",background:"#000"});var Description=function(_Component2){_inherits(Description,_Component2);var _super2=_createSuper(Description);function Description(){return _classCallCheck(this,Description),_super2.apply(this,arguments)}return Description}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Description,"properties",{name:"No Name",description:"nothing"});var IsBlocking=function(_Component3){_inherits(IsBlocking,_Component3);var _super3=_createSuper(IsBlocking);function IsBlocking(){return _classCallCheck(this,IsBlocking),_super3.apply(this,arguments)}return IsBlocking}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),Position=function(_Component4){_inherits(Position,_Component4);var _super4=_createSuper(Position);function Position(){return _classCallCheck(this,Position),_super4.apply(this,arguments)}return _createClass(Position,[{key:"onAttached",value:function(){var locId="".concat(this.entity.position.x,",").concat(this.entity.position.y);Object(_cache__WEBPACK_IMPORTED_MODULE_3__.addCacheSet)("entitiesAtLocation",locId,this.entity.id)}},{key:"onDestroyed",value:function(){var locId="".concat(this.x,",").concat(this.y);Object(_cache__WEBPACK_IMPORTED_MODULE_3__.deleteCacheSet)("entitiesAtLocation",locId,this.entity.id)}}]),Position}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Position,"properties",{x:0,y:0});var Health=function(_Component5){_inherits(Health,_Component5);var _super5=_createSuper(Health);function Health(){return _classCallCheck(this,Health),_super5.apply(this,arguments)}return _createClass(Health,[{key:"onTakeDamage",value:function(evt){console.log("i've been hit!"),this.current-=evt.data.amount,console.log(this),console.log("ow"),this.current<=0&&(this.entity.remove(this.entity.position),this.entity.add(IsDead)),evt.handle()}}]),Health}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Health,"properties",{max:4,current:4});var Movement=function(_Component6){_inherits(Movement,_Component6);var _super6=_createSuper(Movement);function Movement(){return _classCallCheck(this,Movement),_super6.apply(this,arguments)}return _createClass(Movement,[{key:"onGainMovement",value:function(evt){this.movement+=evt.data,evt.handle()}},{key:"onGainDodge",value:function(evt){this.dodge+=evt.data,evt.handle()}},{key:"onTurnEnd",value:function(evt){this.movement=0,this.dodge=0}},{key:"onChangePosition",value:function(evt){this.x=evt.data.x,this.y=evt.data.y,evt.handle()}},{key:"onAttemptMove",value:function(evt){this.movement<=0&&this.dodge<=0?evt.handle():_systems_movement__WEBPACK_IMPORTED_MODULE_5__.AttemptMove(this,this.entity)&&(this.dodge>0?this.dodge=Math.max(0,this.dodge-1):this.movement-=1,evt.handle());this.x=0,this.y=0}}]),Movement}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Movement,"properties",{movement:0,dodge:0,x:0,y:0});var GainMovement=function(_Component7){_inherits(GainMovement,_Component7);var _super7=_createSuper(GainMovement);function GainMovement(){return _classCallCheck(this,GainMovement),_super7.apply(this,arguments)}return _createClass(GainMovement,[{key:"onTurnStart",value:function(evt){this.entity.fireEvent("gain-movement",this.amount)}}]),GainMovement}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(GainMovement,"properties",{amount:3});var Armour=function(_Component8){_inherits(Armour,_Component8);var _super8=_createSuper(Armour);function Armour(){return _classCallCheck(this,Armour),_super8.apply(this,arguments)}return Armour}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Armour,"properties",{max:0,current:0});var Stamina=function(_Component9){_inherits(Stamina,_Component9);var _super9=_createSuper(Stamina);function Stamina(){return _classCallCheck(this,Stamina),_super9.apply(this,arguments)}return _createClass(Stamina,[{key:"onAttached",value:function(){for(var x=0;x<this.max;x++)this.entity.add(Die);this.onRollDice()}},{key:"onTurnEnd",value:function(evt){console.log("doing turn end"),this.current=Math.min(this.max,this.current+Math.max(0,this.regen-this.used)),this.used=0,this.onRollDice()}},{key:"onRollDice",value:function(){for(var x=0;x<this.max;x++)this.entity.die[x].selected=!1,this.entity.die[x].exhausted=x>=this.current,this.entity.die[x].number=Object(lodash__WEBPACK_IMPORTED_MODULE_2__.random)(1,6)}},{key:"onUseStamina",value:function(evt){this.current=Math.max(this.current-evt.data,0)}},{key:"onUpdateStamina",value:function(){}}]),Stamina}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Stamina,"properties",{max:5,current:5,used:0,regen:4});var Die=function(_Component10){_inherits(Die,_Component10);var _super10=_createSuper(Die);function Die(){return _classCallCheck(this,Die),_super10.apply(this,arguments)}return _createClass(Die,[{key:"onExhaustSelected",value:function(evt){this.selected&&(this.entity.stamina.used++,this.entity.stamina.current--,this.exhausted=!0,this.selected=!1,this.entity.fireEvent("update-stamina"))}}]),Die}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(Die,"allowMultiple",!0),_defineProperty(Die,"properties",{number:0,selected:!1,exhausted:!1});var IsTurnEnd=function(_Component11){_inherits(IsTurnEnd,_Component11);var _super11=_createSuper(IsTurnEnd);function IsTurnEnd(){return _classCallCheck(this,IsTurnEnd),_super11.apply(this,arguments)}return _createClass(IsTurnEnd,[{key:"onTurnEnd",value:function(evt){this.destroy()}}]),IsTurnEnd}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),IsPlayerControlled=function(_Component12){_inherits(IsPlayerControlled,_Component12);var _super12=_createSuper(IsPlayerControlled);function IsPlayerControlled(){return _classCallCheck(this,IsPlayerControlled),_super12.apply(this,arguments)}return IsPlayerControlled}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),IsEnemy=function(_Component13){_inherits(IsEnemy,_Component13);var _super13=_createSuper(IsEnemy);function IsEnemy(){return _classCallCheck(this,IsEnemy),_super13.apply(this,arguments)}return IsEnemy}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(IsEnemy,"properties",{enemy:!0});var Ai=function(_Component14){_inherits(Ai,_Component14);var _super14=_createSuper(Ai);function Ai(){return _classCallCheck(this,Ai),_super14.apply(this,arguments)}return Ai}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),LayerMap=function(_Component15){_inherits(LayerMap,_Component15);var _super15=_createSuper(LayerMap);function LayerMap(){return _classCallCheck(this,LayerMap),_super15.apply(this,arguments)}return LayerMap}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),LayerUnit=function(_Component16){_inherits(LayerUnit,_Component16);var _super16=_createSuper(LayerUnit);function LayerUnit(){return _classCallCheck(this,LayerUnit),_super16.apply(this,arguments)}return LayerUnit}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),SlowAttack=function(_Component17){_inherits(SlowAttack,_Component17);var _super17=_createSuper(SlowAttack);function SlowAttack(){return _classCallCheck(this,SlowAttack),_super17.apply(this,arguments)}return SlowAttack}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),FastAttack=function(_Component18){_inherits(FastAttack,_Component18);var _super18=_createSuper(FastAttack);function FastAttack(){return _classCallCheck(this,FastAttack),_super18.apply(this,arguments)}return FastAttack}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),IsDead=function(_Component19){_inherits(IsDead,_Component19);var _super19=_createSuper(IsDead);function IsDead(){return _classCallCheck(this,IsDead),_super19.apply(this,arguments)}return IsDead}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),DmgTile=function(_Component20){_inherits(DmgTile,_Component20);var _super20=_createSuper(DmgTile);function DmgTile(){return _classCallCheck(this,DmgTile),_super20.apply(this,arguments)}return DmgTile}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(DmgTile,"properties",{dmg:1});var AbilityList=function(_Component21){_inherits(AbilityList,_Component21);var _super21=_createSuper(AbilityList);function AbilityList(){return _classCallCheck(this,AbilityList),_super21.apply(this,arguments)}return _createClass(AbilityList,[{key:"onAttached",value:function(){var abilities=[];this.abilities.forEach((function(abil){for(var prefAbil=_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab(abil[0]),x=0;x<abil[1];x++)abilities.push(prefAbil)})),rot_js__WEBPACK_IMPORTED_MODULE_6__.RNG.shuffle(abilities),this.entity.abilityGrabBagList.abilities=abilities}},{key:"onTurnEnd",value:function(evt){0==this.entity.abilityGrabBagList.abilities.length&&this.onAttached()}}]),AbilityList}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityList,"properties",{abilities:[]});var AbilityGrabBagList=function(_Component22){_inherits(AbilityGrabBagList,_Component22);var _super22=_createSuper(AbilityGrabBagList);function AbilityGrabBagList(){return _classCallCheck(this,AbilityGrabBagList),_super22.apply(this,arguments)}return AbilityGrabBagList}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityGrabBagList,"properties",{abilities:[]});var AbilityTarget=function(_Component23){_inherits(AbilityTarget,_Component23);var _super23=_createSuper(AbilityTarget);function AbilityTarget(){return _classCallCheck(this,AbilityTarget),_super23.apply(this,arguments)}return AbilityTarget}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityTarget,"properties",{coords:[[0,0]]});var AbilityAllowedDie=function(_Component24){_inherits(AbilityAllowedDie,_Component24);var _super24=_createSuper(AbilityAllowedDie);function AbilityAllowedDie(){return _classCallCheck(this,AbilityAllowedDie),_super24.apply(this,arguments)}return AbilityAllowedDie}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityAllowedDie,"properties",{allowed:[1,2,3,4,5,6]});var AbilityFunction=function(_Component25){_inherits(AbilityFunction,_Component25);var _super25=_createSuper(AbilityFunction);function AbilityFunction(){return _classCallCheck(this,AbilityFunction),_super25.apply(this,arguments)}return AbilityFunction}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityFunction,"properties",{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_4__.Ability});var AbilityPhase=function(_Component26){_inherits(AbilityPhase,_Component26);var _super26=_createSuper(AbilityPhase);function AbilityPhase(){return _classCallCheck(this,AbilityPhase),_super26.apply(this,arguments)}return AbilityPhase}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityPhase,"properties",{phase:"Any"});var AbilitySpeed=function(_Component27){_inherits(AbilitySpeed,_Component27);var _super27=_createSuper(AbilitySpeed);function AbilitySpeed(){return _classCallCheck(this,AbilitySpeed),_super27.apply(this,arguments)}return AbilitySpeed}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilitySpeed,"properties",{speed:"Instant"});var AbilityStaminaCost=function(_Component28){_inherits(AbilityStaminaCost,_Component28);var _super28=_createSuper(AbilityStaminaCost);function AbilityStaminaCost(){return _classCallCheck(this,AbilityStaminaCost),_super28.apply(this,arguments)}return AbilityStaminaCost}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityStaminaCost,"properties",{amount:1});var AbilitySmallName=function(_Component29){_inherits(AbilitySmallName,_Component29);var _super29=_createSuper(AbilitySmallName);function AbilitySmallName(){return _classCallCheck(this,AbilitySmallName),_super29.apply(this,arguments)}return AbilitySmallName}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilitySmallName,"properties",{smallName:"abl"});var AbilityRange=function(_Component30){_inherits(AbilityRange,_Component30);var _super30=_createSuper(AbilityRange);function AbilityRange(){return _classCallCheck(this,AbilityRange),_super30.apply(this,arguments)}return AbilityRange}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityRange,"properties",{range:1});var AbilityDamage=function(_Component31){_inherits(AbilityDamage,_Component31);var _super31=_createSuper(AbilityDamage);function AbilityDamage(){return _classCallCheck(this,AbilityDamage),_super31.apply(this,arguments)}return AbilityDamage}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(AbilityDamage,"properties",{dmg:1});var AbilityEndsTurn=function(_Component32){_inherits(AbilityEndsTurn,_Component32);var _super32=_createSuper(AbilityEndsTurn);function AbilityEndsTurn(){return _classCallCheck(this,AbilityEndsTurn),_super32.apply(this,arguments)}return AbilityEndsTurn}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component),ScenarioBattle=function(_Component33){_inherits(ScenarioBattle,_Component33);var _super33=_createSuper(ScenarioBattle);function ScenarioBattle(){return _classCallCheck(this,ScenarioBattle),_super33.apply(this,arguments)}return ScenarioBattle}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(ScenarioBattle,"properties",{enemies:[["Goblin",6],["Goblin Shaman",1]],allies:[]});var ScenarioMessage=function(_Component34){_inherits(ScenarioMessage,_Component34);var _super34=_createSuper(ScenarioMessage);function ScenarioMessage(){return _classCallCheck(this,ScenarioMessage),_super34.apply(this,arguments)}return ScenarioMessage}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(ScenarioMessage,"properties",{message:"Test scenario pls ignore"});var ScenarioChoice=function(_Component35){_inherits(ScenarioChoice,_Component35);var _super35=_createSuper(ScenarioChoice);function ScenarioChoice(){return _classCallCheck(this,ScenarioChoice),_super35.apply(this,arguments)}return ScenarioChoice}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(ScenarioChoice,"allowMultiple",!0),_defineProperty(ScenarioChoice,"properties",{choiceMessage:"This is a test",scenario:"TestScenario"});var HuntScenarios=function(_Component36){_inherits(HuntScenarios,_Component36);var _super36=_createSuper(HuntScenarios);function HuntScenarios(){return _classCallCheck(this,HuntScenarios),_super36.apply(this,arguments)}return HuntScenarios}(geotic__WEBPACK_IMPORTED_MODULE_1__.Component);_defineProperty(HuntScenarios,"properties",{scenarios:["Scenario"]})},"./src/state/dungeon.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"dungeonMap",(function(){return dungeonMap})),__webpack_require__.d(__webpack_exports__,"makeMap",(function(){return makeMap})),__webpack_require__.d(__webpack_exports__,"FetchFreeTile",(function(){return FetchFreeTile}));var _state_ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js"),lodash__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/lodash/lodash.js"),_lib_canvas__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/lib/canvas.js"),rot_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/index.js"),_cache__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/state/cache.js"),_component__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/state/component.js"),_lib_grid__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/lib/grid.js"),layerMapEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createQuery({all:[_component__WEBPACK_IMPORTED_MODULE_5__.Position,_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,_component__WEBPACK_IMPORTED_MODULE_5__.LayerMap]}),layerUnitEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createQuery({all:[_component__WEBPACK_IMPORTED_MODULE_5__.Position,_component__WEBPACK_IMPORTED_MODULE_5__.Appearance,_component__WEBPACK_IMPORTED_MODULE_5__.LayerUnit]}),dungeonMapGen=new rot_js__WEBPACK_IMPORTED_MODULE_3__.Map.Arena(_lib_canvas__WEBPACK_IMPORTED_MODULE_2__.grid.map.width,_lib_canvas__WEBPACK_IMPORTED_MODULE_2__.grid.map.height),dungeonMap=[],makeMap=function(){CleanUp(),dungeonMapGen.create((function(x,y,wall){wall?_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab("Wall").add(_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:x,y:y}):_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab("Floor").add(_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:x,y:y})}))},CleanUp=function(){layerMapEntities.get().forEach((function(tile){tile.destroy()})),layerUnitEntities.get().forEach((function(unit){unit.destroy()}))},FetchFreeTile=function(){var anyFree=CreateFreeSpaceList();return Object(lodash__WEBPACK_IMPORTED_MODULE_1__.sample)(anyFree)},CreateFreeSpaceList=function(){var emptyTiles=[];return layerMapEntities.get().forEach((function(entity){entity.isBlocking||1==Object(_cache__WEBPACK_IMPORTED_MODULE_4__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_6__.toLocId)({x:entity.position.x,y:entity.position.y})).size&&emptyTiles.push(entity)})),emptyTiles}},"./src/state/ecs.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"messageLog",(function(){return messageLog})),__webpack_require__.d(__webpack_exports__,"addLog",(function(){return addLog}));var geotic__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/geotic/build/index.js"),_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/state/component.js"),_prefab__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/state/prefab.js"),ecs=new geotic__WEBPACK_IMPORTED_MODULE_0__.Engine,world=ecs.createWorld();console.log("got here first"),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Appearance),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Armour),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Description),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Health),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.IsBlocking),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.IsDead),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.IsPlayerControlled),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.IsEnemy),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.LayerMap),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.LayerUnit),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Movement),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Position),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Stamina),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Die),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.SlowAttack),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.FastAttack),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.DmgTile),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.IsTurnEnd),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.Ai),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityList),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityFunction),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityPhase),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilitySpeed),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityStaminaCost),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilitySmallName),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityTarget),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityAllowedDie),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.GainMovement),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityRange),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityDamage),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityEndsTurn),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.AbilityGrabBagList),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.ScenarioBattle),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.ScenarioChoice),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.ScenarioMessage),ecs.registerComponent(_component__WEBPACK_IMPORTED_MODULE_1__.HuntScenarios),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Tile),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Being),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Scenario),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Wall),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Floor),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.PlayerBeing),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Mob),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Goblin),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.OrcWarrior),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.GoblinShaman),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Ability),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityDoNothing),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityMove),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityDodge),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilitySpearThrust),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilitySwordJab),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilitySwordSwing),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityDoubleAxeSwing),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityAxeDecapitate),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.AbilityFlameHands),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.OrcTestScenario),ecs.registerPrefab(_prefab__WEBPACK_IMPORTED_MODULE_2__.Hunt);var messageLog=["","Welcome to Gobs 'O Goblins!",""],addLog=function(text){messageLog.unshift(text)};__webpack_exports__.default=world},"./src/state/helpMenu.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DrawHelpMenu",(function(){return DrawHelpMenu})),__webpack_require__.d(__webpack_exports__,"HideHelpMenu",(function(){return HideHelpMenu})),__webpack_require__.d(__webpack_exports__,"ShowAbilityInfo",(function(){return ShowAbilityInfo}));var _lib_canvas__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/lib/canvas.js"),DrawHelpMenu=function(){MakeVisible();_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.displayHelp.drawText(2,5,"Welcome to my bad game\nExample, hit [1] key to activate die\nhit [q] key to activate movement\nyou now have movement pts in top left\nnow you can move with arrow keys\ndon't forget your other char [n]\n\nEnemies attack at end of playerdefendturn\nyou need to use dodge to get out of red attacks\nYou regen 4 stamina minus the amount used this turn\nplayer attacks resolve at end of the playerattackturn\n\nHOTKEYS:\nArrow Keys to move\nEnter to end turn / confirm target\nn: select next character\n1-6 are to select stamina dice\nqwerty keys selects abilites\nshift+qwerty keys for info\nz: shows enemy numbers matched on right\nc: shows dmg that will hit tile\nEscape to exit this and most menus")},HideHelpMenu=function(){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.displayHelp.clear(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.divHelp.style.visibility="hidden"},MakeVisible=function(){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.divHelp.style.visibility="visible";var banner="#".repeat(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.helpMenu.width);_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.displayHelp.drawText(0,0,banner)},ShowAbilityInfo=function(abil){MakeVisible();var toWrite=WriteAbility(abil);_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.displayHelp.drawText(2,5,toWrite)},WriteAbility=function(abil){var toWrite="";return toWrite+="\n"+abil.description.name,toWrite+="\n"+abil.description.description,toWrite+="\n"+abil.abilityPhase.phase,toWrite+="\n"+abil.abilityPhase.speed}},"./src/state/prefab.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Tile",(function(){return Tile})),__webpack_require__.d(__webpack_exports__,"Being",(function(){return Being})),__webpack_require__.d(__webpack_exports__,"Ability",(function(){return Ability})),__webpack_require__.d(__webpack_exports__,"Scenario",(function(){return Scenario})),__webpack_require__.d(__webpack_exports__,"Wall",(function(){return Wall})),__webpack_require__.d(__webpack_exports__,"Floor",(function(){return Floor})),__webpack_require__.d(__webpack_exports__,"PlayerBeing",(function(){return PlayerBeing})),__webpack_require__.d(__webpack_exports__,"Mob",(function(){return Mob})),__webpack_require__.d(__webpack_exports__,"Goblin",(function(){return Goblin})),__webpack_require__.d(__webpack_exports__,"GoblinShaman",(function(){return GoblinShaman})),__webpack_require__.d(__webpack_exports__,"OrcWarrior",(function(){return OrcWarrior})),__webpack_require__.d(__webpack_exports__,"AbilityMove",(function(){return AbilityMove})),__webpack_require__.d(__webpack_exports__,"AbilityDodge",(function(){return AbilityDodge})),__webpack_require__.d(__webpack_exports__,"AbilityDoNothing",(function(){return AbilityDoNothing})),__webpack_require__.d(__webpack_exports__,"AbilitySpearThrust",(function(){return AbilitySpearThrust})),__webpack_require__.d(__webpack_exports__,"AbilitySwordJab",(function(){return AbilitySwordJab})),__webpack_require__.d(__webpack_exports__,"AbilitySwordSwing",(function(){return AbilitySwordSwing})),__webpack_require__.d(__webpack_exports__,"AbilityDoubleAxeSwing",(function(){return AbilityDoubleAxeSwing})),__webpack_require__.d(__webpack_exports__,"AbilityFlameHands",(function(){return AbilityFlameHands})),__webpack_require__.d(__webpack_exports__,"AbilityAxeDecapitate",(function(){return AbilityAxeDecapitate})),__webpack_require__.d(__webpack_exports__,"Hunt",(function(){return Hunt})),__webpack_require__.d(__webpack_exports__,"OrcTestScenario",(function(){return OrcTestScenario}));__webpack_require__("./src/state/component.js");var _systems_abilities__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/systems/abilities.js"),Tile={name:"Tile",components:[{type:"Appearance"},{type:"Description"},{type:"LayerMap"}]},Being={name:"Being",components:[{type:"Appearance"},{type:"Description"},{type:"Health"},{type:"IsBlocking"},{type:"LayerUnit"},{type:"Movement"},{type:"Armour"},{type:"Stamina"},{type:"AbilityGrabBagList"},{type:"AbilityList"}]},Ability={name:"Ability",components:[{type:"Description",properties:{name:"Generic Ability",description:"used for testing as base template"}},{type:"AbilityPhase"},{type:"AbilitySpeed"},{type:"AbilityStaminaCost"},{type:"AbilityFunction"},{type:"AbilitySmallName"},{type:"AbilityTarget"},{type:"AbilityAllowedDie"},{type:"AbilityRange"},{type:"AbilityDamage"}]},Scenario={name:"Scenario",components:[{type:"ScenarioMessage"},{type:"ScenarioBattle"}]},Wall={name:"Wall",inherit:["Tile"],components:[{type:"IsBlocking"},{type:"Appearance",properties:{char:"#",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]},Floor={name:"Floor",inherit:["Tile"],components:[{type:"Appearance",properties:{char:".",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]},PlayerBeing={name:"PlayerBeing",inherit:["Being"],components:[{type:"IsPlayerControlled"},{type:"Appearance",properties:{char:"@"}},{type:"AbilityList",properties:{abilities:[["AbilityMove",1],["AbilityDodge",1],["AbilitySwordJab",1],["AbilitySwordSwing",1]]}}]},Mob={name:"Mob",inherit:["Being"],components:[{type:"Ai"},{type:"GainMovement"}]},Goblin={name:"Goblin",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"g",color:"green"}},{type:"Description",properties:{name:"Goblin",description:"A lowly Goblin"}},{type:"AbilityList",properties:{abilities:[["AbilitySpearThrust",1],["AbilityDoNothing",1]]}},{type:"Health",properties:{max:2,current:2}},{type:"Stamina",properties:{max:2,current:2,used:0,regen:2}}]},GoblinShaman={name:"Goblin Shaman",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"s",color:"green"}},{type:"Description",properties:{name:"Goblin Shaman",description:"A leader of a Goblin tribe"}},{type:"AbilityList",properties:{abilities:[["AbilityFlameHands",1],["AbilityDoNothing",2]]}},{type:"Health",properties:{max:3,current:3}},{type:"Stamina",properties:{max:2,current:2,used:0,regen:2}}]},OrcWarrior={name:"Orc Warrior",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"o",color:"green"}},{type:"Description",properties:{name:"Orc Warrior",description:"A fearsome Orc wielding axees"}},{type:"AbilityList",properties:{abilities:[["AbilityDoubleAxeSwing",1],["AbilityAxeDecapitate",1]]}},{type:"Health",properties:{max:8,current:8}},{type:"Stamina",properties:{max:4,current:4,used:0,regen:4}}]},AbilityMove={name:"AbilityMove",inherit:["Ability"],components:[{type:"Description",properties:{name:"Move",description:"exhausts 1 die to give it's face value for movement points"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityMove}},{type:"AbilitySmallName",properties:{smallName:"MOV"}}]},AbilityDodge={name:"AbilityDodge",inherit:["Ability"],components:[{type:"Description",properties:{name:"Dodge",description:"exhausts a pair to give 1 dodge point"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityDodge}},{type:"AbilitySmallName",properties:{smallName:"DDG"}},{type:"AbilityStaminaCost",properties:{amount:2}}]},AbilityDoNothing={name:"AbilityDoNothing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Does Nothing",description:"Rest this turn"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityDoNothing}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"RST"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[1,2,3,4,5,6]}},{type:"AbilityRange",properties:{range:5}}]},AbilitySpearThrust={name:"AbilitySpearThrust",inherit:["Ability"],components:[{type:"Description",properties:{name:"Spear Thrust",description:"exhausts 5,6 to do a slow attack on a 2x1 1 dmg"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilitySpearThrust}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"STH"}},{type:"AbilityTarget",properties:{coords:[[0,0],[0,-1]]}},{type:"AbilityAllowedDie",properties:{allowed:[5,6]}},{type:"AbilityRange",properties:{range:2}}]},AbilitySwordJab={name:"AbilitySwordJab",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Jab",description:"exhausts a pair of 4,5,6 to do a slow attack on a single tile for 2 dmg"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilitySwordJab}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SJB"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[4,5,6]}},{type:"AbilityDamage",properties:{dmg:2}},{type:"AbilityEndsTurn"}]},AbilitySwordSwing={name:"AbilitySwordSwing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Swing",description:"exhausts a 5,6 to do a slow attack on a 2x1 shape for 1 dmg"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilitySwordSwing}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SSW"}},{type:"AbilityTarget",properties:{coords:[[-1,0],[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[5,6]}},{type:"AbilityEndsTurn"}]},AbilityDoubleAxeSwing={name:"AbilityDoubleAxeSwing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Double Axe Swing",description:"swings both your axes in two massive arcs dealing 2 dmg"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityDoubleAxeSwing}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"DAS"}},{type:"AbilityTarget",properties:{coords:[[-1,0],[0,0],[1,0],[-1,1],[1,1]]}},{type:"AbilityAllowedDie",properties:{allowed:[5,6]}},{type:"AbilityStaminaCost",properties:{amount:3}},{type:"AbilityDamage",properties:{dmg:2}},{type:"AbilityEndsTurn"}]},AbilityFlameHands={name:"AbilityFlameHands",inherit:["Ability"],components:[{type:"Description",properties:{name:"Flame Hands",description:"a cone shaped blast of fire using a straight 3 of dice"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityFlameHands}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"FLH"}},{type:"AbilityTarget",properties:{coords:[[0,0],[-1,-1],[0,-1],[1,-1],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2]]}},{type:"AbilityAllowedDie",properties:{allowed:[1,2,3,4,5,6]}},{type:"AbilityStaminaCost",properties:{amount:3}},{type:"AbilityDamage",properties:{dmg:2}},{type:"AbilityEndsTurn"}]},AbilityAxeDecapitate={name:"AbilityAxeDecapitate",inherit:["Ability"],components:[{type:"Description",properties:{name:"Axe Decapitate",description:"Swings an axe directly at the targets head for 3 dmg"}},{type:"AbilityFunction",properties:{function:_systems_abilities__WEBPACK_IMPORTED_MODULE_1__.AbilityAxeDecapitate}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"DAC"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[6]}},{type:"AbilityStaminaCost",properties:{amount:4}},{type:"AbilityDamage",properties:{dmg:3}},{type:"AbilityEndsTurn"}]},Hunt={name:"Hunt",components:[{type:"description"},{type:"HuntScenarios",properties:{scenarios:["Scenario","Orc Test Scenario"]}}]},OrcTestScenario={name:"Orc Test Scenario",inherit:["Scenario"],components:[{type:"ScenarioBattle",properties:{enemies:[["Orc Warrior",4]],allies:[["Goblin",3]]}}]}},"./src/state/scenario.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"HuntList",(function(){return HuntList})),__webpack_require__.d(__webpack_exports__,"GetCurrentHunt",(function(){return GetCurrentHunt})),__webpack_require__.d(__webpack_exports__,"GetCurrentScenario",(function(){return GetCurrentScenario})),__webpack_require__.d(__webpack_exports__,"StartNextScenario",(function(){return StartNextScenario})),__webpack_require__.d(__webpack_exports__,"StartHunt",(function(){return StartHunt})),__webpack_require__.d(__webpack_exports__,"SetupHunts",(function(){return SetupHunts}));var CurrentHunt,_ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js"),HuntList={},CurrentHuntPhase=0,GetCurrentHunt=function(){return CurrentHunt},GetCurrentScenario=function(){return CurrentHunt.huntScenarios.scenarios[CurrentHuntPhase]},StartNextScenario=function(){return++CurrentHuntPhase>=CurrentHunt.huntScenarios.scenarios.length},StartHunt=function(huntName){CurrentHunt=HuntList[huntName],console.log(CurrentHunt)},SetupHunts=function(){var newHunt=_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab("Hunt"),scenarios=[];console.log(newHunt);for(var x=0;x<newHunt.huntScenarios.scenarios.length;x++){var newScen=_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab(newHunt.huntScenarios.scenarios[x]);console.log(newScen),scenarios.push(newScen),console.log(scenarios)}newHunt.huntScenarios.scenarios=scenarios,console.log(newHunt.huntScenarios.scenarios),HuntList.Hunt=newHunt}},"./src/state/town.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Town",(function(){return Town}));var _ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js");function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}__webpack_require__("./node_modules/lodash/lodash.js").times;var villageColors=["green","blue","red","purple","white","yellow","pink"],Town=function(){function Town(population,townName){!function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,Town),this.CurrrentActivePlayer=0,this.CurrrentActivePlayerIndex=0,this.ActiveHunters=[],this.townName=townName,this.population={};for(var x=0;x<population;x++){var newVillager=_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createPrefab("PlayerBeing",{appearance:{char:"@",color:villageColors[x]}});this.population[newVillager.id]=newVillager}}var Constructor,protoProps,staticProps;return Constructor=Town,(protoProps=[{key:"GetVillager",value:function(eid){return this.population[eid]}},{key:"GetActive",value:function(){return this.GetVillager(this.CurrrentActivePlayer)}},{key:"GetNextActive",value:function(){this.CurrrentActivePlayerIndex+1>=this.ActiveHunters.length?this.CurrrentActivePlayerIndex=0:this.CurrrentActivePlayerIndex++,this.CurrrentActivePlayer=this.ActiveHunters[this.CurrrentActivePlayerIndex]}},{key:"GetHunters",value:function(){return this.ActiveHunters}},{key:"SetHunters",value:function(){for(var hunts=[],_i=0,_Object$entries=Object.entries(this.population);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0];_Object$entries$_i[1],hunts.push(key)}this.CurrrentActivePlayer=hunts[0],this.ActiveHunters=hunts}}])&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Town}(),gameTown=new Town(4,"beep");__webpack_exports__.default=gameTown},"./src/systems/abilities.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Ability",(function(){return Ability})),__webpack_require__.d(__webpack_exports__,"AbilityDoNothing",(function(){return AbilityDoNothing})),__webpack_require__.d(__webpack_exports__,"AbilityMove",(function(){return AbilityMove})),__webpack_require__.d(__webpack_exports__,"AbilityDodge",(function(){return AbilityDodge})),__webpack_require__.d(__webpack_exports__,"AbilitySwordJab",(function(){return AbilitySwordJab})),__webpack_require__.d(__webpack_exports__,"AbilitySwordSwing",(function(){return AbilitySwordSwing})),__webpack_require__.d(__webpack_exports__,"AbilitySpearThrust",(function(){return AbilitySpearThrust})),__webpack_require__.d(__webpack_exports__,"AbilityDoubleAxeSwing",(function(){return AbilityDoubleAxeSwing})),__webpack_require__.d(__webpack_exports__,"AbilityFlameHands",(function(){return AbilityFlameHands})),__webpack_require__.d(__webpack_exports__,"AbilityAxeDecapitate",(function(){return AbilityAxeDecapitate})),__webpack_require__.d(__webpack_exports__,"GetSelectedDie",(function(){return GetSelectedDie})),__webpack_require__.d(__webpack_exports__,"GetAllDie",(function(){return GetAllDie}));var _state_ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js"),_yahtzee__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/systems/yahtzee.js"),_index__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/index.js"),_state_component__WEBPACK_IMPORTED_MODULE_5__=(__webpack_require__("./src/state/cache.js"),__webpack_require__("./src/lib/grid.js"),__webpack_require__("./src/state/component.js"));function _toConsumableArray(arr){return function(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var Ability={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return _yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckSingles(dice)},onUse:function(ability,entity){GetSelectedDie(entity),entity.fireEvent("gain-movement",3),entity.fireEvent("exhaust-selected")}},AbilityDoNothing={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return _yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckSingles(dice)},onUse:function(ability,entity){}},AbilityMove={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return _yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckSingles(dice)},onUse:function(ability,entity){for(var selected=GetSelectedDie(entity),toGain=0,x=1;x<7;x++)selected[x]&&1==selected[x]&&(toGain=x);entity.fireEvent("gain-movement",toGain),entity.fireEvent("exhaust-selected")}},AbilityDodge={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return _yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckDoubles(dice)},onUse:function(ability,entity){entity.fireEvent("gain-dodge",1),entity.fireEvent("exhaust-selected")}},AbilitySwordJab={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckDoubles(dice,ability.abilityAllowedDie.allowed)},onUse:GenericSlowAttack,onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}},AbilitySwordSwing={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckSingles(dice,ability.abilityAllowedDie.allowed)},onUse:GenericSlowAttack,onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}},AbilitySpearThrust={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckSingles(dice,ability.abilityAllowedDie.allowed)},onUse:function(ability,entity){var target=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,coords=RotateCoords(ability,entity,target);coords.forEach((function(coord){var newDmgTile=_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createEntity();newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:target.x+coord[0],y:target.y+coord[1]}),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.SlowAttack),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.DmgTile)})),entity.fireEvent("exhaust-selected"),ability.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.AbilityEndsTurn)&&entity.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)},onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}},AbilityDoubleAxeSwing={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckDoubles(dice,ability.abilityAllowedDie.allowed)},onUse:GenericSlowAttack,onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}},AbilityFlameHands={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckStraight(dice,3)},onUse:GenericSlowAttack,onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}},AbilityAxeDecapitate={canUse:function(ability,entity){var dice=arguments.length>2&&void 0!==arguments[2]?arguments[2]:GetSelectedDie(entity);return!entity.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)&&_yahtzee__WEBPACK_IMPORTED_MODULE_1__.CheckDoubles(dice,ability.abilityAllowedDie.allowed)},onUse:function(ability,entity){var target=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,coords=RotateCoords(ability,entity,target);coords.forEach((function(coord){var newDmgTile=_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createEntity();newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:target.x+coord[0],y:target.y+coord[1]}),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.FastAttack),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.DmgTile,{dmg:ability.abilityDamage.dmg})})),entity.fireEvent("exhaust-selected"),ability.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.AbilityEndsTurn)&&entity.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)},onTarget:function(ability,entity){Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedAbility)(ability),Object(_index__WEBPACK_IMPORTED_MODULE_2__.SetQueuedEntity)(entity),Object(_index__WEBPACK_IMPORTED_MODULE_2__.ExamineTargetEnable)("targeting")}};function GenericSlowAttack(ability,entity){var target=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,coords=RotateCoords(ability,entity,target);coords.forEach((function(coord){var newDmgTile=_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.createEntity();newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.Position,{x:target.x+coord[0],y:target.y+coord[1]}),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.SlowAttack),newDmgTile.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.DmgTile,{dmg:ability.abilityDamage.dmg})})),entity.fireEvent("exhaust-selected"),ability.has(_state_component__WEBPACK_IMPORTED_MODULE_5__.AbilityEndsTurn)&&entity.add(_state_component__WEBPACK_IMPORTED_MODULE_5__.IsTurnEnd)}var GetSelectedDie=function(entity){for(var dieList=[],x=0;x<entity.die.length;x++)entity.die[x].selected&&!entity.die[x].exhausted&&dieList.push(entity.die[x].number);dieList.sort();var counts={};return dieList.forEach((function(x){counts[x]=(counts[x]||0)+1})),counts},GetAllDie=function(entity){for(var dieList=[],x=0;x<entity.die.length;x++)entity.die[x].exhausted||dieList.push(entity.die[x].number);dieList.sort();var counts={};return dieList.forEach((function(x){counts[x]=(counts[x]||0)+1})),counts},RotateCoords=function(ability,entity,target){var diffX=target.x-entity.position.x,diffY=target.y-entity.position.y,coords=ability.abilityTarget.coords;return diffY<=-1||(diffY>=1?coords=ConvertCoordsDown(coords):diffX<=-1?coords=ConvertCoordsLeft(coords):diffX>=1&&(coords=ConvertCoordsRight(coords))),coords},ConvertCoordsRight=function(coords){var newRight=[];return coords.forEach((function(co){var holder=[];holder.push(co[1]),holder.push(co[0]),holder[0]=-1*holder[0],holder[1]=1*holder[1],newRight.push(holder)})),newRight},ConvertCoordsLeft=function(coords){var newRight=[];return coords.forEach((function(co){var holder=[];holder.push(co[1]),holder.push(co[0]),holder[1]=-1*holder[1],newRight.push(holder)})),newRight},ConvertCoordsDown=function(coords){var newRight=[];return coords.forEach((function(co){var holder=[];(holder=_toConsumableArray(co))[0]=-1*holder[0],holder[1]=-1*holder[1],newRight.push(holder)})),newRight}},"./src/systems/ai.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"DoAiTurnAttack",(function(){return DoAiTurnAttack}));__webpack_require__("./src/systems/abilities.js");var _state_cache__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/state/cache.js"),_state_ecs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/state/ecs.js"),_state_component__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/state/component.js"),_pathfinding__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/systems/pathfinding.js"),_lib_grid__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/lib/grid.js"),DoAiTurnAttack=function(entity){if(entity.abilityGrabBagList.abilities.length>0){var abilitiesToUse=entity.abilityGrabBagList.abilities.pop();console.log(abilitiesToUse.description),ChooseAiAttack(entity,abilitiesToUse)}},ChooseAiAttack=function(entity,abilityToUse){var attacked=!1;console.log("Doing mob attack: ");for(var x=0;x<2;x++){var target=Object(_pathfinding__WEBPACK_IMPORTED_MODULE_4__.AiPathfind)(entity);console.log("our target is"),console.log(target.toString()),console.log(target.length);for(var noAlly=!0,entityIsEnemy=entity.has(_state_component__WEBPACK_IMPORTED_MODULE_3__.IsEnemy),coord=0;coord<target.length;coord++){console.log(target[coord][0]);var entitiesAtLoc=Object(_state_cache__WEBPACK_IMPORTED_MODULE_1__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_5__.toLocId)({x:target[coord][0],y:target[coord][1]}));entitiesAtLoc=Array.from(entitiesAtLoc);for(var ents=0;ents<entitiesAtLoc.length;ents++){var entityAtLoc=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.getEntity(entitiesAtLoc[ents]);console.log(entityAtLoc.has(_state_component__WEBPACK_IMPORTED_MODULE_3__.IsEnemy)),entityAtLoc.has(_state_component__WEBPACK_IMPORTED_MODULE_3__.LayerUnit)&&entityAtLoc.has(_state_component__WEBPACK_IMPORTED_MODULE_3__.IsEnemy)==entityIsEnemy&&entity.id!=entitiesAtLoc[ents]&&(noAlly=!1)}}if(target.length>=1&&target.length<=abilityToUse.abilityRange.range&&!attacked&&Object(_pathfinding__WEBPACK_IMPORTED_MODULE_4__.CheckStraightLine)(target,{x:entity.position.x,y:entity.position.y})&&noAlly){console.log("In Range");var targ=target.pop();console.log(targ.toString()),abilityToUse.abilityFunction.function.onUse(abilityToUse,entity,{x:targ[0],y:targ[1]}),attacked=!0}target.length>1&&!attacked&&(console.log("Not In Range so we move"),target.length>1&&MoveForward(entity,target))}},MoveForward=function(entity,target){entity.fireEvent("gain-movement",2);for(var y=entity.movement.movement,x=0;x<y;x++)if(target&&target.length>1){var nextStep=target.pop();entity.movement.x=nextStep[0]-entity.position.x,entity.movement.y=nextStep[1]-entity.position.y;entity.fireEvent("attempt-move")}};Object.defineProperty(Array.prototype,"shuffle",{value:function(){for(var i=this.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1)),_ref=[this[j],this[i]];this[i]=_ref[0],this[j]=_ref[1]}return this}})},"./src/systems/movement.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AttemptMove",(function(){return AttemptMove}));var _state_ecs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/ecs.js"),_state_cache__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__("./src/state/component.js"),__webpack_require__("./src/lib/canvas.js"),__webpack_require__("./src/state/cache.js")),_lib_grid__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/lib/grid.js");function _createForOfIteratorHelper(o,allowArrayLike){var it;if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(it=function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function(){};return{s:F,n:function(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function(){it=o[Symbol.iterator]()},n:function(){var step=it.next();return normalCompletion=step.done,step},e:function(_e2){didErr=!0,err=_e2},f:function(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var AttemptMove=function(moveComp,entity){var mx=moveComp.x,my=moveComp.y;mx=entity.position.x+mx,my=entity.position.y+my;var _step,blockers=[],fastAttacks=[],_iterator=_createForOfIteratorHelper(Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.readCacheSet)("entitiesAtLocation","".concat(mx,",").concat(my)));try{for(_iterator.s();!(_step=_iterator.n()).done;){var eId=_step.value;_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.getEntity(eId).isBlocking&&blockers.push(eId)}}catch(err){_iterator.e(err)}finally{_iterator.f()}if(blockers.length>=1)return!1;var _step2,_iterator2=_createForOfIteratorHelper(Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toLocId)({x:entity.position.x,y:entity.position.y})));try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _eId=_step2.value;_state_ecs__WEBPACK_IMPORTED_MODULE_0__.default.getEntity(_eId).fastAttack&&fastAttacks.push(entity)}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}return!(fastAttacks.length>=1&&entity.movement.dodge<1)&&(Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.deleteCacheSet)("entitiesAtLocation","".concat(entity.position.x,",").concat(entity.position.y),entity.id),Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.addCacheSet)("entitiesAtLocation","".concat(mx,",").concat(my),entity.id),entity.position.x=mx,entity.position.y=my,!0)}},"./src/systems/pathfinding.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AiPathfind",(function(){return AiPathfind})),__webpack_require__.d(__webpack_exports__,"AiPathEmptyTile",(function(){return AiPathEmptyTile})),__webpack_require__.d(__webpack_exports__,"CheckStraightLine",(function(){return CheckStraightLine}));var _state_cache__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/state/cache.js"),_state_ecs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/state/ecs.js"),_state_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/state/component.js"),rot_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rot-js/lib/index.js"),_lib_grid__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/lib/grid.js");function _toArray(arr){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var allyEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_2__.Position,_state_component__WEBPACK_IMPORTED_MODULE_2__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_2__.LayerUnit],none:[_state_component__WEBPACK_IMPORTED_MODULE_2__.IsEnemy]}),enemyEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_2__.Position,_state_component__WEBPACK_IMPORTED_MODULE_2__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_2__.LayerUnit,_state_component__WEBPACK_IMPORTED_MODULE_2__.IsEnemy],none:[_state_component__WEBPACK_IMPORTED_MODULE_2__.IsDead]}),MakeDijkstra=function(x,y){return new rot_js__WEBPACK_IMPORTED_MODULE_3__.Path.Dijkstra(x,y,passableCallback,{topology:4})},pathingUnit={},AiPathfind=function(entity){console.log(entity),pathingUnit=entity;var dijkstra=MakeDijkstra(entity.position.x,entity.position.y),target=FindClosestTarget(dijkstra,entity);return target.pop(),target},AiPathEmptyTile=function(entity){var dijkstra=MakeDijkstra(entity.position.x,entity.position.y),target=FindClosestEmptyTile(dijkstra,entity);return target.pop(),target},FindClosestEmptyTile=function(dijkstra,entity){},FindClosestTarget=function(dijkstra,entity){var winner;return(entity.has(_state_component__WEBPACK_IMPORTED_MODULE_2__.IsEnemy)?allyEntities.get():enemyEntities.get()).forEach((function(entity){var closest=[];dijkstra.compute(entity.position.x,entity.position.y,(function(x,y){closest.push([x,y])})),(!winner||closest.length<winner.length)&&(winner=closest)})),console.log(winner),winner},CheckStraightLine=function(_ref,currentXY){var path=_toArray(_ref).slice(0);if(1==path.length)return!0;var Xs=[],Ys=[];return path.forEach((function(coords){Xs.push(coords[0]),Ys.push(coords[1])})),currentXY.x==path[0][0]||currentXY.y==path[0][1]},passableCallback=function(x,y){var getEntitiesAtLoc=Object(_state_cache__WEBPACK_IMPORTED_MODULE_0__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toLocId)({x:x,y:y}));if(!getEntitiesAtLoc)return!1;getEntitiesAtLoc=Array.from(getEntitiesAtLoc);var entityIsEnemy=pathingUnit.has(_state_component__WEBPACK_IMPORTED_MODULE_2__.IsEnemy);for(x=0;x<getEntitiesAtLoc.length;x++){if(getEntitiesAtLoc[x]==pathingUnit.id)return!0;var ent=_state_ecs__WEBPACK_IMPORTED_MODULE_1__.default.getEntity(getEntitiesAtLoc[x]);if(ent.has(_state_component__WEBPACK_IMPORTED_MODULE_2__.IsBlocking)&&(ent.has(_state_component__WEBPACK_IMPORTED_MODULE_2__.LayerMap)||ent.has(_state_component__WEBPACK_IMPORTED_MODULE_2__.IsEnemy)==entityIsEnemy))return!1}return!0}},"./src/systems/render.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SetEntityToRender",(function(){return SetEntityToRender})),__webpack_require__.d(__webpack_exports__,"DrawText",(function(){return DrawText})),__webpack_require__.d(__webpack_exports__,"DrawChar",(function(){return DrawChar})),__webpack_require__.d(__webpack_exports__,"renderBorder",(function(){return renderBorder})),__webpack_require__.d(__webpack_exports__,"render",(function(){return render}));var _lib_canvas__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/lib/canvas.js"),_state_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/state/component.js"),_state_ecs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/state/ecs.js"),_state_cache__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/state/cache.js"),_lib_grid__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/lib/grid.js"),_index__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/index.js"),_state_town__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/state/town.js"),_state_helpMenu__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/state/helpMenu.js");function _slicedToArray(arr,i){return function(arr){if(Array.isArray(arr))return arr}(arr)||function(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var layerMapEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_1__.Position,_state_component__WEBPACK_IMPORTED_MODULE_1__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerMap]}),layerUnitEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_1__.Position,_state_component__WEBPACK_IMPORTED_MODULE_1__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerUnit]}),slowDmgEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_1__.Position,_state_component__WEBPACK_IMPORTED_MODULE_1__.SlowAttack]}),fastDmgEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_1__.Position,_state_component__WEBPACK_IMPORTED_MODULE_1__.FastAttack]}),enemyEntities=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.createQuery({all:[_state_component__WEBPACK_IMPORTED_MODULE_1__.Position,_state_component__WEBPACK_IMPORTED_MODULE_1__.Appearance,_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerUnit,_state_component__WEBPACK_IMPORTED_MODULE_1__.IsEnemy],none:[_state_component__WEBPACK_IMPORTED_MODULE_1__.IsDead]}),EntityToRender="",SetEntityToRender=function(entity){EntityToRender=entity},abilityHotkeys=["q","w","e","r","t","y"],DrawText=function(text,x,y){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.drawText(x,y,text)},DrawChar=function(entity,x,y){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(x,y,entity.appearance.char,entity.appearance.color,entity.appearance.background||"black")},renderBorder=function(){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(0,0,"O"),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(0,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.height-1,"O"),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.width-1,0,"O"),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.width-1,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.height-1,"O")},render=function(){var count;"Help"==_index__WEBPACK_IMPORTED_MODULE_5__.gameState?Object(_state_helpMenu__WEBPACK_IMPORTED_MODULE_7__.DrawHelpMenu)():"AbilityInfo"==_index__WEBPACK_IMPORTED_MODULE_5__.gameState?Object(_state_helpMenu__WEBPACK_IMPORTED_MODULE_7__.ShowAbilityInfo)(EntityToRender):"EnemyNumbers"==_index__WEBPACK_IMPORTED_MODULE_5__.gameState?(count=1,enemyEntities.get().forEach((function(entity){_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x+entity.position.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y+entity.position.y,count.toString()),count++}))):"DamageShow"==_index__WEBPACK_IMPORTED_MODULE_5__.gameState?function(){var dmgTiles=[];dmgTiles.push.apply(dmgTiles,slowDmgEntities.get()),dmgTiles.push.apply(dmgTiles,fastDmgEntities.get());var dmgCount=[];dmgTiles.forEach((function(dmg){var toLoc=Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toLocId)({x:dmg.position.x,y:dmg.position.y});dmgCount[toLoc]||(dmgCount[toLoc]=0),dmgCount[toLoc]+=dmg.dmgTile.dmg}));for(var _i=0,_Object$entries=Object.entries(dmgCount);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1],pos=Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toCell)(key);_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x+pos.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y+pos.y,value)}}():(_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.clear(),layerMapEntities.get().forEach((function(entity){DrawChar(entity,entity.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,entity.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y)})),layerUnitEntities.get().forEach((function(entity){DrawChar(entity,entity.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,entity.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y)})),function(){if(_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive()){DrawText("Active:",_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y),DrawChar(_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x+"Active:".length,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y),DrawText("Hp:"+_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().health.current.toString(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y+1),DrawText("Stam:"+_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().stamina.current.toString()+"/"+_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().stamina.max.toString(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y+2),DrawText("StamRgn:"+Math.max(0,4-_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().stamina.used).toString(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y+3),DrawText("Move:"+_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().movement.movement.toString(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y+4),DrawText("Dodge:"+_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().movement.dodge.toString(),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.activePlayer.y+5)}}(),function(){if(_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive())for(var x=0;x<_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().die.length;x++){var color="white";_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().die[x].selected?color="green":_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().die[x].exhausted&&(color="grey"),DrawText((x+1).toString()+"| |",_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.dieMenu.x+5*x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.dieMenu.y),_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(2+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.dieMenu.x+5*x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.dieMenu.y,_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().die[x].number.toString(),"black",color)}}(),function(){for(var x=0;x<_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities.length;x++){var color="gray",currentPhase="PlayerTurnDefend"==_index__WEBPACK_IMPORTED_MODULE_5__.gameState?"Defend":"Attack";("Any"==_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities[x].abilityPhase.phase||_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities[x].abilityPhase.phase==currentPhase)&&_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities[x].abilityFunction.function.canUse(_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities[x],_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive()).length>0&&(color="white");var smlName=_state_town__WEBPACK_IMPORTED_MODULE_6__.default.GetActive().abilityGrabBagList.abilities[x].abilitySmallName.smallName;DrawText(abilityHotkeys[x]+"[%c{"+color+"}"+smlName+"%c{}]",_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.abilityMenu.x+7*x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.abilityMenu.y)}}(),DrawText(_index__WEBPACK_IMPORTED_MODULE_5__.gameState,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.phaseMenu.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.phaseMenu.y),renderBorder(),function(){var count=1;enemyEntities.get().forEach((function(entity){var text=""+count;text+="%c{"+entity.appearance.color+"} "+entity.description.name+" "+entity.health.current,DrawText(text,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.enemies.x,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.enemies.y+count-1),count++}))}(),slowDmgEntities.get().forEach((function(slow){var floor,getEntitiesAtLoc=Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toLocId)({x:slow.position.x,y:slow.position.y})),gotUnit=!1;getEntitiesAtLoc.forEach((function(eid){var ents=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.getEntity(eid);ents.has(_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerUnit)?(gotUnit=!0,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(slow.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,slow.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y,ents.appearance.char,ents.appearance.color,"yellow")):ents.has(_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerMap)&&(floor=ents),!gotUnit&&floor&&_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(slow.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,slow.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y,floor.appearance.char,floor.appearance.color,"yellow")}))})),fastDmgEntities.get().forEach((function(fast){var floor,getEntitiesAtLoc=Object(_state_cache__WEBPACK_IMPORTED_MODULE_3__.readCacheSet)("entitiesAtLocation",Object(_lib_grid__WEBPACK_IMPORTED_MODULE_4__.toLocId)({x:fast.position.x,y:fast.position.y})),gotUnit=!1;getEntitiesAtLoc.forEach((function(eid){var ents=_state_ecs__WEBPACK_IMPORTED_MODULE_2__.default.getEntity(eid);ents.has(_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerUnit)?(gotUnit=!0,_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(fast.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,fast.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y,ents.appearance.char,ents.appearance.color,"red")):ents.has(_state_component__WEBPACK_IMPORTED_MODULE_1__.LayerMap)&&(floor=ents),!gotUnit&&floor&&_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.display.draw(fast.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,fast.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y,floor.appearance.char,floor.appearance.color,"red")}))})),"examine"!==_index__WEBPACK_IMPORTED_MODULE_5__.gameState&&"targeting"!==_index__WEBPACK_IMPORTED_MODULE_5__.gameState||DrawChar(_index__WEBPACK_IMPORTED_MODULE_5__.targetEntity,_index__WEBPACK_IMPORTED_MODULE_5__.targetEntity.position.x+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.x,_index__WEBPACK_IMPORTED_MODULE_5__.targetEntity.position.y+_lib_canvas__WEBPACK_IMPORTED_MODULE_0__.grid.map.y))}},"./src/systems/yahtzee.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _toConsumableArray(arr){return function(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"CheckSingles",(function(){return CheckSingles})),__webpack_require__.d(__webpack_exports__,"CheckDoubles",(function(){return CheckDoubles})),__webpack_require__.d(__webpack_exports__,"CheckTriples",(function(){return CheckTriples})),__webpack_require__.d(__webpack_exports__,"CheckQuads",(function(){return CheckQuads})),__webpack_require__.d(__webpack_exports__,"CheckSames",(function(){return CheckSames})),__webpack_require__.d(__webpack_exports__,"CheckStraight",(function(){return CheckStraight}));var CheckSingles=function(counts){var Allowed=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return CheckSames(counts,1,Allowed)},CheckDoubles=function(counts){var Allowed=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return CheckSames(counts,2,Allowed)},CheckTriples=function(counts){var Allowed=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return CheckSames(counts,3,Allowed)},CheckQuads=function(counts){var Allowed=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return CheckSames(counts,4,Allowed)},CheckSames=function(counts,match){for(var Allowed=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,2,3,4,5,6],found=[],x=1;x<7;x++)counts[x]&&counts[x]==match&&Allowed.includes(x)&&found.push(x);return found},CheckStraight=function(counts,match){for(var found=[],currentFound=[],matched=1,x=1;x<7;x++)counts[x]&&counts[x-1]&&(counts[x]==counts[x-1]?(matched++,currentFound.push(x),matched==match&&(found=_toConsumableArray(currentFound))):(matched=1,currentFound=[]));return console.log(counts),found}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,