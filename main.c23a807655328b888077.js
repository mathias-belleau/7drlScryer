!function(t){var e={};function n(u){if(e[u])return e[u].exports;var r=e[u]={i:u,l:!1,exports:{}};return t[u].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,u){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:u})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var u=Object.create(null);if(n.r(u),Object.defineProperty(u,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(u,r,function(e){return t[e]}.bind(null,r));return u},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";function u(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}var r=2.3283064365386963e-10,o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}var e,n,o;return e=t,(n=[{key:"getSeed",value:function(){return this._seed}},{key:"setSeed",value:function(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*r,t=69069*t+1>>>0,this._s1=t*r,t=69069*t+1>>>0,this._s2=t*r,this._c=1,this}},{key:"getUniform",value:function(){var t=2091639*this._s0+this._c*r;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}},{key:"getUniformInt",value:function(t,e){var n=Math.max(t,e),u=Math.min(t,e);return Math.floor(this.getUniform()*(n-u+1))+u}},{key:"getNormal",value:function(){var t,e,n,u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;do{n=(t=2*this.getUniform()-1)*t+(e=2*this.getUniform()-1)*e}while(n>1||0==n);var o=t*Math.sqrt(-2*Math.log(n)/n);return u+o*r}},{key:"getPercentage",value:function(){return 1+Math.floor(100*this.getUniform())}},{key:"getItem",value:function(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}},{key:"shuffle",value:function(t){for(var e=[],n=t.slice();n.length;){var u=n.indexOf(this.getItem(n));e.push(n.splice(u,1)[0])}return e}},{key:"getWeightedValue",value:function(t){var e=0;for(var n in t)e+=t[n];var u,r=this.getUniform()*e,o=0;for(u in t)if(r<(o+=t[u]))return u;return u}},{key:"getState",value:function(){return[this._s0,this._s1,this._s2,this._c]}},{key:"setState",value:function(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}},{key:"clone",value:function(){var e=new t;return e.setState(this.getState())}}])&&u(e.prototype,n),o&&u(e,o),t}();e.a=(new o).setSeed(Date.now())},function(t,e,n){"use strict";function u(t,e){return(t%e+e)%e}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return t<e?e:t>n?n:t}function o(t){return t.charAt(0).toUpperCase()+t.substring(1)}function i(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];var r=i.map,a=function(e,u,i,a){if("%"==t.charAt(a-1))return e.substring(1);if(!n.length)return e;var c=n[0],s=(u||i).split(","),l=s.shift()||"",f=r[l.toLowerCase()];if(!f)return e;var h=(c=n.shift())[f].apply(c,s),p=l.charAt(0);return p!=p.toLowerCase()&&(h=o(h)),h};return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,a)}n.r(e),n.d(e,"mod",(function(){return u})),n.d(e,"clamp",(function(){return r})),n.d(e,"capitalize",(function(){return o})),n.d(e,"format",(function(){return i})),i.map={s:"toString"}},function(t,e,n){"use strict";n.r(e),n.d(e,"fromString",(function(){return o})),n.d(e,"add",(function(){return i})),n.d(e,"add_",(function(){return a})),n.d(e,"multiply",(function(){return c})),n.d(e,"multiply_",(function(){return s})),n.d(e,"interpolate",(function(){return l})),n.d(e,"lerp",(function(){return f})),n.d(e,"interpolateHSL",(function(){return h})),n.d(e,"lerpHSL",(function(){return p})),n.d(e,"randomize",(function(){return D})),n.d(e,"rgb2hsl",(function(){return y})),n.d(e,"hsl2rgb",(function(){return d})),n.d(e,"toRGB",(function(){return g})),n.d(e,"toHex",(function(){return _}));var u=n(1),r=n(0);function o(t){var e,n;if(t in A)e=A[t];else{if("#"==t.charAt(0)){var u=(t.match(/[0-9a-f]/gi)||[]).map((function(t){return parseInt(t,16)}));if(3==u.length)e=u.map((function(t){return 17*t}));else{for(var r=0;r<3;r++)u[r+1]+=16*u[r],u.splice(r,1);e=u}}else e=(n=t.match(/rgb\(([0-9, ]+)\)/i))?n[1].split(/\s*,\s*/).map((function(t){return parseInt(t)})):[0,0,0];A[t]=e}return e.slice()}function i(t){for(var e=t.slice(),n=arguments.length,u=new Array(n>1?n-1:0),r=1;r<n;r++)u[r-1]=arguments[r];for(var o=0;o<3;o++)for(var i=0;i<u.length;i++)e[o]+=u[i][o];return e}function a(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];for(var r=0;r<3;r++)for(var o=0;o<n.length;o++)t[r]+=n[o][r];return t}function c(t){for(var e=t.slice(),n=arguments.length,u=new Array(n>1?n-1:0),r=1;r<n;r++)u[r-1]=arguments[r];for(var o=0;o<3;o++){for(var i=0;i<u.length;i++)e[o]*=u[i][o]/255;e[o]=Math.round(e[o])}return e}function s(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];for(var r=0;r<3;r++){for(var o=0;o<n.length;o++)t[r]*=n[o][r]/255;t[r]=Math.round(t[r])}return t}function l(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,u=t.slice(),r=0;r<3;r++)u[r]=Math.round(u[r]+n*(e[r]-t[r]));return u}var f=l;function h(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,u=y(t),r=y(e),o=0;o<3;o++)u[o]+=n*(r[o]-u[o]);return d(u)}var p=h;function D(t,e){e instanceof Array||(e=Math.round(r.a.getNormal(0,e)));for(var n=t.slice(),u=0;u<3;u++)n[u]+=e instanceof Array?Math.round(r.a.getNormal(0,e[u])):e;return n}function y(t){var e,n=t[0]/255,u=t[1]/255,r=t[2]/255,o=Math.max(n,u,r),i=Math.min(n,u,r),a=0,c=(o+i)/2;if(o==i)e=0;else{var s=o-i;switch(e=c>.5?s/(2-o-i):s/(o+i),o){case n:a=(u-r)/s+(u<r?6:0);break;case u:a=(r-n)/s+2;break;case r:a=(n-u)/s+4}a/=6}return[a,e,c]}function v(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function d(t){var e=t[2];if(0==t[1])return[e=Math.round(255*e),e,e];var n=t[1],u=e<.5?e*(1+n):e+n-e*n,r=2*e-u,o=v(r,u,t[0]+1/3),i=v(r,u,t[0]),a=v(r,u,t[0]-1/3);return[Math.round(255*o),Math.round(255*i),Math.round(255*a)]}function g(t){var e=t.map((function(t){return Object(u.clamp)(t,0,255)}));return"rgb(".concat(e.join(","),")")}function _(t){var e=t.map((function(t){return Object(u.clamp)(t,0,255).toString(16).padStart(2,"0")}));return"#".concat(e.join(""))}var A={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,n){"use strict";function u(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}n.d(e,"a",(function(){return r}));var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"getContainer",value:function(){return null}},{key:"setOptions",value:function(t){this._options=t}}])&&u(e.prototype,n),r&&u(e,r),t}()},function(t,e,n){(function(t,u){var r;function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i="Expected a function",a="__lodash_placeholder__",c=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",l="[object Array]",f="[object Boolean]",h="[object Date]",p="[object Error]",D="[object Function]",y="[object GeneratorFunction]",v="[object Map]",d="[object Number]",g="[object Object]",_="[object RegExp]",A="[object Set]",C="[object String]",E="[object Symbol]",m="[object WeakMap]",b="[object ArrayBuffer]",F="[object DataView]",B="[object Float32Array]",w="[object Float64Array]",x="[object Int8Array]",k="[object Int16Array]",S="[object Int32Array]",O="[object Uint8Array]",j="[object Uint16Array]",P="[object Uint32Array]",R=/\b__p \+= '';/g,T=/\b(__p \+=) '' \+/g,M=/(__e\(.*?\)|\b__t\)) \+\n'';/g,I=/&(?:amp|lt|gt|quot|#39);/g,z=/[&<>"']/g,U=RegExp(I.source),L=RegExp(z.source),W=/<%-([\s\S]+?)%>/g,N=/<%([\s\S]+?)%>/g,X=/<%=([\s\S]+?)%>/g,Y=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,H=/^\w*$/,q=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,$=/[\\^$.*+?()[\]{}|]/g,G=RegExp($.source),K=/^\s+/,Q=/\s/,V=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Z=/\{\n\/\* \[wrapped with (.+)\] \*/,J=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/[()=,{}\[\]\/\s]/,nt=/\\(\\)?/g,ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,ot=/^[-+]0x[0-9a-f]+$/i,it=/^0b[01]+$/i,at=/^\[object .+?Constructor\]$/,ct=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,lt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ft=/($^)/,ht=/['\n\r\u2028\u2029\\]/g,pt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Dt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",yt="[\\ud800-\\udfff]",vt="["+Dt+"]",dt="["+pt+"]",gt="\\d+",_t="[\\u2700-\\u27bf]",At="[a-z\\xdf-\\xf6\\xf8-\\xff]",Ct="[^\\ud800-\\udfff"+Dt+gt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Et="\\ud83c[\\udffb-\\udfff]",mt="[^\\ud800-\\udfff]",bt="(?:\\ud83c[\\udde6-\\uddff]){2}",Ft="[\\ud800-\\udbff][\\udc00-\\udfff]",Bt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",wt="(?:"+At+"|"+Ct+")",xt="(?:"+Bt+"|"+Ct+")",kt="(?:"+dt+"|"+Et+")"+"?",St="[\\ufe0e\\ufe0f]?"+kt+("(?:\\u200d(?:"+[mt,bt,Ft].join("|")+")[\\ufe0e\\ufe0f]?"+kt+")*"),Ot="(?:"+[_t,bt,Ft].join("|")+")"+St,jt="(?:"+[mt+dt+"?",dt,bt,Ft,yt].join("|")+")",Pt=RegExp("['’]","g"),Rt=RegExp(dt,"g"),Tt=RegExp(Et+"(?="+Et+")|"+jt+St,"g"),Mt=RegExp([Bt+"?"+At+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[vt,Bt,"$"].join("|")+")",xt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[vt,Bt+wt,"$"].join("|")+")",Bt+"?"+wt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Bt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",gt,Ot].join("|"),"g"),It=RegExp("[\\u200d\\ud800-\\udfff"+pt+"\\ufe0e\\ufe0f]"),zt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ut=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Lt=-1,Wt={};Wt[B]=Wt[w]=Wt[x]=Wt[k]=Wt[S]=Wt[O]=Wt["[object Uint8ClampedArray]"]=Wt[j]=Wt[P]=!0,Wt[s]=Wt[l]=Wt[b]=Wt[f]=Wt[F]=Wt[h]=Wt[p]=Wt[D]=Wt[v]=Wt[d]=Wt[g]=Wt[_]=Wt[A]=Wt[C]=Wt[m]=!1;var Nt={};Nt[s]=Nt[l]=Nt[b]=Nt[F]=Nt[f]=Nt[h]=Nt[B]=Nt[w]=Nt[x]=Nt[k]=Nt[S]=Nt[v]=Nt[d]=Nt[g]=Nt[_]=Nt[A]=Nt[C]=Nt[E]=Nt[O]=Nt["[object Uint8ClampedArray]"]=Nt[j]=Nt[P]=!0,Nt[p]=Nt[D]=Nt[m]=!1;var Xt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Yt=parseFloat,Ht=parseInt,qt="object"==(void 0===t?"undefined":o(t))&&t&&t.Object===Object&&t,$t="object"==("undefined"==typeof self?"undefined":o(self))&&self&&self.Object===Object&&self,Gt=qt||$t||Function("return this")(),Kt="object"==o(e)&&e&&!e.nodeType&&e,Qt=Kt&&"object"==o(u)&&u&&!u.nodeType&&u,Vt=Qt&&Qt.exports===Kt,Zt=Vt&&qt.process,Jt=function(){try{var t=Qt&&Qt.require&&Qt.require("util").types;return t||Zt&&Zt.binding&&Zt.binding("util")}catch(t){}}(),te=Jt&&Jt.isArrayBuffer,ee=Jt&&Jt.isDate,ne=Jt&&Jt.isMap,ue=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,oe=Jt&&Jt.isTypedArray;function ie(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ae(t,e,n,u){for(var r=-1,o=null==t?0:t.length;++r<o;){var i=t[r];e(u,i,n(i),t)}return u}function ce(t,e){for(var n=-1,u=null==t?0:t.length;++n<u&&!1!==e(t[n],n,t););return t}function se(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function le(t,e){for(var n=-1,u=null==t?0:t.length;++n<u;)if(!e(t[n],n,t))return!1;return!0}function fe(t,e){for(var n=-1,u=null==t?0:t.length,r=0,o=[];++n<u;){var i=t[n];e(i,n,t)&&(o[r++]=i)}return o}function he(t,e){return!!(null==t?0:t.length)&&Ee(t,e,0)>-1}function pe(t,e,n){for(var u=-1,r=null==t?0:t.length;++u<r;)if(n(e,t[u]))return!0;return!1}function De(t,e){for(var n=-1,u=null==t?0:t.length,r=Array(u);++n<u;)r[n]=e(t[n],n,t);return r}function ye(t,e){for(var n=-1,u=e.length,r=t.length;++n<u;)t[r+n]=e[n];return t}function ve(t,e,n,u){var r=-1,o=null==t?0:t.length;for(u&&o&&(n=t[++r]);++r<o;)n=e(n,t[r],r,t);return n}function de(t,e,n,u){var r=null==t?0:t.length;for(u&&r&&(n=t[--r]);r--;)n=e(n,t[r],r,t);return n}function ge(t,e){for(var n=-1,u=null==t?0:t.length;++n<u;)if(e(t[n],n,t))return!0;return!1}var _e=Be("length");function Ae(t,e,n){var u;return n(t,(function(t,n,r){if(e(t,n,r))return u=n,!1})),u}function Ce(t,e,n,u){for(var r=t.length,o=n+(u?1:-1);u?o--:++o<r;)if(e(t[o],o,t))return o;return-1}function Ee(t,e,n){return e==e?function(t,e,n){var u=n-1,r=t.length;for(;++u<r;)if(t[u]===e)return u;return-1}(t,e,n):Ce(t,be,n)}function me(t,e,n,u){for(var r=n-1,o=t.length;++r<o;)if(u(t[r],e))return r;return-1}function be(t){return t!=t}function Fe(t,e){var n=null==t?0:t.length;return n?ke(t,e)/n:NaN}function Be(t){return function(e){return null==e?void 0:e[t]}}function we(t){return function(e){return null==t?void 0:t[e]}}function xe(t,e,n,u,r){return r(t,(function(t,r,o){n=u?(u=!1,t):e(n,t,r,o)})),n}function ke(t,e){for(var n,u=-1,r=t.length;++u<r;){var o=e(t[u]);void 0!==o&&(n=void 0===n?o:n+o)}return n}function Se(t,e){for(var n=-1,u=Array(t);++n<t;)u[n]=e(n);return u}function Oe(t){return t?t.slice(0,Ke(t)+1).replace(K,""):t}function je(t){return function(e){return t(e)}}function Pe(t,e){return De(e,(function(e){return t[e]}))}function Re(t,e){return t.has(e)}function Te(t,e){for(var n=-1,u=t.length;++n<u&&Ee(e,t[n],0)>-1;);return n}function Me(t,e){for(var n=t.length;n--&&Ee(e,t[n],0)>-1;);return n}function Ie(t,e){for(var n=t.length,u=0;n--;)t[n]===e&&++u;return u}var ze=we({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ue=we({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Le(t){return"\\"+Xt[t]}function We(t){return It.test(t)}function Ne(t){var e=-1,n=Array(t.size);return t.forEach((function(t,u){n[++e]=[u,t]})),n}function Xe(t,e){return function(n){return t(e(n))}}function Ye(t,e){for(var n=-1,u=t.length,r=0,o=[];++n<u;){var i=t[n];i!==e&&i!==a||(t[n]=a,o[r++]=n)}return o}function He(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function qe(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function $e(t){return We(t)?function(t){var e=Tt.lastIndex=0;for(;Tt.test(t);)++e;return e}(t):_e(t)}function Ge(t){return We(t)?function(t){return t.match(Tt)||[]}(t):function(t){return t.split("")}(t)}function Ke(t){for(var e=t.length;e--&&Q.test(t.charAt(e)););return e}var Qe=we({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ve=function t(e){var n,u=(e=null==e?Gt:Ve.defaults(Gt.Object(),e,Ve.pick(Gt,Ut))).Array,r=e.Date,Q=e.Error,pt=e.Function,Dt=e.Math,yt=e.Object,vt=e.RegExp,dt=e.String,gt=e.TypeError,_t=u.prototype,At=pt.prototype,Ct=yt.prototype,Et=e["__core-js_shared__"],mt=At.toString,bt=Ct.hasOwnProperty,Ft=0,Bt=(n=/[^.]+$/.exec(Et&&Et.keys&&Et.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",wt=Ct.toString,xt=mt.call(yt),kt=Gt._,St=vt("^"+mt.call(bt).replace($,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ot=Vt?e.Buffer:void 0,jt=e.Symbol,Tt=e.Uint8Array,It=Ot?Ot.allocUnsafe:void 0,Xt=Xe(yt.getPrototypeOf,yt),qt=yt.create,$t=Ct.propertyIsEnumerable,Kt=_t.splice,Qt=jt?jt.isConcatSpreadable:void 0,Zt=jt?jt.iterator:void 0,Jt=jt?jt.toStringTag:void 0,_e=function(){try{var t=eo(yt,"defineProperty");return t({},"",{}),t}catch(t){}}(),we=e.clearTimeout!==Gt.clearTimeout&&e.clearTimeout,Ze=r&&r.now!==Gt.Date.now&&r.now,Je=e.setTimeout!==Gt.setTimeout&&e.setTimeout,tn=Dt.ceil,en=Dt.floor,nn=yt.getOwnPropertySymbols,un=Ot?Ot.isBuffer:void 0,rn=e.isFinite,on=_t.join,an=Xe(yt.keys,yt),cn=Dt.max,sn=Dt.min,ln=r.now,fn=e.parseInt,hn=Dt.random,pn=_t.reverse,Dn=eo(e,"DataView"),yn=eo(e,"Map"),vn=eo(e,"Promise"),dn=eo(e,"Set"),gn=eo(e,"WeakMap"),_n=eo(yt,"create"),An=gn&&new gn,Cn={},En=ko(Dn),mn=ko(yn),bn=ko(vn),Fn=ko(dn),Bn=ko(gn),wn=jt?jt.prototype:void 0,xn=wn?wn.valueOf:void 0,kn=wn?wn.toString:void 0;function Sn(t){if(qi(t)&&!Ti(t)&&!(t instanceof Rn)){if(t instanceof Pn)return t;if(bt.call(t,"__wrapped__"))return So(t)}return new Pn(t)}var On=function(){function t(){}return function(e){if(!Hi(e))return{};if(qt)return qt(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function jn(){}function Pn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Rn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Tn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var u=t[e];this.set(u[0],u[1])}}function Mn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var u=t[e];this.set(u[0],u[1])}}function In(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var u=t[e];this.set(u[0],u[1])}}function zn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new In;++e<n;)this.add(t[e])}function Un(t){var e=this.__data__=new Mn(t);this.size=e.size}function Ln(t,e){var n=Ti(t),u=!n&&Ri(t),r=!n&&!u&&Ui(t),o=!n&&!u&&!r&&ta(t),i=n||u||r||o,a=i?Se(t.length,dt):[],c=a.length;for(var s in t)!e&&!bt.call(t,s)||i&&("length"==s||r&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||co(s,c))||a.push(s);return a}function Wn(t){var e=t.length;return e?t[zu(0,e-1)]:void 0}function Nn(t,e){return Bo(_r(t),Vn(e,0,t.length))}function Xn(t){return Bo(_r(t))}function Yn(t,e,n){(void 0!==n&&!Oi(t[e],n)||void 0===n&&!(e in t))&&Kn(t,e,n)}function Hn(t,e,n){var u=t[e];bt.call(t,e)&&Oi(u,n)&&(void 0!==n||e in t)||Kn(t,e,n)}function qn(t,e){for(var n=t.length;n--;)if(Oi(t[n][0],e))return n;return-1}function $n(t,e,n,u){return nu(t,(function(t,r,o){e(u,t,n(t),o)})),u}function Gn(t,e){return t&&Ar(e,Ea(e),t)}function Kn(t,e,n){"__proto__"==e&&_e?_e(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Qn(t,e){for(var n=-1,r=e.length,o=u(r),i=null==t;++n<r;)o[n]=i?void 0:da(t,e[n]);return o}function Vn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function Zn(t,e,n,u,r,o){var i,a=1&e,c=2&e,l=4&e;if(n&&(i=r?n(t,u,r,o):n(t)),void 0!==i)return i;if(!Hi(t))return t;var p=Ti(t);if(p){if(i=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&bt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!a)return _r(t,i)}else{var m=ro(t),R=m==D||m==y;if(Ui(t))return pr(t,a);if(m==g||m==s||R&&!r){if(i=c||R?{}:io(t),!a)return c?function(t,e){return Ar(t,uo(t),e)}(t,function(t,e){return t&&Ar(e,ma(e),t)}(i,t)):function(t,e){return Ar(t,no(t),e)}(t,Gn(i,t))}else{if(!Nt[m])return r?t:{};i=function(t,e,n){var u=t.constructor;switch(e){case b:return Dr(t);case f:case h:return new u(+t);case F:return function(t,e){var n=e?Dr(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case B:case w:case x:case k:case S:case O:case"[object Uint8ClampedArray]":case j:case P:return yr(t,n);case v:return new u;case d:case C:return new u(t);case _:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case A:return new u;case E:return r=t,xn?yt(xn.call(r)):{}}var r}(t,m,a)}}o||(o=new Un);var T=o.get(t);if(T)return T;o.set(t,i),Vi(t)?t.forEach((function(u){i.add(Zn(u,e,n,u,t,o))})):$i(t)&&t.forEach((function(u,r){i.set(r,Zn(u,e,n,r,t,o))}));var M=p?void 0:(l?c?Gr:$r:c?ma:Ea)(t);return ce(M||t,(function(u,r){M&&(u=t[r=u]),Hn(i,r,Zn(u,e,n,r,t,o))})),i}function Jn(t,e,n){var u=n.length;if(null==t)return!u;for(t=yt(t);u--;){var r=n[u],o=e[r],i=t[r];if(void 0===i&&!(r in t)||!o(i))return!1}return!0}function tu(t,e,n){if("function"!=typeof t)throw new gt(i);return Eo((function(){t.apply(void 0,n)}),e)}function eu(t,e,n,u){var r=-1,o=he,i=!0,a=t.length,c=[],s=e.length;if(!a)return c;n&&(e=De(e,je(n))),u?(o=pe,i=!1):e.length>=200&&(o=Re,i=!1,e=new zn(e));t:for(;++r<a;){var l=t[r],f=null==n?l:n(l);if(l=u||0!==l?l:0,i&&f==f){for(var h=s;h--;)if(e[h]===f)continue t;c.push(l)}else o(e,f,u)||c.push(l)}return c}Sn.templateSettings={escape:W,evaluate:N,interpolate:X,variable:"",imports:{_:Sn}},Sn.prototype=jn.prototype,Sn.prototype.constructor=Sn,Pn.prototype=On(jn.prototype),Pn.prototype.constructor=Pn,Rn.prototype=On(jn.prototype),Rn.prototype.constructor=Rn,Tn.prototype.clear=function(){this.__data__=_n?_n(null):{},this.size=0},Tn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Tn.prototype.get=function(t){var e=this.__data__;if(_n){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return bt.call(e,t)?e[t]:void 0},Tn.prototype.has=function(t){var e=this.__data__;return _n?void 0!==e[t]:bt.call(e,t)},Tn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=_n&&void 0===e?"__lodash_hash_undefined__":e,this},Mn.prototype.clear=function(){this.__data__=[],this.size=0},Mn.prototype.delete=function(t){var e=this.__data__,n=qn(e,t);return!(n<0)&&(n==e.length-1?e.pop():Kt.call(e,n,1),--this.size,!0)},Mn.prototype.get=function(t){var e=this.__data__,n=qn(e,t);return n<0?void 0:e[n][1]},Mn.prototype.has=function(t){return qn(this.__data__,t)>-1},Mn.prototype.set=function(t,e){var n=this.__data__,u=qn(n,t);return u<0?(++this.size,n.push([t,e])):n[u][1]=e,this},In.prototype.clear=function(){this.size=0,this.__data__={hash:new Tn,map:new(yn||Mn),string:new Tn}},In.prototype.delete=function(t){var e=Jr(this,t).delete(t);return this.size-=e?1:0,e},In.prototype.get=function(t){return Jr(this,t).get(t)},In.prototype.has=function(t){return Jr(this,t).has(t)},In.prototype.set=function(t,e){var n=Jr(this,t),u=n.size;return n.set(t,e),this.size+=n.size==u?0:1,this},zn.prototype.add=zn.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},zn.prototype.has=function(t){return this.__data__.has(t)},Un.prototype.clear=function(){this.__data__=new Mn,this.size=0},Un.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Un.prototype.get=function(t){return this.__data__.get(t)},Un.prototype.has=function(t){return this.__data__.has(t)},Un.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Mn){var u=n.__data__;if(!yn||u.length<199)return u.push([t,e]),this.size=++n.size,this;n=this.__data__=new In(u)}return n.set(t,e),this.size=n.size,this};var nu=mr(lu),uu=mr(fu,!0);function ru(t,e){var n=!0;return nu(t,(function(t,u,r){return n=!!e(t,u,r)})),n}function ou(t,e,n){for(var u=-1,r=t.length;++u<r;){var o=t[u],i=e(o);if(null!=i&&(void 0===a?i==i&&!Ji(i):n(i,a)))var a=i,c=o}return c}function iu(t,e){var n=[];return nu(t,(function(t,u,r){e(t,u,r)&&n.push(t)})),n}function au(t,e,n,u,r){var o=-1,i=t.length;for(n||(n=ao),r||(r=[]);++o<i;){var a=t[o];e>0&&n(a)?e>1?au(a,e-1,n,u,r):ye(r,a):u||(r[r.length]=a)}return r}var cu=br(),su=br(!0);function lu(t,e){return t&&cu(t,e,Ea)}function fu(t,e){return t&&su(t,e,Ea)}function hu(t,e){return fe(e,(function(e){return Ni(t[e])}))}function pu(t,e){for(var n=0,u=(e=sr(e,t)).length;null!=t&&n<u;)t=t[xo(e[n++])];return n&&n==u?t:void 0}function Du(t,e,n){var u=e(t);return Ti(t)?u:ye(u,n(t))}function yu(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Jt&&Jt in yt(t)?function(t){var e=bt.call(t,Jt),n=t[Jt];try{t[Jt]=void 0;var u=!0}catch(t){}var r=wt.call(t);u&&(e?t[Jt]=n:delete t[Jt]);return r}(t):function(t){return wt.call(t)}(t)}function vu(t,e){return t>e}function du(t,e){return null!=t&&bt.call(t,e)}function gu(t,e){return null!=t&&e in yt(t)}function _u(t,e,n){for(var r=n?pe:he,o=t[0].length,i=t.length,a=i,c=u(i),s=1/0,l=[];a--;){var f=t[a];a&&e&&(f=De(f,je(e))),s=sn(f.length,s),c[a]=!n&&(e||o>=120&&f.length>=120)?new zn(a&&f):void 0}f=t[0];var h=-1,p=c[0];t:for(;++h<o&&l.length<s;){var D=f[h],y=e?e(D):D;if(D=n||0!==D?D:0,!(p?Re(p,y):r(l,y,n))){for(a=i;--a;){var v=c[a];if(!(v?Re(v,y):r(t[a],y,n)))continue t}p&&p.push(y),l.push(D)}}return l}function Au(t,e,n){var u=null==(t=go(t,e=sr(e,t)))?t:t[xo(Wo(e))];return null==u?void 0:ie(u,t,n)}function Cu(t){return qi(t)&&yu(t)==s}function Eu(t,e,n,u,r){return t===e||(null==t||null==e||!qi(t)&&!qi(e)?t!=t&&e!=e:function(t,e,n,u,r,o){var i=Ti(t),a=Ti(e),c=i?l:ro(t),D=a?l:ro(e),y=(c=c==s?g:c)==g,m=(D=D==s?g:D)==g,B=c==D;if(B&&Ui(t)){if(!Ui(e))return!1;i=!0,y=!1}if(B&&!y)return o||(o=new Un),i||ta(t)?Hr(t,e,n,u,r,o):function(t,e,n,u,r,o,i){switch(n){case F:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case b:return!(t.byteLength!=e.byteLength||!o(new Tt(t),new Tt(e)));case f:case h:case d:return Oi(+t,+e);case p:return t.name==e.name&&t.message==e.message;case _:case C:return t==e+"";case v:var a=Ne;case A:var c=1&u;if(a||(a=He),t.size!=e.size&&!c)return!1;var s=i.get(t);if(s)return s==e;u|=2,i.set(t,e);var l=Hr(a(t),a(e),u,r,o,i);return i.delete(t),l;case E:if(xn)return xn.call(t)==xn.call(e)}return!1}(t,e,c,n,u,r,o);if(!(1&n)){var w=y&&bt.call(t,"__wrapped__"),x=m&&bt.call(e,"__wrapped__");if(w||x){var k=w?t.value():t,S=x?e.value():e;return o||(o=new Un),r(k,S,n,u,o)}}if(!B)return!1;return o||(o=new Un),function(t,e,n,u,r,o){var i=1&n,a=$r(t),c=a.length,s=$r(e).length;if(c!=s&&!i)return!1;var l=c;for(;l--;){var f=a[l];if(!(i?f in e:bt.call(e,f)))return!1}var h=o.get(t),p=o.get(e);if(h&&p)return h==e&&p==t;var D=!0;o.set(t,e),o.set(e,t);var y=i;for(;++l<c;){f=a[l];var v=t[f],d=e[f];if(u)var g=i?u(d,v,f,e,t,o):u(v,d,f,t,e,o);if(!(void 0===g?v===d||r(v,d,n,u,o):g)){D=!1;break}y||(y="constructor"==f)}if(D&&!y){var _=t.constructor,A=e.constructor;_==A||!("constructor"in t)||!("constructor"in e)||"function"==typeof _&&_ instanceof _&&"function"==typeof A&&A instanceof A||(D=!1)}return o.delete(t),o.delete(e),D}(t,e,n,u,r,o)}(t,e,n,u,Eu,r))}function mu(t,e,n,u){var r=n.length,o=r,i=!u;if(null==t)return!o;for(t=yt(t);r--;){var a=n[r];if(i&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++r<o;){var c=(a=n[r])[0],s=t[c],l=a[1];if(i&&a[2]){if(void 0===s&&!(c in t))return!1}else{var f=new Un;if(u)var h=u(s,l,c,t,e,f);if(!(void 0===h?Eu(l,s,3,u,f):h))return!1}}return!0}function bu(t){return!(!Hi(t)||(e=t,Bt&&Bt in e))&&(Ni(t)?St:at).test(ko(t));var e}function Fu(t){return"function"==typeof t?t:null==t?Ga:"object"==o(t)?Ti(t)?Ou(t[0],t[1]):Su(t):uc(t)}function Bu(t){if(!po(t))return an(t);var e=[];for(var n in yt(t))bt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function wu(t){if(!Hi(t))return function(t){var e=[];if(null!=t)for(var n in yt(t))e.push(n);return e}(t);var e=po(t),n=[];for(var u in t)("constructor"!=u||!e&&bt.call(t,u))&&n.push(u);return n}function xu(t,e){return t<e}function ku(t,e){var n=-1,r=Ii(t)?u(t.length):[];return nu(t,(function(t,u,o){r[++n]=e(t,u,o)})),r}function Su(t){var e=to(t);return 1==e.length&&e[0][2]?yo(e[0][0],e[0][1]):function(n){return n===t||mu(n,t,e)}}function Ou(t,e){return lo(t)&&Do(e)?yo(xo(t),e):function(n){var u=da(n,t);return void 0===u&&u===e?ga(n,t):Eu(e,u,3)}}function ju(t,e,n,u,r){t!==e&&cu(e,(function(o,i){if(r||(r=new Un),Hi(o))!function(t,e,n,u,r,o,i){var a=Ao(t,n),c=Ao(e,n),s=i.get(c);if(s)return void Yn(t,n,s);var l=o?o(a,c,n+"",t,e,i):void 0,f=void 0===l;if(f){var h=Ti(c),p=!h&&Ui(c),D=!h&&!p&&ta(c);l=c,h||p||D?Ti(a)?l=a:zi(a)?l=_r(a):p?(f=!1,l=pr(c,!0)):D?(f=!1,l=yr(c,!0)):l=[]:Ki(c)||Ri(c)?(l=a,Ri(a)?l=ca(a):Hi(a)&&!Ni(a)||(l=io(c))):f=!1}f&&(i.set(c,l),r(l,c,u,o,i),i.delete(c));Yn(t,n,l)}(t,e,i,n,ju,u,r);else{var a=u?u(Ao(t,i),o,i+"",t,e,r):void 0;void 0===a&&(a=o),Yn(t,i,a)}}),ma)}function Pu(t,e){var n=t.length;if(n)return co(e+=e<0?n:0,n)?t[e]:void 0}function Ru(t,e,n){e=e.length?De(e,(function(t){return Ti(t)?function(e){return pu(e,1===t.length?t[0]:t)}:t})):[Ga];var u=-1;return e=De(e,je(Zr())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(ku(t,(function(t,n,r){return{criteria:De(e,(function(e){return e(t)})),index:++u,value:t}})),(function(t,e){return function(t,e,n){var u=-1,r=t.criteria,o=e.criteria,i=r.length,a=n.length;for(;++u<i;){var c=vr(r[u],o[u]);if(c){if(u>=a)return c;var s=n[u];return c*("desc"==s?-1:1)}}return t.index-e.index}(t,e,n)}))}function Tu(t,e,n){for(var u=-1,r=e.length,o={};++u<r;){var i=e[u],a=pu(t,i);n(a,i)&&Xu(o,sr(i,t),a)}return o}function Mu(t,e,n,u){var r=u?me:Ee,o=-1,i=e.length,a=t;for(t===e&&(e=_r(e)),n&&(a=De(t,je(n)));++o<i;)for(var c=0,s=e[o],l=n?n(s):s;(c=r(a,l,c,u))>-1;)a!==t&&Kt.call(a,c,1),Kt.call(t,c,1);return t}function Iu(t,e){for(var n=t?e.length:0,u=n-1;n--;){var r=e[n];if(n==u||r!==o){var o=r;co(r)?Kt.call(t,r,1):er(t,r)}}return t}function zu(t,e){return t+en(hn()*(e-t+1))}function Uu(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=en(e/2))&&(t+=t)}while(e);return n}function Lu(t,e){return mo(vo(t,e,Ga),t+"")}function Wu(t){return Wn(Oa(t))}function Nu(t,e){var n=Oa(t);return Bo(n,Vn(e,0,n.length))}function Xu(t,e,n,u){if(!Hi(t))return t;for(var r=-1,o=(e=sr(e,t)).length,i=o-1,a=t;null!=a&&++r<o;){var c=xo(e[r]),s=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(r!=i){var l=a[c];void 0===(s=u?u(l,c,a):void 0)&&(s=Hi(l)?l:co(e[r+1])?[]:{})}Hn(a,c,s),a=a[c]}return t}var Yu=An?function(t,e){return An.set(t,e),t}:Ga,Hu=_e?function(t,e){return _e(t,"toString",{configurable:!0,enumerable:!1,value:Ha(e),writable:!0})}:Ga;function qu(t){return Bo(Oa(t))}function $u(t,e,n){var r=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var i=u(o);++r<o;)i[r]=t[r+e];return i}function Gu(t,e){var n;return nu(t,(function(t,u,r){return!(n=e(t,u,r))})),!!n}function Ku(t,e,n){var u=0,r=null==t?u:t.length;if("number"==typeof e&&e==e&&r<=2147483647){for(;u<r;){var o=u+r>>>1,i=t[o];null!==i&&!Ji(i)&&(n?i<=e:i<e)?u=o+1:r=o}return r}return Qu(t,e,Ga,n)}function Qu(t,e,n,u){var r=0,o=null==t?0:t.length;if(0===o)return 0;for(var i=(e=n(e))!=e,a=null===e,c=Ji(e),s=void 0===e;r<o;){var l=en((r+o)/2),f=n(t[l]),h=void 0!==f,p=null===f,D=f==f,y=Ji(f);if(i)var v=u||D;else v=s?D&&(u||h):a?D&&h&&(u||!p):c?D&&h&&!p&&(u||!y):!p&&!y&&(u?f<=e:f<e);v?r=l+1:o=l}return sn(o,4294967294)}function Vu(t,e){for(var n=-1,u=t.length,r=0,o=[];++n<u;){var i=t[n],a=e?e(i):i;if(!n||!Oi(a,c)){var c=a;o[r++]=0===i?0:i}}return o}function Zu(t){return"number"==typeof t?t:Ji(t)?NaN:+t}function Ju(t){if("string"==typeof t)return t;if(Ti(t))return De(t,Ju)+"";if(Ji(t))return kn?kn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function tr(t,e,n){var u=-1,r=he,o=t.length,i=!0,a=[],c=a;if(n)i=!1,r=pe;else if(o>=200){var s=e?null:Ur(t);if(s)return He(s);i=!1,r=Re,c=new zn}else c=e?[]:a;t:for(;++u<o;){var l=t[u],f=e?e(l):l;if(l=n||0!==l?l:0,i&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;e&&c.push(f),a.push(l)}else r(c,f,n)||(c!==a&&c.push(f),a.push(l))}return a}function er(t,e){return null==(t=go(t,e=sr(e,t)))||delete t[xo(Wo(e))]}function nr(t,e,n,u){return Xu(t,e,n(pu(t,e)),u)}function ur(t,e,n,u){for(var r=t.length,o=u?r:-1;(u?o--:++o<r)&&e(t[o],o,t););return n?$u(t,u?0:o,u?o+1:r):$u(t,u?o+1:0,u?r:o)}function rr(t,e){var n=t;return n instanceof Rn&&(n=n.value()),ve(e,(function(t,e){return e.func.apply(e.thisArg,ye([t],e.args))}),n)}function or(t,e,n){var r=t.length;if(r<2)return r?tr(t[0]):[];for(var o=-1,i=u(r);++o<r;)for(var a=t[o],c=-1;++c<r;)c!=o&&(i[o]=eu(i[o]||a,t[c],e,n));return tr(au(i,1),e,n)}function ir(t,e,n){for(var u=-1,r=t.length,o=e.length,i={};++u<r;){var a=u<o?e[u]:void 0;n(i,t[u],a)}return i}function ar(t){return zi(t)?t:[]}function cr(t){return"function"==typeof t?t:Ga}function sr(t,e){return Ti(t)?t:lo(t,e)?[t]:wo(sa(t))}var lr=Lu;function fr(t,e,n){var u=t.length;return n=void 0===n?u:n,!e&&n>=u?t:$u(t,e,n)}var hr=we||function(t){return Gt.clearTimeout(t)};function pr(t,e){if(e)return t.slice();var n=t.length,u=It?It(n):new t.constructor(n);return t.copy(u),u}function Dr(t){var e=new t.constructor(t.byteLength);return new Tt(e).set(new Tt(t)),e}function yr(t,e){var n=e?Dr(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function vr(t,e){if(t!==e){var n=void 0!==t,u=null===t,r=t==t,o=Ji(t),i=void 0!==e,a=null===e,c=e==e,s=Ji(e);if(!a&&!s&&!o&&t>e||o&&i&&c&&!a&&!s||u&&i&&c||!n&&c||!r)return 1;if(!u&&!o&&!s&&t<e||s&&n&&r&&!u&&!o||a&&n&&r||!i&&r||!c)return-1}return 0}function dr(t,e,n,r){for(var o=-1,i=t.length,a=n.length,c=-1,s=e.length,l=cn(i-a,0),f=u(s+l),h=!r;++c<s;)f[c]=e[c];for(;++o<a;)(h||o<i)&&(f[n[o]]=t[o]);for(;l--;)f[c++]=t[o++];return f}function gr(t,e,n,r){for(var o=-1,i=t.length,a=-1,c=n.length,s=-1,l=e.length,f=cn(i-c,0),h=u(f+l),p=!r;++o<f;)h[o]=t[o];for(var D=o;++s<l;)h[D+s]=e[s];for(;++a<c;)(p||o<i)&&(h[D+n[a]]=t[o++]);return h}function _r(t,e){var n=-1,r=t.length;for(e||(e=u(r));++n<r;)e[n]=t[n];return e}function Ar(t,e,n,u){var r=!n;n||(n={});for(var o=-1,i=e.length;++o<i;){var a=e[o],c=u?u(n[a],t[a],a,n,t):void 0;void 0===c&&(c=t[a]),r?Kn(n,a,c):Hn(n,a,c)}return n}function Cr(t,e){return function(n,u){var r=Ti(n)?ae:$n,o=e?e():{};return r(n,t,Zr(u,2),o)}}function Er(t){return Lu((function(e,n){var u=-1,r=n.length,o=r>1?n[r-1]:void 0,i=r>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(r--,o):void 0,i&&so(n[0],n[1],i)&&(o=r<3?void 0:o,r=1),e=yt(e);++u<r;){var a=n[u];a&&t(e,a,u,o)}return e}))}function mr(t,e){return function(n,u){if(null==n)return n;if(!Ii(n))return t(n,u);for(var r=n.length,o=e?r:-1,i=yt(n);(e?o--:++o<r)&&!1!==u(i[o],o,i););return n}}function br(t){return function(e,n,u){for(var r=-1,o=yt(e),i=u(e),a=i.length;a--;){var c=i[t?a:++r];if(!1===n(o[c],c,o))break}return e}}function Fr(t){return function(e){var n=We(e=sa(e))?Ge(e):void 0,u=n?n[0]:e.charAt(0),r=n?fr(n,1).join(""):e.slice(1);return u[t]()+r}}function Br(t){return function(e){return ve(Na(Ra(e).replace(Pt,"")),t,"")}}function wr(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=On(t.prototype),u=t.apply(n,e);return Hi(u)?u:n}}function xr(t){return function(e,n,u){var r=yt(e);if(!Ii(e)){var o=Zr(n,3);e=Ea(e),n=function(t){return o(r[t],t,r)}}var i=t(e,n,u);return i>-1?r[o?e[i]:i]:void 0}}function kr(t){return qr((function(e){var n=e.length,u=n,r=Pn.prototype.thru;for(t&&e.reverse();u--;){var o=e[u];if("function"!=typeof o)throw new gt(i);if(r&&!a&&"wrapper"==Qr(o))var a=new Pn([],!0)}for(u=a?u:n;++u<n;){var c=Qr(o=e[u]),s="wrapper"==c?Kr(o):void 0;a=s&&fo(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?a[Qr(s[0])].apply(a,s[3]):1==o.length&&fo(o)?a[c]():a.thru(o)}return function(){var t=arguments,u=t[0];if(a&&1==t.length&&Ti(u))return a.plant(u).value();for(var r=0,o=n?e[r].apply(this,t):u;++r<n;)o=e[r].call(this,o);return o}}))}function Sr(t,e,n,r,o,i,a,c,s,l){var f=128&e,h=1&e,p=2&e,D=24&e,y=512&e,v=p?void 0:wr(t);return function d(){for(var g=arguments.length,_=u(g),A=g;A--;)_[A]=arguments[A];if(D)var C=Vr(d),E=Ie(_,C);if(r&&(_=dr(_,r,o,D)),i&&(_=gr(_,i,a,D)),g-=E,D&&g<l){var m=Ye(_,C);return Ir(t,e,Sr,d.placeholder,n,_,m,c,s,l-g)}var b=h?n:this,F=p?b[t]:t;return g=_.length,c?_=_o(_,c):y&&g>1&&_.reverse(),f&&s<g&&(_.length=s),this&&this!==Gt&&this instanceof d&&(F=v||wr(F)),F.apply(b,_)}}function Or(t,e){return function(n,u){return function(t,e,n,u){return lu(t,(function(t,r,o){e(u,n(t),r,o)})),u}(n,t,e(u),{})}}function jr(t,e){return function(n,u){var r;if(void 0===n&&void 0===u)return e;if(void 0!==n&&(r=n),void 0!==u){if(void 0===r)return u;"string"==typeof n||"string"==typeof u?(n=Ju(n),u=Ju(u)):(n=Zu(n),u=Zu(u)),r=t(n,u)}return r}}function Pr(t){return qr((function(e){return e=De(e,je(Zr())),Lu((function(n){var u=this;return t(e,(function(t){return ie(t,u,n)}))}))}))}function Rr(t,e){var n=(e=void 0===e?" ":Ju(e)).length;if(n<2)return n?Uu(e,t):e;var u=Uu(e,tn(t/$e(e)));return We(e)?fr(Ge(u),0,t).join(""):u.slice(0,t)}function Tr(t){return function(e,n,r){return r&&"number"!=typeof r&&so(e,n,r)&&(n=r=void 0),e=ra(e),void 0===n?(n=e,e=0):n=ra(n),function(t,e,n,r){for(var o=-1,i=cn(tn((e-t)/(n||1)),0),a=u(i);i--;)a[r?i:++o]=t,t+=n;return a}(e,n,r=void 0===r?e<n?1:-1:ra(r),t)}}function Mr(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=aa(e),n=aa(n)),t(e,n)}}function Ir(t,e,n,u,r,o,i,a,c,s){var l=8&e;e|=l?32:64,4&(e&=~(l?64:32))||(e&=-4);var f=[t,e,r,l?o:void 0,l?i:void 0,l?void 0:o,l?void 0:i,a,c,s],h=n.apply(void 0,f);return fo(t)&&Co(h,f),h.placeholder=u,bo(h,t,e)}function zr(t){var e=Dt[t];return function(t,n){if(t=aa(t),(n=null==n?0:sn(oa(n),292))&&rn(t)){var u=(sa(t)+"e").split("e");return+((u=(sa(e(u[0]+"e"+(+u[1]+n)))+"e").split("e"))[0]+"e"+(+u[1]-n))}return e(t)}}var Ur=dn&&1/He(new dn([,-0]))[1]==1/0?function(t){return new dn(t)}:Ja;function Lr(t){return function(e){var n=ro(e);return n==v?Ne(e):n==A?qe(e):function(t,e){return De(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Wr(t,e,n,r,o,c,s,l){var f=2&e;if(!f&&"function"!=typeof t)throw new gt(i);var h=r?r.length:0;if(h||(e&=-97,r=o=void 0),s=void 0===s?s:cn(oa(s),0),l=void 0===l?l:oa(l),h-=o?o.length:0,64&e){var p=r,D=o;r=o=void 0}var y=f?void 0:Kr(t),v=[t,e,n,r,o,p,D,c,s,l];if(y&&function(t,e){var n=t[1],u=e[1],r=n|u,o=r<131,i=128==u&&8==n||128==u&&256==n&&t[7].length<=e[8]||384==u&&e[7].length<=e[8]&&8==n;if(!o&&!i)return t;1&u&&(t[2]=e[2],r|=1&n?0:4);var c=e[3];if(c){var s=t[3];t[3]=s?dr(s,c,e[4]):c,t[4]=s?Ye(t[3],a):e[4]}(c=e[5])&&(s=t[5],t[5]=s?gr(s,c,e[6]):c,t[6]=s?Ye(t[5],a):e[6]);(c=e[7])&&(t[7]=c);128&u&&(t[8]=null==t[8]?e[8]:sn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=r}(v,y),t=v[0],e=v[1],n=v[2],r=v[3],o=v[4],!(l=v[9]=void 0===v[9]?f?0:t.length:cn(v[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)d=8==e||16==e?function(t,e,n){var r=wr(t);return function o(){for(var i=arguments.length,a=u(i),c=i,s=Vr(o);c--;)a[c]=arguments[c];var l=i<3&&a[0]!==s&&a[i-1]!==s?[]:Ye(a,s);if((i-=l.length)<n)return Ir(t,e,Sr,o.placeholder,void 0,a,l,void 0,void 0,n-i);var f=this&&this!==Gt&&this instanceof o?r:t;return ie(f,this,a)}}(t,e,l):32!=e&&33!=e||o.length?Sr.apply(void 0,v):function(t,e,n,r){var o=1&e,i=wr(t);return function e(){for(var a=-1,c=arguments.length,s=-1,l=r.length,f=u(l+c),h=this&&this!==Gt&&this instanceof e?i:t;++s<l;)f[s]=r[s];for(;c--;)f[s++]=arguments[++a];return ie(h,o?n:this,f)}}(t,e,n,r);else var d=function(t,e,n){var u=1&e,r=wr(t);return function e(){var o=this&&this!==Gt&&this instanceof e?r:t;return o.apply(u?n:this,arguments)}}(t,e,n);return bo((y?Yu:Co)(d,v),t,e)}function Nr(t,e,n,u){return void 0===t||Oi(t,Ct[n])&&!bt.call(u,n)?e:t}function Xr(t,e,n,u,r,o){return Hi(t)&&Hi(e)&&(o.set(e,t),ju(t,e,void 0,Xr,o),o.delete(e)),t}function Yr(t){return Ki(t)?void 0:t}function Hr(t,e,n,u,r,o){var i=1&n,a=t.length,c=e.length;if(a!=c&&!(i&&c>a))return!1;var s=o.get(t),l=o.get(e);if(s&&l)return s==e&&l==t;var f=-1,h=!0,p=2&n?new zn:void 0;for(o.set(t,e),o.set(e,t);++f<a;){var D=t[f],y=e[f];if(u)var v=i?u(y,D,f,e,t,o):u(D,y,f,t,e,o);if(void 0!==v){if(v)continue;h=!1;break}if(p){if(!ge(e,(function(t,e){if(!Re(p,e)&&(D===t||r(D,t,n,u,o)))return p.push(e)}))){h=!1;break}}else if(D!==y&&!r(D,y,n,u,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function qr(t){return mo(vo(t,void 0,Mo),t+"")}function $r(t){return Du(t,Ea,no)}function Gr(t){return Du(t,ma,uo)}var Kr=An?function(t){return An.get(t)}:Ja;function Qr(t){for(var e=t.name+"",n=Cn[e],u=bt.call(Cn,e)?n.length:0;u--;){var r=n[u],o=r.func;if(null==o||o==t)return r.name}return e}function Vr(t){return(bt.call(Sn,"placeholder")?Sn:t).placeholder}function Zr(){var t=Sn.iteratee||Ka;return t=t===Ka?Fu:t,arguments.length?t(arguments[0],arguments[1]):t}function Jr(t,e){var n,u,r=t.__data__;return("string"==(u=o(n=e))||"number"==u||"symbol"==u||"boolean"==u?"__proto__"!==n:null===n)?r["string"==typeof e?"string":"hash"]:r.map}function to(t){for(var e=Ea(t),n=e.length;n--;){var u=e[n],r=t[u];e[n]=[u,r,Do(r)]}return e}function eo(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return bu(n)?n:void 0}var no=nn?function(t){return null==t?[]:(t=yt(t),fe(nn(t),(function(e){return $t.call(t,e)})))}:ic,uo=nn?function(t){for(var e=[];t;)ye(e,no(t)),t=Xt(t);return e}:ic,ro=yu;function oo(t,e,n){for(var u=-1,r=(e=sr(e,t)).length,o=!1;++u<r;){var i=xo(e[u]);if(!(o=null!=t&&n(t,i)))break;t=t[i]}return o||++u!=r?o:!!(r=null==t?0:t.length)&&Yi(r)&&co(i,r)&&(Ti(t)||Ri(t))}function io(t){return"function"!=typeof t.constructor||po(t)?{}:On(Xt(t))}function ao(t){return Ti(t)||Ri(t)||!!(Qt&&t&&t[Qt])}function co(t,e){var n=o(t);return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&st.test(t))&&t>-1&&t%1==0&&t<e}function so(t,e,n){if(!Hi(n))return!1;var u=o(e);return!!("number"==u?Ii(n)&&co(e,n.length):"string"==u&&e in n)&&Oi(n[e],t)}function lo(t,e){if(Ti(t))return!1;var n=o(t);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Ji(t))||(H.test(t)||!Y.test(t)||null!=e&&t in yt(e))}function fo(t){var e=Qr(t),n=Sn[e];if("function"!=typeof n||!(e in Rn.prototype))return!1;if(t===n)return!0;var u=Kr(n);return!!u&&t===u[0]}(Dn&&ro(new Dn(new ArrayBuffer(1)))!=F||yn&&ro(new yn)!=v||vn&&"[object Promise]"!=ro(vn.resolve())||dn&&ro(new dn)!=A||gn&&ro(new gn)!=m)&&(ro=function(t){var e=yu(t),n=e==g?t.constructor:void 0,u=n?ko(n):"";if(u)switch(u){case En:return F;case mn:return v;case bn:return"[object Promise]";case Fn:return A;case Bn:return m}return e});var ho=Et?Ni:ac;function po(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ct)}function Do(t){return t==t&&!Hi(t)}function yo(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in yt(n)))}}function vo(t,e,n){return e=cn(void 0===e?t.length-1:e,0),function(){for(var r=arguments,o=-1,i=cn(r.length-e,0),a=u(i);++o<i;)a[o]=r[e+o];o=-1;for(var c=u(e+1);++o<e;)c[o]=r[o];return c[e]=n(a),ie(t,this,c)}}function go(t,e){return e.length<2?t:pu(t,$u(e,0,-1))}function _o(t,e){for(var n=t.length,u=sn(e.length,n),r=_r(t);u--;){var o=e[u];t[u]=co(o,n)?r[o]:void 0}return t}function Ao(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Co=Fo(Yu),Eo=Je||function(t,e){return Gt.setTimeout(t,e)},mo=Fo(Hu);function bo(t,e,n){var u=e+"";return mo(t,function(t,e){var n=e.length;if(!n)return t;var u=n-1;return e[u]=(n>1?"& ":"")+e[u],e=e.join(n>2?", ":" "),t.replace(V,"{\n/* [wrapped with "+e+"] */\n")}(u,function(t,e){return ce(c,(function(n){var u="_."+n[0];e&n[1]&&!he(t,u)&&t.push(u)})),t.sort()}(function(t){var e=t.match(Z);return e?e[1].split(J):[]}(u),n)))}function Fo(t){var e=0,n=0;return function(){var u=ln(),r=16-(u-n);if(n=u,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Bo(t,e){var n=-1,u=t.length,r=u-1;for(e=void 0===e?u:e;++n<e;){var o=zu(n,r),i=t[o];t[o]=t[n],t[n]=i}return t.length=e,t}var wo=function(t){var e=Fi(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(q,(function(t,n,u,r){e.push(u?r.replace(nt,"$1"):n||t)})),e}));function xo(t){if("string"==typeof t||Ji(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ko(t){if(null!=t){try{return mt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function So(t){if(t instanceof Rn)return t.clone();var e=new Pn(t.__wrapped__,t.__chain__);return e.__actions__=_r(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Oo=Lu((function(t,e){return zi(t)?eu(t,au(e,1,zi,!0)):[]})),jo=Lu((function(t,e){var n=Wo(e);return zi(n)&&(n=void 0),zi(t)?eu(t,au(e,1,zi,!0),Zr(n,2)):[]})),Po=Lu((function(t,e){var n=Wo(e);return zi(n)&&(n=void 0),zi(t)?eu(t,au(e,1,zi,!0),void 0,n):[]}));function Ro(t,e,n){var u=null==t?0:t.length;if(!u)return-1;var r=null==n?0:oa(n);return r<0&&(r=cn(u+r,0)),Ce(t,Zr(e,3),r)}function To(t,e,n){var u=null==t?0:t.length;if(!u)return-1;var r=u-1;return void 0!==n&&(r=oa(n),r=n<0?cn(u+r,0):sn(r,u-1)),Ce(t,Zr(e,3),r,!0)}function Mo(t){return(null==t?0:t.length)?au(t,1):[]}function Io(t){return t&&t.length?t[0]:void 0}var zo=Lu((function(t){var e=De(t,ar);return e.length&&e[0]===t[0]?_u(e):[]})),Uo=Lu((function(t){var e=Wo(t),n=De(t,ar);return e===Wo(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?_u(n,Zr(e,2)):[]})),Lo=Lu((function(t){var e=Wo(t),n=De(t,ar);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?_u(n,void 0,e):[]}));function Wo(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var No=Lu(Xo);function Xo(t,e){return t&&t.length&&e&&e.length?Mu(t,e):t}var Yo=qr((function(t,e){var n=null==t?0:t.length,u=Qn(t,e);return Iu(t,De(e,(function(t){return co(t,n)?+t:t})).sort(vr)),u}));function Ho(t){return null==t?t:pn.call(t)}var qo=Lu((function(t){return tr(au(t,1,zi,!0))})),$o=Lu((function(t){var e=Wo(t);return zi(e)&&(e=void 0),tr(au(t,1,zi,!0),Zr(e,2))})),Go=Lu((function(t){var e=Wo(t);return e="function"==typeof e?e:void 0,tr(au(t,1,zi,!0),void 0,e)}));function Ko(t){if(!t||!t.length)return[];var e=0;return t=fe(t,(function(t){if(zi(t))return e=cn(t.length,e),!0})),Se(e,(function(e){return De(t,Be(e))}))}function Qo(t,e){if(!t||!t.length)return[];var n=Ko(t);return null==e?n:De(n,(function(t){return ie(e,void 0,t)}))}var Vo=Lu((function(t,e){return zi(t)?eu(t,e):[]})),Zo=Lu((function(t){return or(fe(t,zi))})),Jo=Lu((function(t){var e=Wo(t);return zi(e)&&(e=void 0),or(fe(t,zi),Zr(e,2))})),ti=Lu((function(t){var e=Wo(t);return e="function"==typeof e?e:void 0,or(fe(t,zi),void 0,e)})),ei=Lu(Ko);var ni=Lu((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,Qo(t,n)}));function ui(t){var e=Sn(t);return e.__chain__=!0,e}function ri(t,e){return e(t)}var oi=qr((function(t){var e=t.length,n=e?t[0]:0,u=this.__wrapped__,r=function(e){return Qn(e,t)};return!(e>1||this.__actions__.length)&&u instanceof Rn&&co(n)?((u=u.slice(n,+n+(e?1:0))).__actions__.push({func:ri,args:[r],thisArg:void 0}),new Pn(u,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(r)}));var ii=Cr((function(t,e,n){bt.call(t,n)?++t[n]:Kn(t,n,1)}));var ai=xr(Ro),ci=xr(To);function si(t,e){return(Ti(t)?ce:nu)(t,Zr(e,3))}function li(t,e){return(Ti(t)?se:uu)(t,Zr(e,3))}var fi=Cr((function(t,e,n){bt.call(t,n)?t[n].push(e):Kn(t,n,[e])}));var hi=Lu((function(t,e,n){var r=-1,o="function"==typeof e,i=Ii(t)?u(t.length):[];return nu(t,(function(t){i[++r]=o?ie(e,t,n):Au(t,e,n)})),i})),pi=Cr((function(t,e,n){Kn(t,n,e)}));function Di(t,e){return(Ti(t)?De:ku)(t,Zr(e,3))}var yi=Cr((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var vi=Lu((function(t,e){if(null==t)return[];var n=e.length;return n>1&&so(t,e[0],e[1])?e=[]:n>2&&so(e[0],e[1],e[2])&&(e=[e[0]]),Ru(t,au(e,1),[])})),di=Ze||function(){return Gt.Date.now()};function gi(t,e,n){return e=n?void 0:e,Wr(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function _i(t,e){var n;if("function"!=typeof e)throw new gt(i);return t=oa(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var Ai=Lu((function(t,e,n){var u=1;if(n.length){var r=Ye(n,Vr(Ai));u|=32}return Wr(t,u,e,n,r)})),Ci=Lu((function(t,e,n){var u=3;if(n.length){var r=Ye(n,Vr(Ci));u|=32}return Wr(e,u,t,n,r)}));function Ei(t,e,n){var u,r,o,a,c,s,l=0,f=!1,h=!1,p=!0;if("function"!=typeof t)throw new gt(i);function D(e){var n=u,o=r;return u=r=void 0,l=e,a=t.apply(o,n)}function y(t){return l=t,c=Eo(d,e),f?D(t):a}function v(t){var n=t-s;return void 0===s||n>=e||n<0||h&&t-l>=o}function d(){var t=di();if(v(t))return g(t);c=Eo(d,function(t){var n=e-(t-s);return h?sn(n,o-(t-l)):n}(t))}function g(t){return c=void 0,p&&u?D(t):(u=r=void 0,a)}function _(){var t=di(),n=v(t);if(u=arguments,r=this,s=t,n){if(void 0===c)return y(s);if(h)return hr(c),c=Eo(d,e),D(s)}return void 0===c&&(c=Eo(d,e)),a}return e=aa(e)||0,Hi(n)&&(f=!!n.leading,o=(h="maxWait"in n)?cn(aa(n.maxWait)||0,e):o,p="trailing"in n?!!n.trailing:p),_.cancel=function(){void 0!==c&&hr(c),l=0,u=s=r=c=void 0},_.flush=function(){return void 0===c?a:g(di())},_}var mi=Lu((function(t,e){return tu(t,1,e)})),bi=Lu((function(t,e,n){return tu(t,aa(e)||0,n)}));function Fi(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new gt(i);var n=function n(){var u=arguments,r=e?e.apply(this,u):u[0],o=n.cache;if(o.has(r))return o.get(r);var i=t.apply(this,u);return n.cache=o.set(r,i)||o,i};return n.cache=new(Fi.Cache||In),n}function Bi(t){if("function"!=typeof t)throw new gt(i);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Fi.Cache=In;var wi=lr((function(t,e){var n=(e=1==e.length&&Ti(e[0])?De(e[0],je(Zr())):De(au(e,1),je(Zr()))).length;return Lu((function(u){for(var r=-1,o=sn(u.length,n);++r<o;)u[r]=e[r].call(this,u[r]);return ie(t,this,u)}))})),xi=Lu((function(t,e){return Wr(t,32,void 0,e,Ye(e,Vr(xi)))})),ki=Lu((function(t,e){return Wr(t,64,void 0,e,Ye(e,Vr(ki)))})),Si=qr((function(t,e){return Wr(t,256,void 0,void 0,void 0,e)}));function Oi(t,e){return t===e||t!=t&&e!=e}var ji=Mr(vu),Pi=Mr((function(t,e){return t>=e})),Ri=Cu(function(){return arguments}())?Cu:function(t){return qi(t)&&bt.call(t,"callee")&&!$t.call(t,"callee")},Ti=u.isArray,Mi=te?je(te):function(t){return qi(t)&&yu(t)==b};function Ii(t){return null!=t&&Yi(t.length)&&!Ni(t)}function zi(t){return qi(t)&&Ii(t)}var Ui=un||ac,Li=ee?je(ee):function(t){return qi(t)&&yu(t)==h};function Wi(t){if(!qi(t))return!1;var e=yu(t);return e==p||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Ki(t)}function Ni(t){if(!Hi(t))return!1;var e=yu(t);return e==D||e==y||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Xi(t){return"number"==typeof t&&t==oa(t)}function Yi(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Hi(t){var e=o(t);return null!=t&&("object"==e||"function"==e)}function qi(t){return null!=t&&"object"==o(t)}var $i=ne?je(ne):function(t){return qi(t)&&ro(t)==v};function Gi(t){return"number"==typeof t||qi(t)&&yu(t)==d}function Ki(t){if(!qi(t)||yu(t)!=g)return!1;var e=Xt(t);if(null===e)return!0;var n=bt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&mt.call(n)==xt}var Qi=ue?je(ue):function(t){return qi(t)&&yu(t)==_};var Vi=re?je(re):function(t){return qi(t)&&ro(t)==A};function Zi(t){return"string"==typeof t||!Ti(t)&&qi(t)&&yu(t)==C}function Ji(t){return"symbol"==o(t)||qi(t)&&yu(t)==E}var ta=oe?je(oe):function(t){return qi(t)&&Yi(t.length)&&!!Wt[yu(t)]};var ea=Mr(xu),na=Mr((function(t,e){return t<=e}));function ua(t){if(!t)return[];if(Ii(t))return Zi(t)?Ge(t):_r(t);if(Zt&&t[Zt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Zt]());var e=ro(t);return(e==v?Ne:e==A?He:Oa)(t)}function ra(t){return t?(t=aa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function oa(t){var e=ra(t),n=e%1;return e==e?n?e-n:e:0}function ia(t){return t?Vn(oa(t),0,4294967295):0}function aa(t){if("number"==typeof t)return t;if(Ji(t))return NaN;if(Hi(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Hi(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Oe(t);var n=it.test(t);return n||ct.test(t)?Ht(t.slice(2),n?2:8):ot.test(t)?NaN:+t}function ca(t){return Ar(t,ma(t))}function sa(t){return null==t?"":Ju(t)}var la=Er((function(t,e){if(po(e)||Ii(e))Ar(e,Ea(e),t);else for(var n in e)bt.call(e,n)&&Hn(t,n,e[n])})),fa=Er((function(t,e){Ar(e,ma(e),t)})),ha=Er((function(t,e,n,u){Ar(e,ma(e),t,u)})),pa=Er((function(t,e,n,u){Ar(e,Ea(e),t,u)})),Da=qr(Qn);var ya=Lu((function(t,e){t=yt(t);var n=-1,u=e.length,r=u>2?e[2]:void 0;for(r&&so(e[0],e[1],r)&&(u=1);++n<u;)for(var o=e[n],i=ma(o),a=-1,c=i.length;++a<c;){var s=i[a],l=t[s];(void 0===l||Oi(l,Ct[s])&&!bt.call(t,s))&&(t[s]=o[s])}return t})),va=Lu((function(t){return t.push(void 0,Xr),ie(Fa,void 0,t)}));function da(t,e,n){var u=null==t?void 0:pu(t,e);return void 0===u?n:u}function ga(t,e){return null!=t&&oo(t,e,gu)}var _a=Or((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=wt.call(e)),t[e]=n}),Ha(Ga)),Aa=Or((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=wt.call(e)),bt.call(t,e)?t[e].push(n):t[e]=[n]}),Zr),Ca=Lu(Au);function Ea(t){return Ii(t)?Ln(t):Bu(t)}function ma(t){return Ii(t)?Ln(t,!0):wu(t)}var ba=Er((function(t,e,n){ju(t,e,n)})),Fa=Er((function(t,e,n,u){ju(t,e,n,u)})),Ba=qr((function(t,e){var n={};if(null==t)return n;var u=!1;e=De(e,(function(e){return e=sr(e,t),u||(u=e.length>1),e})),Ar(t,Gr(t),n),u&&(n=Zn(n,7,Yr));for(var r=e.length;r--;)er(n,e[r]);return n}));var wa=qr((function(t,e){return null==t?{}:function(t,e){return Tu(t,e,(function(e,n){return ga(t,n)}))}(t,e)}));function xa(t,e){if(null==t)return{};var n=De(Gr(t),(function(t){return[t]}));return e=Zr(e),Tu(t,n,(function(t,n){return e(t,n[0])}))}var ka=Lr(Ea),Sa=Lr(ma);function Oa(t){return null==t?[]:Pe(t,Ea(t))}var ja=Br((function(t,e,n){return e=e.toLowerCase(),t+(n?Pa(e):e)}));function Pa(t){return Wa(sa(t).toLowerCase())}function Ra(t){return(t=sa(t))&&t.replace(lt,ze).replace(Rt,"")}var Ta=Br((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Ma=Br((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ia=Fr("toLowerCase");var za=Br((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ua=Br((function(t,e,n){return t+(n?" ":"")+Wa(e)}));var La=Br((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Wa=Fr("toUpperCase");function Na(t,e,n){return t=sa(t),void 0===(e=n?void 0:e)?function(t){return zt.test(t)}(t)?function(t){return t.match(Mt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Xa=Lu((function(t,e){try{return ie(t,void 0,e)}catch(t){return Wi(t)?t:new Q(t)}})),Ya=qr((function(t,e){return ce(e,(function(e){e=xo(e),Kn(t,e,Ai(t[e],t))})),t}));function Ha(t){return function(){return t}}var qa=kr(),$a=kr(!0);function Ga(t){return t}function Ka(t){return Fu("function"==typeof t?t:Zn(t,1))}var Qa=Lu((function(t,e){return function(n){return Au(n,t,e)}})),Va=Lu((function(t,e){return function(n){return Au(t,n,e)}}));function Za(t,e,n){var u=Ea(e),r=hu(e,u);null!=n||Hi(e)&&(r.length||!u.length)||(n=e,e=t,t=this,r=hu(e,Ea(e)));var o=!(Hi(n)&&"chain"in n&&!n.chain),i=Ni(t);return ce(r,(function(n){var u=e[n];t[n]=u,i&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),r=n.__actions__=_r(this.__actions__);return r.push({func:u,args:arguments,thisArg:t}),n.__chain__=e,n}return u.apply(t,ye([this.value()],arguments))})})),t}function Ja(){}var tc=Pr(De),ec=Pr(le),nc=Pr(ge);function uc(t){return lo(t)?Be(xo(t)):function(t){return function(e){return pu(e,t)}}(t)}var rc=Tr(),oc=Tr(!0);function ic(){return[]}function ac(){return!1}var cc=jr((function(t,e){return t+e}),0),sc=zr("ceil"),lc=jr((function(t,e){return t/e}),1),fc=zr("floor");var hc,pc=jr((function(t,e){return t*e}),1),Dc=zr("round"),yc=jr((function(t,e){return t-e}),0);return Sn.after=function(t,e){if("function"!=typeof e)throw new gt(i);return t=oa(t),function(){if(--t<1)return e.apply(this,arguments)}},Sn.ary=gi,Sn.assign=la,Sn.assignIn=fa,Sn.assignInWith=ha,Sn.assignWith=pa,Sn.at=Da,Sn.before=_i,Sn.bind=Ai,Sn.bindAll=Ya,Sn.bindKey=Ci,Sn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ti(t)?t:[t]},Sn.chain=ui,Sn.chunk=function(t,e,n){e=(n?so(t,e,n):void 0===e)?1:cn(oa(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var o=0,i=0,a=u(tn(r/e));o<r;)a[i++]=$u(t,o,o+=e);return a},Sn.compact=function(t){for(var e=-1,n=null==t?0:t.length,u=0,r=[];++e<n;){var o=t[e];o&&(r[u++]=o)}return r},Sn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=u(t-1),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return ye(Ti(n)?_r(n):[n],au(e,1))},Sn.cond=function(t){var e=null==t?0:t.length,n=Zr();return t=e?De(t,(function(t){if("function"!=typeof t[1])throw new gt(i);return[n(t[0]),t[1]]})):[],Lu((function(n){for(var u=-1;++u<e;){var r=t[u];if(ie(r[0],this,n))return ie(r[1],this,n)}}))},Sn.conforms=function(t){return function(t){var e=Ea(t);return function(n){return Jn(n,t,e)}}(Zn(t,1))},Sn.constant=Ha,Sn.countBy=ii,Sn.create=function(t,e){var n=On(t);return null==e?n:Gn(n,e)},Sn.curry=function t(e,n,u){var r=Wr(e,8,void 0,void 0,void 0,void 0,void 0,n=u?void 0:n);return r.placeholder=t.placeholder,r},Sn.curryRight=function t(e,n,u){var r=Wr(e,16,void 0,void 0,void 0,void 0,void 0,n=u?void 0:n);return r.placeholder=t.placeholder,r},Sn.debounce=Ei,Sn.defaults=ya,Sn.defaultsDeep=va,Sn.defer=mi,Sn.delay=bi,Sn.difference=Oo,Sn.differenceBy=jo,Sn.differenceWith=Po,Sn.drop=function(t,e,n){var u=null==t?0:t.length;return u?$u(t,(e=n||void 0===e?1:oa(e))<0?0:e,u):[]},Sn.dropRight=function(t,e,n){var u=null==t?0:t.length;return u?$u(t,0,(e=u-(e=n||void 0===e?1:oa(e)))<0?0:e):[]},Sn.dropRightWhile=function(t,e){return t&&t.length?ur(t,Zr(e,3),!0,!0):[]},Sn.dropWhile=function(t,e){return t&&t.length?ur(t,Zr(e,3),!0):[]},Sn.fill=function(t,e,n,u){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&so(t,e,n)&&(n=0,u=r),function(t,e,n,u){var r=t.length;for((n=oa(n))<0&&(n=-n>r?0:r+n),(u=void 0===u||u>r?r:oa(u))<0&&(u+=r),u=n>u?0:ia(u);n<u;)t[n++]=e;return t}(t,e,n,u)):[]},Sn.filter=function(t,e){return(Ti(t)?fe:iu)(t,Zr(e,3))},Sn.flatMap=function(t,e){return au(Di(t,e),1)},Sn.flatMapDeep=function(t,e){return au(Di(t,e),1/0)},Sn.flatMapDepth=function(t,e,n){return n=void 0===n?1:oa(n),au(Di(t,e),n)},Sn.flatten=Mo,Sn.flattenDeep=function(t){return(null==t?0:t.length)?au(t,1/0):[]},Sn.flattenDepth=function(t,e){return(null==t?0:t.length)?au(t,e=void 0===e?1:oa(e)):[]},Sn.flip=function(t){return Wr(t,512)},Sn.flow=qa,Sn.flowRight=$a,Sn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,u={};++e<n;){var r=t[e];u[r[0]]=r[1]}return u},Sn.functions=function(t){return null==t?[]:hu(t,Ea(t))},Sn.functionsIn=function(t){return null==t?[]:hu(t,ma(t))},Sn.groupBy=fi,Sn.initial=function(t){return(null==t?0:t.length)?$u(t,0,-1):[]},Sn.intersection=zo,Sn.intersectionBy=Uo,Sn.intersectionWith=Lo,Sn.invert=_a,Sn.invertBy=Aa,Sn.invokeMap=hi,Sn.iteratee=Ka,Sn.keyBy=pi,Sn.keys=Ea,Sn.keysIn=ma,Sn.map=Di,Sn.mapKeys=function(t,e){var n={};return e=Zr(e,3),lu(t,(function(t,u,r){Kn(n,e(t,u,r),t)})),n},Sn.mapValues=function(t,e){var n={};return e=Zr(e,3),lu(t,(function(t,u,r){Kn(n,u,e(t,u,r))})),n},Sn.matches=function(t){return Su(Zn(t,1))},Sn.matchesProperty=function(t,e){return Ou(t,Zn(e,1))},Sn.memoize=Fi,Sn.merge=ba,Sn.mergeWith=Fa,Sn.method=Qa,Sn.methodOf=Va,Sn.mixin=Za,Sn.negate=Bi,Sn.nthArg=function(t){return t=oa(t),Lu((function(e){return Pu(e,t)}))},Sn.omit=Ba,Sn.omitBy=function(t,e){return xa(t,Bi(Zr(e)))},Sn.once=function(t){return _i(2,t)},Sn.orderBy=function(t,e,n,u){return null==t?[]:(Ti(e)||(e=null==e?[]:[e]),Ti(n=u?void 0:n)||(n=null==n?[]:[n]),Ru(t,e,n))},Sn.over=tc,Sn.overArgs=wi,Sn.overEvery=ec,Sn.overSome=nc,Sn.partial=xi,Sn.partialRight=ki,Sn.partition=yi,Sn.pick=wa,Sn.pickBy=xa,Sn.property=uc,Sn.propertyOf=function(t){return function(e){return null==t?void 0:pu(t,e)}},Sn.pull=No,Sn.pullAll=Xo,Sn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Mu(t,e,Zr(n,2)):t},Sn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Mu(t,e,void 0,n):t},Sn.pullAt=Yo,Sn.range=rc,Sn.rangeRight=oc,Sn.rearg=Si,Sn.reject=function(t,e){return(Ti(t)?fe:iu)(t,Bi(Zr(e,3)))},Sn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var u=-1,r=[],o=t.length;for(e=Zr(e,3);++u<o;){var i=t[u];e(i,u,t)&&(n.push(i),r.push(u))}return Iu(t,r),n},Sn.rest=function(t,e){if("function"!=typeof t)throw new gt(i);return Lu(t,e=void 0===e?e:oa(e))},Sn.reverse=Ho,Sn.sampleSize=function(t,e,n){return e=(n?so(t,e,n):void 0===e)?1:oa(e),(Ti(t)?Nn:Nu)(t,e)},Sn.set=function(t,e,n){return null==t?t:Xu(t,e,n)},Sn.setWith=function(t,e,n,u){return u="function"==typeof u?u:void 0,null==t?t:Xu(t,e,n,u)},Sn.shuffle=function(t){return(Ti(t)?Xn:qu)(t)},Sn.slice=function(t,e,n){var u=null==t?0:t.length;return u?(n&&"number"!=typeof n&&so(t,e,n)?(e=0,n=u):(e=null==e?0:oa(e),n=void 0===n?u:oa(n)),$u(t,e,n)):[]},Sn.sortBy=vi,Sn.sortedUniq=function(t){return t&&t.length?Vu(t):[]},Sn.sortedUniqBy=function(t,e){return t&&t.length?Vu(t,Zr(e,2)):[]},Sn.split=function(t,e,n){return n&&"number"!=typeof n&&so(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=sa(t))&&("string"==typeof e||null!=e&&!Qi(e))&&!(e=Ju(e))&&We(t)?fr(Ge(t),0,n):t.split(e,n):[]},Sn.spread=function(t,e){if("function"!=typeof t)throw new gt(i);return e=null==e?0:cn(oa(e),0),Lu((function(n){var u=n[e],r=fr(n,0,e);return u&&ye(r,u),ie(t,this,r)}))},Sn.tail=function(t){var e=null==t?0:t.length;return e?$u(t,1,e):[]},Sn.take=function(t,e,n){return t&&t.length?$u(t,0,(e=n||void 0===e?1:oa(e))<0?0:e):[]},Sn.takeRight=function(t,e,n){var u=null==t?0:t.length;return u?$u(t,(e=u-(e=n||void 0===e?1:oa(e)))<0?0:e,u):[]},Sn.takeRightWhile=function(t,e){return t&&t.length?ur(t,Zr(e,3),!1,!0):[]},Sn.takeWhile=function(t,e){return t&&t.length?ur(t,Zr(e,3)):[]},Sn.tap=function(t,e){return e(t),t},Sn.throttle=function(t,e,n){var u=!0,r=!0;if("function"!=typeof t)throw new gt(i);return Hi(n)&&(u="leading"in n?!!n.leading:u,r="trailing"in n?!!n.trailing:r),Ei(t,e,{leading:u,maxWait:e,trailing:r})},Sn.thru=ri,Sn.toArray=ua,Sn.toPairs=ka,Sn.toPairsIn=Sa,Sn.toPath=function(t){return Ti(t)?De(t,xo):Ji(t)?[t]:_r(wo(sa(t)))},Sn.toPlainObject=ca,Sn.transform=function(t,e,n){var u=Ti(t),r=u||Ui(t)||ta(t);if(e=Zr(e,4),null==n){var o=t&&t.constructor;n=r?u?new o:[]:Hi(t)&&Ni(o)?On(Xt(t)):{}}return(r?ce:lu)(t,(function(t,u,r){return e(n,t,u,r)})),n},Sn.unary=function(t){return gi(t,1)},Sn.union=qo,Sn.unionBy=$o,Sn.unionWith=Go,Sn.uniq=function(t){return t&&t.length?tr(t):[]},Sn.uniqBy=function(t,e){return t&&t.length?tr(t,Zr(e,2)):[]},Sn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?tr(t,void 0,e):[]},Sn.unset=function(t,e){return null==t||er(t,e)},Sn.unzip=Ko,Sn.unzipWith=Qo,Sn.update=function(t,e,n){return null==t?t:nr(t,e,cr(n))},Sn.updateWith=function(t,e,n,u){return u="function"==typeof u?u:void 0,null==t?t:nr(t,e,cr(n),u)},Sn.values=Oa,Sn.valuesIn=function(t){return null==t?[]:Pe(t,ma(t))},Sn.without=Vo,Sn.words=Na,Sn.wrap=function(t,e){return xi(cr(e),t)},Sn.xor=Zo,Sn.xorBy=Jo,Sn.xorWith=ti,Sn.zip=ei,Sn.zipObject=function(t,e){return ir(t||[],e||[],Hn)},Sn.zipObjectDeep=function(t,e){return ir(t||[],e||[],Xu)},Sn.zipWith=ni,Sn.entries=ka,Sn.entriesIn=Sa,Sn.extend=fa,Sn.extendWith=ha,Za(Sn,Sn),Sn.add=cc,Sn.attempt=Xa,Sn.camelCase=ja,Sn.capitalize=Pa,Sn.ceil=sc,Sn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=aa(n))==n?n:0),void 0!==e&&(e=(e=aa(e))==e?e:0),Vn(aa(t),e,n)},Sn.clone=function(t){return Zn(t,4)},Sn.cloneDeep=function(t){return Zn(t,5)},Sn.cloneDeepWith=function(t,e){return Zn(t,5,e="function"==typeof e?e:void 0)},Sn.cloneWith=function(t,e){return Zn(t,4,e="function"==typeof e?e:void 0)},Sn.conformsTo=function(t,e){return null==e||Jn(t,e,Ea(e))},Sn.deburr=Ra,Sn.defaultTo=function(t,e){return null==t||t!=t?e:t},Sn.divide=lc,Sn.endsWith=function(t,e,n){t=sa(t),e=Ju(e);var u=t.length,r=n=void 0===n?u:Vn(oa(n),0,u);return(n-=e.length)>=0&&t.slice(n,r)==e},Sn.eq=Oi,Sn.escape=function(t){return(t=sa(t))&&L.test(t)?t.replace(z,Ue):t},Sn.escapeRegExp=function(t){return(t=sa(t))&&G.test(t)?t.replace($,"\\$&"):t},Sn.every=function(t,e,n){var u=Ti(t)?le:ru;return n&&so(t,e,n)&&(e=void 0),u(t,Zr(e,3))},Sn.find=ai,Sn.findIndex=Ro,Sn.findKey=function(t,e){return Ae(t,Zr(e,3),lu)},Sn.findLast=ci,Sn.findLastIndex=To,Sn.findLastKey=function(t,e){return Ae(t,Zr(e,3),fu)},Sn.floor=fc,Sn.forEach=si,Sn.forEachRight=li,Sn.forIn=function(t,e){return null==t?t:cu(t,Zr(e,3),ma)},Sn.forInRight=function(t,e){return null==t?t:su(t,Zr(e,3),ma)},Sn.forOwn=function(t,e){return t&&lu(t,Zr(e,3))},Sn.forOwnRight=function(t,e){return t&&fu(t,Zr(e,3))},Sn.get=da,Sn.gt=ji,Sn.gte=Pi,Sn.has=function(t,e){return null!=t&&oo(t,e,du)},Sn.hasIn=ga,Sn.head=Io,Sn.identity=Ga,Sn.includes=function(t,e,n,u){t=Ii(t)?t:Oa(t),n=n&&!u?oa(n):0;var r=t.length;return n<0&&(n=cn(r+n,0)),Zi(t)?n<=r&&t.indexOf(e,n)>-1:!!r&&Ee(t,e,n)>-1},Sn.indexOf=function(t,e,n){var u=null==t?0:t.length;if(!u)return-1;var r=null==n?0:oa(n);return r<0&&(r=cn(u+r,0)),Ee(t,e,r)},Sn.inRange=function(t,e,n){return e=ra(e),void 0===n?(n=e,e=0):n=ra(n),function(t,e,n){return t>=sn(e,n)&&t<cn(e,n)}(t=aa(t),e,n)},Sn.invoke=Ca,Sn.isArguments=Ri,Sn.isArray=Ti,Sn.isArrayBuffer=Mi,Sn.isArrayLike=Ii,Sn.isArrayLikeObject=zi,Sn.isBoolean=function(t){return!0===t||!1===t||qi(t)&&yu(t)==f},Sn.isBuffer=Ui,Sn.isDate=Li,Sn.isElement=function(t){return qi(t)&&1===t.nodeType&&!Ki(t)},Sn.isEmpty=function(t){if(null==t)return!0;if(Ii(t)&&(Ti(t)||"string"==typeof t||"function"==typeof t.splice||Ui(t)||ta(t)||Ri(t)))return!t.length;var e=ro(t);if(e==v||e==A)return!t.size;if(po(t))return!Bu(t).length;for(var n in t)if(bt.call(t,n))return!1;return!0},Sn.isEqual=function(t,e){return Eu(t,e)},Sn.isEqualWith=function(t,e,n){var u=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===u?Eu(t,e,void 0,n):!!u},Sn.isError=Wi,Sn.isFinite=function(t){return"number"==typeof t&&rn(t)},Sn.isFunction=Ni,Sn.isInteger=Xi,Sn.isLength=Yi,Sn.isMap=$i,Sn.isMatch=function(t,e){return t===e||mu(t,e,to(e))},Sn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,mu(t,e,to(e),n)},Sn.isNaN=function(t){return Gi(t)&&t!=+t},Sn.isNative=function(t){if(ho(t))throw new Q("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return bu(t)},Sn.isNil=function(t){return null==t},Sn.isNull=function(t){return null===t},Sn.isNumber=Gi,Sn.isObject=Hi,Sn.isObjectLike=qi,Sn.isPlainObject=Ki,Sn.isRegExp=Qi,Sn.isSafeInteger=function(t){return Xi(t)&&t>=-9007199254740991&&t<=9007199254740991},Sn.isSet=Vi,Sn.isString=Zi,Sn.isSymbol=Ji,Sn.isTypedArray=ta,Sn.isUndefined=function(t){return void 0===t},Sn.isWeakMap=function(t){return qi(t)&&ro(t)==m},Sn.isWeakSet=function(t){return qi(t)&&"[object WeakSet]"==yu(t)},Sn.join=function(t,e){return null==t?"":on.call(t,e)},Sn.kebabCase=Ta,Sn.last=Wo,Sn.lastIndexOf=function(t,e,n){var u=null==t?0:t.length;if(!u)return-1;var r=u;return void 0!==n&&(r=(r=oa(n))<0?cn(u+r,0):sn(r,u-1)),e==e?function(t,e,n){for(var u=n+1;u--;)if(t[u]===e)return u;return u}(t,e,r):Ce(t,be,r,!0)},Sn.lowerCase=Ma,Sn.lowerFirst=Ia,Sn.lt=ea,Sn.lte=na,Sn.max=function(t){return t&&t.length?ou(t,Ga,vu):void 0},Sn.maxBy=function(t,e){return t&&t.length?ou(t,Zr(e,2),vu):void 0},Sn.mean=function(t){return Fe(t,Ga)},Sn.meanBy=function(t,e){return Fe(t,Zr(e,2))},Sn.min=function(t){return t&&t.length?ou(t,Ga,xu):void 0},Sn.minBy=function(t,e){return t&&t.length?ou(t,Zr(e,2),xu):void 0},Sn.stubArray=ic,Sn.stubFalse=ac,Sn.stubObject=function(){return{}},Sn.stubString=function(){return""},Sn.stubTrue=function(){return!0},Sn.multiply=pc,Sn.nth=function(t,e){return t&&t.length?Pu(t,oa(e)):void 0},Sn.noConflict=function(){return Gt._===this&&(Gt._=kt),this},Sn.noop=Ja,Sn.now=di,Sn.pad=function(t,e,n){t=sa(t);var u=(e=oa(e))?$e(t):0;if(!e||u>=e)return t;var r=(e-u)/2;return Rr(en(r),n)+t+Rr(tn(r),n)},Sn.padEnd=function(t,e,n){t=sa(t);var u=(e=oa(e))?$e(t):0;return e&&u<e?t+Rr(e-u,n):t},Sn.padStart=function(t,e,n){t=sa(t);var u=(e=oa(e))?$e(t):0;return e&&u<e?Rr(e-u,n)+t:t},Sn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),fn(sa(t).replace(K,""),e||0)},Sn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&so(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=ra(t),void 0===e?(e=t,t=0):e=ra(e)),t>e){var u=t;t=e,e=u}if(n||t%1||e%1){var r=hn();return sn(t+r*(e-t+Yt("1e-"+((r+"").length-1))),e)}return zu(t,e)},Sn.reduce=function(t,e,n){var u=Ti(t)?ve:xe,r=arguments.length<3;return u(t,Zr(e,4),n,r,nu)},Sn.reduceRight=function(t,e,n){var u=Ti(t)?de:xe,r=arguments.length<3;return u(t,Zr(e,4),n,r,uu)},Sn.repeat=function(t,e,n){return e=(n?so(t,e,n):void 0===e)?1:oa(e),Uu(sa(t),e)},Sn.replace=function(){var t=arguments,e=sa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Sn.result=function(t,e,n){var u=-1,r=(e=sr(e,t)).length;for(r||(r=1,t=void 0);++u<r;){var o=null==t?void 0:t[xo(e[u])];void 0===o&&(u=r,o=n),t=Ni(o)?o.call(t):o}return t},Sn.round=Dc,Sn.runInContext=t,Sn.sample=function(t){return(Ti(t)?Wn:Wu)(t)},Sn.size=function(t){if(null==t)return 0;if(Ii(t))return Zi(t)?$e(t):t.length;var e=ro(t);return e==v||e==A?t.size:Bu(t).length},Sn.snakeCase=za,Sn.some=function(t,e,n){var u=Ti(t)?ge:Gu;return n&&so(t,e,n)&&(e=void 0),u(t,Zr(e,3))},Sn.sortedIndex=function(t,e){return Ku(t,e)},Sn.sortedIndexBy=function(t,e,n){return Qu(t,e,Zr(n,2))},Sn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var u=Ku(t,e);if(u<n&&Oi(t[u],e))return u}return-1},Sn.sortedLastIndex=function(t,e){return Ku(t,e,!0)},Sn.sortedLastIndexBy=function(t,e,n){return Qu(t,e,Zr(n,2),!0)},Sn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Ku(t,e,!0)-1;if(Oi(t[n],e))return n}return-1},Sn.startCase=Ua,Sn.startsWith=function(t,e,n){return t=sa(t),n=null==n?0:Vn(oa(n),0,t.length),e=Ju(e),t.slice(n,n+e.length)==e},Sn.subtract=yc,Sn.sum=function(t){return t&&t.length?ke(t,Ga):0},Sn.sumBy=function(t,e){return t&&t.length?ke(t,Zr(e,2)):0},Sn.template=function(t,e,n){var u=Sn.templateSettings;n&&so(t,e,n)&&(e=void 0),t=sa(t),e=ha({},e,u,Nr);var r,o,i=ha({},e.imports,u.imports,Nr),a=Ea(i),c=Pe(i,a),s=0,l=e.interpolate||ft,f="__p += '",h=vt((e.escape||ft).source+"|"+l.source+"|"+(l===X?ut:ft).source+"|"+(e.evaluate||ft).source+"|$","g"),p="//# sourceURL="+(bt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Lt+"]")+"\n";t.replace(h,(function(e,n,u,i,a,c){return u||(u=i),f+=t.slice(s,c).replace(ht,Le),n&&(r=!0,f+="' +\n__e("+n+") +\n'"),a&&(o=!0,f+="';\n"+a+";\n__p += '"),u&&(f+="' +\n((__t = ("+u+")) == null ? '' : __t) +\n'"),s=c+e.length,e})),f+="';\n";var D=bt.call(e,"variable")&&e.variable;if(D){if(et.test(D))throw new Q("Invalid `variable` option passed into `_.template`")}else f="with (obj) {\n"+f+"\n}\n";f=(o?f.replace(R,""):f).replace(T,"$1").replace(M,"$1;"),f="function("+(D||"obj")+") {\n"+(D?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Xa((function(){return pt(a,p+"return "+f).apply(void 0,c)}));if(y.source=f,Wi(y))throw y;return y},Sn.times=function(t,e){if((t=oa(t))<1||t>9007199254740991)return[];var n=4294967295,u=sn(t,4294967295);t-=4294967295;for(var r=Se(u,e=Zr(e));++n<t;)e(n);return r},Sn.toFinite=ra,Sn.toInteger=oa,Sn.toLength=ia,Sn.toLower=function(t){return sa(t).toLowerCase()},Sn.toNumber=aa,Sn.toSafeInteger=function(t){return t?Vn(oa(t),-9007199254740991,9007199254740991):0===t?t:0},Sn.toString=sa,Sn.toUpper=function(t){return sa(t).toUpperCase()},Sn.trim=function(t,e,n){if((t=sa(t))&&(n||void 0===e))return Oe(t);if(!t||!(e=Ju(e)))return t;var u=Ge(t),r=Ge(e);return fr(u,Te(u,r),Me(u,r)+1).join("")},Sn.trimEnd=function(t,e,n){if((t=sa(t))&&(n||void 0===e))return t.slice(0,Ke(t)+1);if(!t||!(e=Ju(e)))return t;var u=Ge(t);return fr(u,0,Me(u,Ge(e))+1).join("")},Sn.trimStart=function(t,e,n){if((t=sa(t))&&(n||void 0===e))return t.replace(K,"");if(!t||!(e=Ju(e)))return t;var u=Ge(t);return fr(u,Te(u,Ge(e))).join("")},Sn.truncate=function(t,e){var n=30,u="...";if(Hi(e)){var r="separator"in e?e.separator:r;n="length"in e?oa(e.length):n,u="omission"in e?Ju(e.omission):u}var o=(t=sa(t)).length;if(We(t)){var i=Ge(t);o=i.length}if(n>=o)return t;var a=n-$e(u);if(a<1)return u;var c=i?fr(i,0,a).join(""):t.slice(0,a);if(void 0===r)return c+u;if(i&&(a+=c.length-a),Qi(r)){if(t.slice(a).search(r)){var s,l=c;for(r.global||(r=vt(r.source,sa(rt.exec(r))+"g")),r.lastIndex=0;s=r.exec(l);)var f=s.index;c=c.slice(0,void 0===f?a:f)}}else if(t.indexOf(Ju(r),a)!=a){var h=c.lastIndexOf(r);h>-1&&(c=c.slice(0,h))}return c+u},Sn.unescape=function(t){return(t=sa(t))&&U.test(t)?t.replace(I,Qe):t},Sn.uniqueId=function(t){var e=++Ft;return sa(t)+e},Sn.upperCase=La,Sn.upperFirst=Wa,Sn.each=si,Sn.eachRight=li,Sn.first=Io,Za(Sn,(hc={},lu(Sn,(function(t,e){bt.call(Sn.prototype,e)||(hc[e]=t)})),hc),{chain:!1}),Sn.VERSION="4.17.21",ce(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Sn[t].placeholder=Sn})),ce(["drop","take"],(function(t,e){Rn.prototype[t]=function(n){n=void 0===n?1:cn(oa(n),0);var u=this.__filtered__&&!e?new Rn(this):this.clone();return u.__filtered__?u.__takeCount__=sn(n,u.__takeCount__):u.__views__.push({size:sn(n,4294967295),type:t+(u.__dir__<0?"Right":"")}),u},Rn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ce(["filter","map","takeWhile"],(function(t,e){var n=e+1,u=1==n||3==n;Rn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Zr(t,3),type:n}),e.__filtered__=e.__filtered__||u,e}})),ce(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Rn.prototype[t]=function(){return this[n](1).value()[0]}})),ce(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Rn.prototype[t]=function(){return this.__filtered__?new Rn(this):this[n](1)}})),Rn.prototype.compact=function(){return this.filter(Ga)},Rn.prototype.find=function(t){return this.filter(t).head()},Rn.prototype.findLast=function(t){return this.reverse().find(t)},Rn.prototype.invokeMap=Lu((function(t,e){return"function"==typeof t?new Rn(this):this.map((function(n){return Au(n,t,e)}))})),Rn.prototype.reject=function(t){return this.filter(Bi(Zr(t)))},Rn.prototype.slice=function(t,e){t=oa(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Rn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=oa(e))<0?n.dropRight(-e):n.take(e-t)),n)},Rn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Rn.prototype.toArray=function(){return this.take(4294967295)},lu(Rn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),u=/^(?:head|last)$/.test(e),r=Sn[u?"take"+("last"==e?"Right":""):e],o=u||/^find/.test(e);r&&(Sn.prototype[e]=function(){var e=this.__wrapped__,i=u?[1]:arguments,a=e instanceof Rn,c=i[0],s=a||Ti(e),l=function(t){var e=r.apply(Sn,ye([t],i));return u&&f?e[0]:e};s&&n&&"function"==typeof c&&1!=c.length&&(a=s=!1);var f=this.__chain__,h=!!this.__actions__.length,p=o&&!f,D=a&&!h;if(!o&&s){e=D?e:new Rn(this);var y=t.apply(e,i);return y.__actions__.push({func:ri,args:[l],thisArg:void 0}),new Pn(y,f)}return p&&D?t.apply(this,i):(y=this.thru(l),p?u?y.value()[0]:y.value():y)})})),ce(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",u=/^(?:pop|shift)$/.test(t);Sn.prototype[t]=function(){var t=arguments;if(u&&!this.__chain__){var r=this.value();return e.apply(Ti(r)?r:[],t)}return this[n]((function(n){return e.apply(Ti(n)?n:[],t)}))}})),lu(Rn.prototype,(function(t,e){var n=Sn[e];if(n){var u=n.name+"";bt.call(Cn,u)||(Cn[u]=[]),Cn[u].push({name:e,func:n})}})),Cn[Sr(void 0,2).name]=[{name:"wrapper",func:void 0}],Rn.prototype.clone=function(){var t=new Rn(this.__wrapped__);return t.__actions__=_r(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=_r(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=_r(this.__views__),t},Rn.prototype.reverse=function(){if(this.__filtered__){var t=new Rn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Rn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ti(t),u=e<0,r=n?t.length:0,o=function(t,e,n){var u=-1,r=n.length;for(;++u<r;){var o=n[u],i=o.size;switch(o.type){case"drop":t+=i;break;case"dropRight":e-=i;break;case"take":e=sn(e,t+i);break;case"takeRight":t=cn(t,e-i)}}return{start:t,end:e}}(0,r,this.__views__),i=o.start,a=o.end,c=a-i,s=u?a:i-1,l=this.__iteratees__,f=l.length,h=0,p=sn(c,this.__takeCount__);if(!n||!u&&r==c&&p==c)return rr(t,this.__actions__);var D=[];t:for(;c--&&h<p;){for(var y=-1,v=t[s+=e];++y<f;){var d=l[y],g=d.iteratee,_=d.type,A=g(v);if(2==_)v=A;else if(!A){if(1==_)continue t;break t}}D[h++]=v}return D},Sn.prototype.at=oi,Sn.prototype.chain=function(){return ui(this)},Sn.prototype.commit=function(){return new Pn(this.value(),this.__chain__)},Sn.prototype.next=function(){void 0===this.__values__&&(this.__values__=ua(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Sn.prototype.plant=function(t){for(var e,n=this;n instanceof jn;){var u=So(n);u.__index__=0,u.__values__=void 0,e?r.__wrapped__=u:e=u;var r=u;n=n.__wrapped__}return r.__wrapped__=t,e},Sn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Rn){var e=t;return this.__actions__.length&&(e=new Rn(this)),(e=e.reverse()).__actions__.push({func:ri,args:[Ho],thisArg:void 0}),new Pn(e,this.__chain__)}return this.thru(Ho)},Sn.prototype.toJSON=Sn.prototype.valueOf=Sn.prototype.value=function(){return rr(this.__wrapped__,this.__actions__)},Sn.prototype.first=Sn.prototype.head,Zt&&(Sn.prototype[Zt]=function(){return this}),Sn}();"object"==o(n(6))&&n(6)?(Gt._=Ve,void 0===(r=function(){return Ve}.call(e,n,e,u))||(u.exports=r)):Qt?((Qt.exports=Ve)._=Ve,Kt._=Ve):Gt._=Ve}).call(this)}).call(this,n(8),n(9)(t))},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return y}));var u=n(3),r=n(2);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function c(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=p(t)););return t}(t,e);if(u){var r=Object.getOwnPropertyDescriptor(u,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=p(t);if(e){var r=p(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return h(this,n)}}function h(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function p(t){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function D(t){var e=r.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}var y=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(a,e);var n,u,r,o=f(a);function a(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this))._offset=[0,0],t._cursor=[-1,-1],t._lastColor="",t}return n=a,(u=[{key:"schedule",value:function(t){setTimeout(t,1e3/60)}},{key:"setOptions",value:function(t){s(p(a.prototype),"setOptions",this).call(this,t);var e=[t.width,t.height],n=this.computeSize();this._offset=n.map((function(t,n){return Math.floor((t-e[n])/2)}))}},{key:"clear",value:function(){var e;t.stdout.write((e=this._options.bg,"[0;48;5;".concat(D(e),"m[2J")))}},{key:"draw",value:function(e,n){var u=i(e,5),r=u[0],o=u[1],a=u[2],c=u[3],s=u[4],l=this._offset[0]+r,f=this._offset[1]+o,h=this.computeSize();if(!(l<0||l>=h[0])&&!(f<0||f>=h[1])&&(l===this._cursor[0]&&f===this._cursor[1]||(t.stdout.write(function(t,e){return"[".concat(e+1,";").concat(t+1,"H")}(l,f)),this._cursor[0]=l,this._cursor[1]=f),n&&(a||(a=" ")),a)){var p=function(t,e){return"[0;38;5;".concat(D(t),";48;5;").concat(D(e),"m")}(c,s);if(p!==this._lastColor&&(t.stdout.write(p),this._lastColor=p),"\t"!=a){var y=[].concat(a);t.stdout.write(y[0])}this._cursor[0]++,this._cursor[0]>=h[0]&&(this._cursor[0]=0,this._cursor[1]++)}}},{key:"computeFontSize",value:function(){throw new Error("Terminal backend has no notion of font size")}},{key:"eventToPosition",value:function(t,e){return[t,e]}},{key:"computeSize",value:function(){return[t.stdout.columns,t.stdout.rows]}}])&&c(n.prototype,u),r&&c(n,r),a}(u.a)}).call(this,n(7))},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e){var n,u,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{u="function"==typeof clearTimeout?clearTimeout:i}catch(t){u=i}}();var c,s=[],l=!1,f=-1;function h(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&p())}function p(){if(!l){var t=a(h);l=!0;for(var e=s.length;e;){for(c=s,s=[];++f<e;)c&&c[f].run();f=-1,e=s.length}c=null,l=!1,function(t){if(u===clearTimeout)return clearTimeout(t);if((u===i||!u)&&clearTimeout)return u=clearTimeout,clearTimeout(t);try{u(t)}catch(e){try{return u.call(null,t)}catch(e){return u.call(this,t)}}}(t)}}function D(t,e){this.fun=t,this.array=e}function y(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new D(t,e)),1!==s.length||l||a(p)},D.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=y,r.addListener=y,r.once=y,r.off=y,r.removeListener=y,r.removeAllListeners=y,r.emit=y,r.prependListener=y,r.prependOnceListener=y,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var u;u=function(){return this}();try{u=u||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":n(window))&&(u=window)}t.exports=u},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";n.r(e),n.d(e,"gameState",(function(){return xo})),n.d(e,"previousGameState",(function(){return ko})),n.d(e,"SetQueuedAbility",(function(){return jo})),n.d(e,"SetQueuedEntity",(function(){return Po})),n.d(e,"targetEntity",(function(){return Ro})),n.d(e,"CurrrentActivePlayer",(function(){return To})),n.d(e,"ExamineTargetEnable",(function(){return Ho})),n.d(e,"ExamineTargetDisable",(function(){return $o})),n.d(e,"setupTestFight",(function(){return Zo})),n.d(e,"StartGame",(function(){return ui}));var u={};n.r(u),n.d(u,"TYPE_TEXT",(function(){return lt})),n.d(u,"TYPE_NEWLINE",(function(){return ft})),n.d(u,"TYPE_FG",(function(){return ht})),n.d(u,"TYPE_BG",(function(){return pt})),n.d(u,"measure",(function(){return Dt})),n.d(u,"tokenize",(function(){return yt}));var r=n(0),o=n(3);function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function c(t,e,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(u){var r=Object.getOwnPropertyDescriptor(u,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=h(t);if(e){var r=h(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return f(this,n)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var p=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(o,t);var e,n,u,r=l(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._ctx=document.createElement("canvas").getContext("2d"),t}return e=o,(n=[{key:"schedule",value:function(t){requestAnimationFrame(t)}},{key:"getContainer",value:function(){return this._ctx.canvas}},{key:"setOptions",value:function(t){c(h(o.prototype),"setOptions",this).call(this,t);var e=t.fontStyle?"".concat(t.fontStyle," "):"",n="".concat(e," ").concat(t.fontSize,"px ").concat(t.fontFamily);this._ctx.font=n,this._updateSize(),this._ctx.font=n,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}},{key:"clear",value:function(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}},{key:"eventToPosition",value:function(t,e){var n=this._ctx.canvas,u=n.getBoundingClientRect();return t-=u.left,e-=u.top,t*=n.width/u.width,e*=n.height/u.height,t<0||e<0||t>=n.width||e>=n.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}])&&a(e.prototype,n),u&&a(e,u),o}(o.a),D=n(1);function y(t){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return d(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function g(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function A(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=E(t);if(e){var r=E(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return C(this,n)}}function C(t,e){return!e||"object"!==y(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function E(t){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var m=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}(o,t);var e,n,u,r=A(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._spacingX=0,t._spacingY=0,t._hexSize=0,t}return e=o,(n=[{key:"draw",value:function(t,e){var n=v(t,5),u=n[0],r=n[1],o=n[2],i=n[3],a=n[4],c=[(u+1)*this._spacingX,r*this._spacingY+this._hexSize];if(this._options.transpose&&c.reverse(),e&&(this._ctx.fillStyle=a,this._fill(c[0],c[1])),o){this._ctx.fillStyle=i;for(var s=[].concat(o),l=0;l<s.length;l++)this._ctx.fillText(s[l],c[0],Math.ceil(c[1]))}}},{key:"computeSize",value:function(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}},{key:"computeFontSize",value:function(t,e){this._options.transpose&&(t+=e,t-=e=t-e);var n=2*t/((this._options.width+1)*Math.sqrt(3))-1,u=e/(2+1.5*(this._options.height-1)),r=Math.min(n,u),o=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var i=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=o;var a=i/100,c=2*(r=Math.floor(r)+1)/(this._options.spacing*(1+a/Math.sqrt(3)));return Math.ceil(c)-1}},{key:"_normalizedEventToPosition",value:function(t,e){var n;this._options.transpose?(t+=e,t-=e=t-e,n=this._ctx.canvas.width):n=this._ctx.canvas.height;var u=n/this._options.height;return e=Math.floor(e/u),Object(D.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}},{key:"_fill",value:function(t,e){var n=this._hexSize,u=this._options.border,r=this._ctx;r.beginPath(),this._options.transpose?(r.moveTo(t-n+u,e),r.lineTo(t-n/2+u,e+this._spacingX-u),r.lineTo(t+n/2-u,e+this._spacingX-u),r.lineTo(t+n-u,e),r.lineTo(t+n/2-u,e-this._spacingX+u),r.lineTo(t-n/2+u,e-this._spacingX+u),r.lineTo(t-n+u,e)):(r.moveTo(t,e-n+u),r.lineTo(t+this._spacingX-u,e-n/2+u),r.lineTo(t+this._spacingX-u,e+n/2-u),r.lineTo(t,e+n-u),r.lineTo(t-this._spacingX+u,e+n/2-u),r.lineTo(t-this._spacingX+u,e-n/2+u),r.lineTo(t,e-n+u)),r.fill()}},{key:"_updateSize",value:function(){var t,e,n=this._options,u=Math.ceil(this._ctx.measureText("W").width);this._hexSize=Math.floor(n.spacing*(n.fontSize+u/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,n.transpose?(t="height",e="width"):(t="width",e="height"),this._ctx.canvas[t]=Math.ceil((n.width+1)*this._spacingX),this._ctx.canvas[e]=Math.ceil((n.height-1)*this._spacingY+2*this._hexSize)}}])&&g(e.prototype,n),u&&g(e,u),o}(p);function b(t){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function F(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return B(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return B(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function w(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function x(t,e,n){return(x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=j(t)););return t}(t,e);if(u){var r=Object.getOwnPropertyDescriptor(u,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function k(t,e){return(k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function S(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=j(t);if(e){var r=j(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return O(this,n)}}function O(t,e){return!e||"object"!==b(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var P,R=((P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&k(t,e)}(o,t);var e,n,u,r=S(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._spacingX=0,t._spacingY=0,t._canvasCache={},t}return e=o,(n=[{key:"setOptions",value:function(t){x(j(o.prototype),"setOptions",this).call(this,t),this._canvasCache={}}},{key:"draw",value:function(t,e){o.cache?this._drawWithCache(t):this._drawNoCache(t,e)}},{key:"_drawWithCache",value:function(t){var e,n=F(t,5),u=n[0],r=n[1],o=n[2],i=n[3],a=n[4],c=""+o+i+a;if(c in this._canvasCache)e=this._canvasCache[c];else{var s=this._options.border,l=(e=document.createElement("canvas")).getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,l.fillStyle=a,l.fillRect(s,s,e.width-s,e.height-s),o){l.fillStyle=i,l.font=this._ctx.font,l.textAlign="center",l.textBaseline="middle";for(var f=[].concat(o),h=0;h<f.length;h++)l.fillText(f[h],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[c]=e}this._ctx.drawImage(e,u*this._spacingX,r*this._spacingY)}},{key:"_drawNoCache",value:function(t,e){var n=F(t,5),u=n[0],r=n[1],o=n[2],i=n[3],a=n[4];if(e){var c=this._options.border;this._ctx.fillStyle=a,this._ctx.fillRect(u*this._spacingX+c,r*this._spacingY+c,this._spacingX-c,this._spacingY-c)}if(o){this._ctx.fillStyle=i;for(var s=[].concat(o),l=0;l<s.length;l++)this._ctx.fillText(s[l],(u+.5)*this._spacingX,Math.ceil((r+.5)*this._spacingY))}}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}},{key:"computeFontSize",value:function(t,e){var n=Math.floor(t/this._options.width),u=Math.floor(e/this._options.height),r=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=r;var i=o/100*u/n;return i>1&&(u=Math.floor(u/i)),Math.floor(u/this._options.spacing)}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}},{key:"_updateSize",value:function(){var t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}])&&w(e.prototype,n),u&&w(e,u),o}(p)).cache=!1,P);function T(t){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function M(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return I(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return I(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function z(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function U(t,e){return(U=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function L(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=N(t);if(e){var r=N(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return W(this,n)}}function W(t,e){return!e||"object"!==T(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function N(t){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var X=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&U(t,e)}(o,t);var e,n,u,r=L(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._colorCanvas=document.createElement("canvas"),t}return e=o,(n=[{key:"draw",value:function(t,e){var n=M(t,5),u=n[0],r=n[1],o=n[2],i=n[3],a=n[4],c=this._options.tileWidth,s=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(u*c,r*s,c,s):(this._ctx.fillStyle=a,this._ctx.fillRect(u*c,r*s,c,s))),o)for(var l=[].concat(o),f=[].concat(i),h=[].concat(a),p=0;p<l.length;p++){var D=this._options.tileMap[l[p]];if(!D)throw new Error('Char "'.concat(l[p],'" not found in tileMap'));if(this._options.tileColorize){var y=this._colorCanvas,v=y.getContext("2d");v.globalCompositeOperation="source-over",v.clearRect(0,0,c,s);var d=f[p],g=h[p];v.drawImage(this._options.tileSet,D[0],D[1],c,s,0,0,c,s),"transparent"!=d&&(v.fillStyle=d,v.globalCompositeOperation="source-atop",v.fillRect(0,0,c,s)),"transparent"!=g&&(v.fillStyle=g,v.globalCompositeOperation="destination-over",v.fillRect(0,0,c,s)),this._ctx.drawImage(y,u*c,r*s,c,s)}else this._ctx.drawImage(this._options.tileSet,D[0],D[1],c,s,u*c,r*s,c,s)}}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}])&&z(e.prototype,n),u&&z(e,u),o}(p),Y=n(2);function H(t){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function q(t){return function(t){if(Array.isArray(t))return K(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||G(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||G(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function G(t,e){if(t){if("string"==typeof t)return K(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(t,e):void 0}}function K(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function Q(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function V(t,e,n){return(V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=et(t)););return t}(t,e);if(u){var r=Object.getOwnPropertyDescriptor(u,e);return r.get?r.get.call(n):r.value}})(t,e,n||t)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function J(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=et(t);if(e){var r=et(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return tt(this,n)}}function tt(t,e){return!e||"object"!==H(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function et(t){return(et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var nt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Z(t,e)}(o,t);var e,n,u,r=J(o);function o(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._uniforms={};try{t._gl=t._initWebGL()}catch(t){alert(t.message)}return t}return e=o,u=[{key:"isSupported",value:function(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}}],(n=[{key:"schedule",value:function(t){requestAnimationFrame(t)}},{key:"getContainer",value:function(){return this._gl.canvas}},{key:"setOptions",value:function(t){var e=this;V(et(o.prototype),"setOptions",this).call(this,t),this._updateSize();var n=this._options.tileSet;n&&"complete"in n&&!n.complete?n.addEventListener("load",(function(){return e._updateTexture(n)})):this._updateTexture(n)}},{key:"draw",value:function(t,e){var n=this._gl,u=this._options,r=$(t,5),o=r[0],i=r[1],a=r[2],c=r[3],s=r[4],l=n.canvas.height-(i+1)*u.tileHeight;if(n.scissor(o*u.tileWidth,l,u.tileWidth,u.tileHeight),e&&(u.tileColorize?n.clearColor(0,0,0,0):n.clearColor.apply(n,q(at(s))),n.clear(n.COLOR_BUFFER_BIT)),a){var f=[].concat(a),h=[].concat(s),p=[].concat(c);n.uniform2fv(this._uniforms.targetPosRel,[o,i]);for(var D=0;D<f.length;D++){var y=this._options.tileMap[f[D]];if(!y)throw new Error('Char "'.concat(f[D],'" not found in tileMap'));n.uniform1f(this._uniforms.colorize,u.tileColorize?1:0),n.uniform2fv(this._uniforms.tilesetPosAbs,y),u.tileColorize&&(n.uniform4fv(this._uniforms.tint,at(p[D])),n.uniform4fv(this._uniforms.bg,at(h[D]))),n.drawArrays(n.TRIANGLE_STRIP,0,4)}}}},{key:"clear",value:function(){var t=this._gl;t.clearColor.apply(t,q(at(this._options.bg))),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"eventToPosition",value:function(t,e){var n=this._gl.canvas,u=n.getBoundingClientRect();return t-=u.left,e-=u.top,t*=n.width/u.width,e*=n.height/u.height,t<0||e<0||t>=n.width||e>=n.height?[-1,-1]:this._normalizedEventToPosition(t,e)}},{key:"_initWebGL",value:function(){var t=this,e=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=e;var n=function(t,e,n){var u=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(u,e),t.compileShader(u),!t.getShaderParameter(u,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(u)||"");var r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,n),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"");var o=t.createProgram();if(t.attachShader(o,u),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o)||"");return o}(e,rt,ot);return e.useProgram(n),function(t){var e=new Float32Array([0,0,1,0,0,1,1,1]),n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(e),ut.forEach((function(u){return t._uniforms[u]=e.getUniformLocation(n,u)})),this._program=n,e.enable(e.BLEND),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA),e.enable(e.SCISSOR_TEST),e}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var t=this._gl,e=this._options,n=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=n[0],t.canvas.height=n[1],t.viewport(0,0,n[0],n[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,n)}},{key:"_updateTexture",value:function(t){var e,n,u;e=this._gl,n=t,u=e.createTexture(),e.bindTexture(e.TEXTURE_2D,u),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)}}])&&Q(e.prototype,n),u&&Q(e,u),o}(o.a),ut=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],rt="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),ot="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();var it={};function at(t){if(!(t in it)){var e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(var n=0;n<3;n++)e[n]=e[n]/255}else(e=Y.fromString(t).map((function(t){return t/255}))).push(1);it[t]=e}return it[t]}var ct=n(5),st=/%([bc]){([^}]*)}/g,lt=0,ft=1,ht=2,pt=3;function Dt(t,e){for(var n={width:0,height:1},u=yt(t,e),r=0,o=0;o<u.length;o++){var i=u[o];switch(i.type){case lt:r+=i.value.length;break;case ft:n.height++,n.width=Math.max(n.width,r),r=0}}return n.width=Math.max(n.width,r),n}function yt(t,e){var n=[],u=0;t.replace(st,(function(e,r,o,i){var a=t.substring(u,i);return a.length&&n.push({type:lt,value:a}),n.push({type:"c"==r?ht:pt,value:o.trim()}),u=i+e.length,""}));var r=t.substring(u);return r.length&&n.push({type:lt,value:r}),function(t,e){e||(e=1/0);var n=0,u=0,r=-1;for(;n<t.length;){var o=t[n];if(o.type==ft&&(u=0,r=-1),o.type==lt){for(;0==u&&" "==o.value.charAt(0);)o.value=o.value.substring(1);var i=o.value.indexOf("\n");if(-1!=i){o.value=vt(t,n,i,!0);for(var a=o.value.split("");a.length&&" "==a[a.length-1];)a.pop();o.value=a.join("")}if(o.value.length){if(u+o.value.length>e){for(var c=-1;;){var s=o.value.indexOf(" ",c+1);if(-1==s)break;if(u+s>e)break;c=s}if(-1!=c)o.value=vt(t,n,c,!0);else if(-1!=r){var l=t[r],f=l.value.lastIndexOf(" ");l.value=vt(t,r,f,!0),n=r}else o.value=vt(t,n,e-u,!1)}else u+=o.value.length,-1!=o.value.indexOf(" ")&&(r=n);n++}else t.splice(n,1)}else n++}t.push({type:ft});for(var h=null,p=0;p<t.length;p++){var D=t[p];switch(D.type){case lt:h=D;break;case ft:if(h){for(var y=h.value.split("");y.length&&" "==y[y.length-1];)y.pop();h.value=y.join("")}h=null}}return t.pop(),t}(n,e)}function vt(t,e,n,u){var r={type:ft},o={type:lt,value:t[e].value.substring(n+(u?1:0))};return t.splice(e+1,0,r,o),t[e].value.substring(0,n)}var dt={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]};function gt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _t(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}var At,Ct={hex:m,rect:R,tile:X,"tile-gl":nt,term:ct.a},Et={width:80,height:25,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1},mt=((At=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};gt(this,t),this._data={},this._dirty=!1,this._options={},e=Object.assign({},Et,e),this.setOptions(e),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}var e,n,u;return e=t,(n=[{key:"DEBUG",value:function(t,e,n){var u=[this._options.bg,this._options.fg];this.draw(t,e,null,null,u[n%u.length])}},{key:"clear",value:function(){this._data={},this._dirty=!0}},{key:"setOptions",value:function(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){var e=Ct[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}},{key:"getOptions",value:function(){return this._options}},{key:"getContainer",value:function(){return this._backend.getContainer()}},{key:"computeSize",value:function(t,e){return this._backend.computeSize(t,e)}},{key:"computeFontSize",value:function(t,e){return this._backend.computeFontSize(t,e)}},{key:"computeTileSize",value:function(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}},{key:"eventToPosition",value:function(t){var e,n;return"touches"in t?(e=t.touches[0].clientX,n=t.touches[0].clientY):(e=t.clientX,n=t.clientY),this._backend.eventToPosition(e,n)}},{key:"draw",value:function(t,e,n,u,r){u||(u=this._options.fg),r||(r=this._options.bg);var o="".concat(t,",").concat(e);this._data[o]=[t,e,n,u,r],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[o]=!0)}},{key:"drawText",value:function(t,e,n,u){var r=null,o=null,i=t,a=e,c=1;u||(u=this._options.width-t);for(var s=yt(n,u);s.length;){var l=s.shift();switch(l.type){case lt:for(var f=!1,h=!1,p=!1,D=!1,y=0;y<l.value.length;y++){var v=l.value.charCodeAt(y),d=l.value.charAt(y);if("term"===this._options.layout){var g=v>>8;if(17===g||g>=46&&g<=159||g>=172&&g<=215||v>=43360&&v<=43391){this.draw(i+0,a,d,r,o),this.draw(i+1,a,"\t",r,o),i+=2;continue}}p=v>65280&&v<65377||v>65500&&v<65512||v>65518,f=32==d.charCodeAt(0)||12288==d.charCodeAt(0),!D||p||f||i++,p&&!h&&i++,this.draw(i++,a,d,r,o),h=f,D=p}break;case ht:r=l.value||null;break;case pt:o=l.value||null;break;case ft:i=t,a++,c++}}return c}},{key:"_tick",value:function(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty)for(var t in this._backend.clear(),this._data)this._draw(t,!1);else for(var e in this._dirty)this._draw(e,!0);this._dirty=!1}}},{key:"_draw",value:function(t,e){var n=this._data[t];n[4]!=this._options.bg&&(e=!0),this._backend.draw(n,e)}}])&&_t(e.prototype,n),u&&_t(e,u),t}()).Rect=R,At.Hex=m,At.Tile=X,At.TileGL=nt,At.Term=ct.a,At);function bt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ft(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}var Bt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:80,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:25;bt(this,t),this._width=e,this._height=n}var e,n,u;return e=t,(n=[{key:"_fillMap",value:function(t){for(var e=[],n=0;n<this._width;n++){e.push([]);for(var u=0;u<this._height;u++)e[n].push(t)}return e}}])&&Ft(e.prototype,n),u&&Ft(e,u),t}();function wt(t){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function kt(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function St(t,e){return(St=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ot(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Pt(t);if(e){var r=Pt(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return jt(this,n)}}function jt(t,e){return!e||"object"!==wt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Pt(t){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Rt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&St(t,e)}(o,t);var e,n,u,r=Ot(o);function o(){return xt(this,o),r.apply(this,arguments)}return e=o,(n=[{key:"create",value:function(t){for(var e=this._width-1,n=this._height-1,u=0;u<=e;u++)for(var r=0;r<=n;r++)t(u,r,u&&r&&u<e&&r<n?0:1);return this}}])&&kt(e.prototype,n),u&&kt(e,u),o}(Bt);function Tt(t){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mt(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function It(t,e){return(It=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function zt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Lt(t);if(e){var r=Lt(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return Ut(this,n)}}function Ut(t,e){return!e||"object"!==Tt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Lt(t){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Wt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&It(t,e)}(o,t);var e,n,u,r=zt(o);function o(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(n=r.call(this,t,e))._rooms=[],n._corridors=[],n}return e=o,(n=[{key:"getRooms",value:function(){return this._rooms}},{key:"getCorridors",value:function(){return this._corridors}}])&&Mt(e.prototype,n),u&&Mt(e,u),o}(Bt);function Nt(t){return(Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xt(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Yt(t,e,n){return e&&Xt(t.prototype,e),n&&Xt(t,n),t}function Ht(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&qt(t,e)}function qt(t,e){return(qt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $t(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Kt(t);if(e){var r=Kt(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return Gt(this,n)}}function Gt(t,e){return!e||"object"!==Nt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Kt(t){return(Kt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Qt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Vt=function t(){Qt(this,t)},Zt=function(t){Ht(n,t);var e=$t(n);function n(t,u,r,o,i,a){var c;return Qt(this,n),(c=e.call(this))._x1=t,c._y1=u,c._x2=r,c._y2=o,c._doors={},void 0!==i&&void 0!==a&&c.addDoor(i,a),c}return Yt(n,[{key:"addDoor",value:function(t,e){return this._doors[t+","+e]=1,this}},{key:"getDoors",value:function(t){for(var e in this._doors){var n=e.split(",");t(parseInt(n[0]),parseInt(n[1]))}return this}},{key:"clearDoors",value:function(){return this._doors={},this}},{key:"addDoors",value:function(t){for(var e=this._x1-1,n=this._x2+1,u=this._y1-1,r=this._y2+1,o=e;o<=n;o++)for(var i=u;i<=r;i++)o!=e&&o!=n&&i!=u&&i!=r||t(o,i)||this.addDoor(o,i);return this}},{key:"debug",value:function(){console.log("room",this._x1,this._y1,this._x2,this._y2)}},{key:"isValid",value:function(t,e){for(var n=this._x1-1,u=this._x2+1,r=this._y1-1,o=this._y2+1,i=n;i<=u;i++)for(var a=r;a<=o;a++)if(i==n||i==u||a==r||a==o){if(!t(i,a))return!1}else if(!e(i,a))return!1;return!0}},{key:"create",value:function(t){for(var e=this._x1-1,n=this._x2+1,u=this._y1-1,r=this._y2+1,o=e;o<=n;o++)for(var i=u;i<=r;i++)t(o,i,o+","+i in this._doors?2:o==e||o==n||i==u||i==r?1:0)}},{key:"getCenter",value:function(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}},{key:"getLeft",value:function(){return this._x1}},{key:"getRight",value:function(){return this._x2}},{key:"getTop",value:function(){return this._y1}},{key:"getBottom",value:function(){return this._y2}}],[{key:"createRandomAt",value:function(t,e,n,u,o){var i=o.roomWidth[0],a=o.roomWidth[1],c=r.a.getUniformInt(i,a);i=o.roomHeight[0],a=o.roomHeight[1];var s=r.a.getUniformInt(i,a);if(1==n){var l=e-Math.floor(r.a.getUniform()*s);return new this(t+1,l,t+c,l+s-1,t,e)}if(-1==n){var f=e-Math.floor(r.a.getUniform()*s);return new this(t-c,f,t-1,f+s-1,t,e)}if(1==u){var h=t-Math.floor(r.a.getUniform()*c);return new this(h,e+1,h+c-1,e+s,t,e)}if(-1==u){var p=t-Math.floor(r.a.getUniform()*c);return new this(p,e-s,p+c-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}},{key:"createRandomCenter",value:function(t,e,n){var u=n.roomWidth[0],o=n.roomWidth[1],i=r.a.getUniformInt(u,o);u=n.roomHeight[0],o=n.roomHeight[1];var a=r.a.getUniformInt(u,o),c=t-Math.floor(r.a.getUniform()*i),s=e-Math.floor(r.a.getUniform()*a);return new this(c,s,c+i-1,s+a-1)}},{key:"createRandom",value:function(t,e,n){var u=n.roomWidth[0],o=n.roomWidth[1],i=r.a.getUniformInt(u,o);u=n.roomHeight[0],o=n.roomHeight[1];var a=r.a.getUniformInt(u,o),c=t-i-1,s=e-a-1,l=1+Math.floor(r.a.getUniform()*c),f=1+Math.floor(r.a.getUniform()*s);return new this(l,f,l+i-1,f+a-1)}}]),n}(Vt),Jt=function(t){Ht(n,t);var e=$t(n);function n(t,u,r,o){var i;return Qt(this,n),(i=e.call(this))._startX=t,i._startY=u,i._endX=r,i._endY=o,i._endsWithAWall=!0,i}return Yt(n,[{key:"debug",value:function(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}},{key:"isValid",value:function(t,e){var n=this._startX,u=this._startY,r=this._endX-n,o=this._endY-u,i=1+Math.max(Math.abs(r),Math.abs(o));r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));for(var a=o,c=-r,s=!0,l=0;l<i;l++){var f=n+l*r,h=u+l*o;if(e(f,h)||(s=!1),t(f+a,h+c)||(s=!1),t(f-a,h-c)||(s=!1),!s){i=l,this._endX=f-r,this._endY=h-o;break}}if(0==i)return!1;if(1==i&&t(this._endX+r,this._endY+o))return!1;var p=!t(this._endX+r+a,this._endY+o+c),D=!t(this._endX+r-a,this._endY+o-c);return this._endsWithAWall=t(this._endX+r,this._endY+o),!p&&!D||!this._endsWithAWall}},{key:"create",value:function(t){var e=this._startX,n=this._startY,u=this._endX-e,r=this._endY-n,o=1+Math.max(Math.abs(u),Math.abs(r));u&&(u/=Math.abs(u)),r&&(r/=Math.abs(r));for(var i=0;i<o;i++){t(e+i*u,n+i*r,0)}return!0}},{key:"createPriorityWalls",value:function(t){if(this._endsWithAWall){var e=this._startX,n=this._startY,u=this._endX-e,r=this._endY-n;u&&(u/=Math.abs(u)),r&&(r/=Math.abs(r));var o=r,i=-u;t(this._endX+u,this._endY+r),t(this._endX+o,this._endY+i),t(this._endX-o,this._endY-i)}}}],[{key:"createRandomAt",value:function(t,e,n,u,o){var i=o.corridorLength[0],a=o.corridorLength[1],c=r.a.getUniformInt(i,a);return new this(t,e,t+n*c,e+u*c)}}]),n}(Vt);function te(t){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ee(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function ne(t,e){return(ne=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ue(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=ie(t);if(e){var r=ie(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return re(this,n)}}function re(t,e){return!e||"object"!==te(e)&&"function"!=typeof e?oe(t):e}function oe(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ie(t){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ae=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ne(t,e)}(i,t);var e,n,u,o=ue(i);function i(t,e,n){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(u=o.call(this,t,e))._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(u._options,n),u._map=[],u._dug=0,u._roomAttempts=20,u._corridorAttempts=20,u._connected=[],u._unconnected=[],u._digCallback=u._digCallback.bind(oe(u)),u._canBeDugCallback=u._canBeDugCallback.bind(oe(u)),u._isWallCallback=u._isWallCallback.bind(oe(u)),u}return e=i,(n=[{key:"create",value:function(t){for(var e=Date.now();;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(var n=0;n<this._width;n++)for(var u=0;u<this._height;u++)t(n,u,this._map[n][u]);return this}},{key:"_generateRooms",value:function(){var t,e=this._width-2,n=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*n)>this._options.roomDugPercentage)break}while(t)}},{key:"_generateRoom",value:function(){for(var t=0;t<this._roomAttempts;){t++;var e=Zt.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}},{key:"_generateCorridors",value:function(){for(var t=0;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(var e=0;e<this._rooms.length;e++){var n=this._rooms[e];n.clearDoors(),n.create(this._digCallback)}for(this._unconnected=r.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){var u=r.a.getItem(this._connected);if(!u)break;var o=this._closestRoom(this._unconnected,u);if(!o)break;var i=this._closestRoom(this._connected,o);if(!i)break;if(!this._connectRooms(o,i))break;if(!this._unconnected.length)return!0}}return!1}},{key:"_closestRoom",value:function(t,e){for(var n=1/0,u=e.getCenter(),r=null,o=0;o<t.length;o++){var i=t[o],a=i.getCenter(),c=a[0]-u[0],s=a[1]-u[1],l=c*c+s*s;l<n&&(n=l,r=i)}return r}},{key:"_connectRooms",value:function(t,e){var n,u,r,o,i,a,c,s=t.getCenter(),l=e.getCenter(),f=l[0]-s[0],h=l[1]-s[1];if(Math.abs(f)<Math.abs(h)?(o=(2+(r=h>0?2:0))%4,i=e.getLeft(),a=e.getRight(),c=0):(o=(2+(r=f>0?1:3))%4,i=e.getTop(),a=e.getBottom(),c=1),!(n=this._placeInWall(t,r)))return!1;if(n[c]>=i&&n[c]<=a){u=n.slice();var p=0;switch(o){case 0:p=e.getTop()-1;break;case 1:p=e.getRight()+1;break;case 2:p=e.getBottom()+1;break;case 3:p=e.getLeft()-1}u[(c+1)%2]=p,this._digLine([n,u])}else if(n[c]<i-1||n[c]>a+1){var D=n[c]-l[c],y=0;switch(o){case 0:case 1:y=D<0?3:1;break;case 2:case 3:y=D<0?1:3}if(o=(o+y)%4,!(u=this._placeInWall(e,o)))return!1;var v=[0,0];v[c]=n[c];var d=(c+1)%2;v[d]=u[d],this._digLine([n,v,u])}else{var g=(c+1)%2;if(!(u=this._placeInWall(e,o)))return!1;var _=Math.round((u[g]+n[g])/2),A=[0,0],C=[0,0];A[c]=n[c],A[g]=_,C[c]=u[c],C[g]=_,this._digLine([n,A,C,u])}return t.addDoor(n[0],n[1]),e.addDoor(u[0],u[1]),-1!=(c=this._unconnected.indexOf(t))&&(this._unconnected.splice(c,1),this._connected.push(t)),-1!=(c=this._unconnected.indexOf(e))&&(this._unconnected.splice(c,1),this._connected.push(e)),!0}},{key:"_placeInWall",value:function(t,e){var n=[0,0],u=[0,0],o=0;switch(e){case 0:u=[1,0],n=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:u=[0,1],n=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:u=[1,0],n=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:u=[0,1],n=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}for(var i=[],a=-2,c=0;c<o;c++){var s=n[0]+c*u[0],l=n[1]+c*u[1];i.push(null),1==this._map[s][l]?a!=c-1&&(i[c]=[s,l]):(a=c,c&&(i[c-1]=null))}for(var f=i.length-1;f>=0;f--)i[f]||i.splice(f,1);return i.length?r.a.getItem(i):null}},{key:"_digLine",value:function(t){for(var e=1;e<t.length;e++){var n=t[e-1],u=t[e],r=new Jt(n[0],n[1],u[0],u[1]);r.create(this._digCallback),this._corridors.push(r)}}},{key:"_digCallback",value:function(t,e,n){this._map[t][e]=n,0==n&&this._dug++}},{key:"_isWallCallback",value:function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}},{key:"_canBeDugCallback",value:function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}}])&&ee(e.prototype,n),u&&ee(e,u),i}(Wt);function ce(t){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function se(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function le(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function fe(t,e){return(fe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function he(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=De(t);if(e){var r=De(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return pe(this,n)}}function pe(t,e){return!e||"object"!==ce(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function De(t){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ye(t){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ve(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function de(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function ge(t,e){return(ge=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _e(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Ee(t);if(e){var r=Ee(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return Ae(this,n)}}function Ae(t,e){return!e||"object"!==ye(e)&&"function"!=typeof e?Ce(t):e}function Ce(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ee(t){return(Ee=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var me={room:Zt,corridor:Jt};function be(t){return(be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Be(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function we(t,e){return(we=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function xe(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Se(t);if(e){var r=Se(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return ke(this,n)}}function ke(t,e){return!e||"object"!==be(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Se(t){return(Se=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Oe(t,e,n){n[e[t+1]]=n[t],e[n[t]]=e[t+1],n[t]=t+1,e[t+1]=t}function je(t,e,n){n[e[t]]=n[t],e[n[t]]=e[t],n[t]=t,e[t]=t}function Pe(t){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Re(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Te(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Me(t,e){return(Me=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ie(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Ue(t);if(e){var r=Ue(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return ze(this,n)}}function ze(t,e){return!e||"object"!==Pe(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ue(t){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Le(t){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function We(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ne(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Xe(t,e){return(Xe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ye(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=qe(t);if(e){var r=qe(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return He(this,n)}}function He(t,e){return!e||"object"!==Le(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function qe(t){return(qe=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function $e(t){return($e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ge(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Ke(t,e){return(Ke=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Qe(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=Ze(t);if(e){var r=Ze(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return Ve(this,n)}}function Ve(t,e){return!e||"object"!==$e(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ze(t){return(Ze=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Je={Arena:Rt,Uniform:ae,Cellular:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&fe(t,e)}(i,t);var e,n,u,o=he(i);function i(t,e){var n,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return se(this,i),(n=o.call(this,t,e))._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},n.setOptions(u),n._dirs=dt[n._options.topology],n._map=n._fillMap(0),n}return e=i,(n=[{key:"randomize",value:function(t){for(var e=0;e<this._width;e++)for(var n=0;n<this._height;n++)this._map[e][n]=r.a.getUniform()<t?1:0;return this}},{key:"setOptions",value:function(t){Object.assign(this._options,t)}},{key:"set",value:function(t,e,n){this._map[t][e]=n}},{key:"create",value:function(t){for(var e=this._fillMap(0),n=this._options.born,u=this._options.survive,r=0;r<this._height;r++){var o=1,i=0;6==this._options.topology&&(o=2,i=r%2);for(var a=i;a<this._width;a+=o){var c=this._map[a][r],s=this._getNeighbors(a,r);c&&-1!=u.indexOf(s)?e[a][r]=1:c||-1==n.indexOf(s)||(e[a][r]=1)}}this._map=e,t&&this._serviceCallback(t)}},{key:"_serviceCallback",value:function(t){for(var e=0;e<this._height;e++){var n=1,u=0;6==this._options.topology&&(n=2,u=e%2);for(var r=u;r<this._width;r+=n)t(r,e,this._map[r][e])}}},{key:"_getNeighbors",value:function(t,e){for(var n=0,u=0;u<this._dirs.length;u++){var r=this._dirs[u],o=t+r[0],i=e+r[1];o<0||o>=this._width||i<0||i>=this._height||(n+=1==this._map[o][i]?1:0)}return n}},{key:"connect",value:function(t,e,n){e||(e=0);var u=[],o={},i=1,a=[0,0];6==this._options.topology&&(i=2,a=[0,1]);for(var c=0;c<this._height;c++)for(var s=a[c%2];s<this._width;s+=i)if(this._freeSpace(s,c,e)){var l=[s,c];o[this._pointKey(l)]=l,u.push([s,c])}var f=u[r.a.getUniformInt(0,u.length-1)],h=this._pointKey(f),p={};for(p[h]=f,delete o[h],this._findConnected(p,o,[f],!1,e);Object.keys(o).length>0;){var D=this._getFromTo(p,o),y=D[0],v=D[1],d={};d[this._pointKey(y)]=y,this._findConnected(d,o,[y],!0,e);var g=6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected;for(var _ in g.call(this,v,y,p,o,e,n),d){var A=d[_];this._map[A[0]][A[1]]=e,p[_]=A,delete o[_]}}t&&this._serviceCallback(t)}},{key:"_getFromTo",value:function(t,e){for(var n=[0,0],u=[0,0],o=Object.keys(t),i=Object.keys(e),a=0;a<5;a++){if(o.length<i.length){var c=o;u=t[c[r.a.getUniformInt(0,c.length-1)]],n=this._getClosest(u,e)}else{var s=i;n=e[s[r.a.getUniformInt(0,s.length-1)]],u=this._getClosest(n,t)}if((n[0]-u[0])*(n[0]-u[0])+(n[1]-u[1])*(n[1]-u[1])<64)break}return[n,u]}},{key:"_getClosest",value:function(t,e){var n=null,u=null;for(var r in e){var o=e[r],i=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==u||i<u)&&(u=i,n=o)}return n}},{key:"_findConnected",value:function(t,e,n,u,r){for(;n.length>0;){var o=n.splice(0,1)[0],i=void 0;i=6==this._options.topology?[[o[0]+2,o[1]],[o[0]+1,o[1]-1],[o[0]-1,o[1]-1],[o[0]-2,o[1]],[o[0]-1,o[1]+1],[o[0]+1,o[1]+1]]:[[o[0]+1,o[1]],[o[0]-1,o[1]],[o[0],o[1]+1],[o[0],o[1]-1]];for(var a=0;a<i.length;a++){var c=this._pointKey(i[a]);null==t[c]&&this._freeSpace(i[a][0],i[a][1],r)&&(t[c]=i[a],u||delete e[c],n.push(i[a]))}}}},{key:"_tunnelToConnected",value:function(t,e,n,u,r,o){var i,a;e[0]<t[0]?(i=e,a=t):(i=t,a=e);for(var c=i[0];c<=a[0];c++){this._map[c][i[1]]=r;var s=[c,i[1]],l=this._pointKey(s);n[l]=s,delete u[l]}o&&i[0]<a[0]&&o(i,[a[0],i[1]]);var f=a[0];e[1]<t[1]?(i=e,a=t):(i=t,a=e);for(var h=i[1];h<a[1];h++){this._map[f][h]=r;var p=[f,h],D=this._pointKey(p);n[D]=p,delete u[D]}o&&i[1]<a[1]&&o([a[0],i[1]],[a[0],a[1]])}},{key:"_tunnelToConnected6",value:function(t,e,n,u,r,o){var i,a;e[0]<t[0]?(i=e,a=t):(i=t,a=e);for(var c=i[0],s=i[1];c!=a[0]||s!=a[1];){var l=2;s<a[1]?(s++,l=1):s>a[1]&&(s--,l=1),c<a[0]?c+=l:c>a[0]||a[1]%2?c-=l:c+=l,this._map[c][s]=r;var f=[c,s],h=this._pointKey(f);n[h]=f,delete u[h]}o&&o(e,t)}},{key:"_freeSpace",value:function(t,e,n){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==n}},{key:"_pointKey",value:function(t){return t[0]+"."+t[1]}}])&&le(e.prototype,n),u&&le(e,u),i}(Bt),Digger:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ge(t,e)}(i,t);var e,n,u,o=_e(i);function i(t,e){var n,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return ve(this,i),(n=o.call(this,t,e))._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},u),n._features={room:4,corridor:4},n._map=[],n._featureAttempts=20,n._walls={},n._dug=0,n._digCallback=n._digCallback.bind(Ce(n)),n._canBeDugCallback=n._canBeDugCallback.bind(Ce(n)),n._isWallCallback=n._isWallCallback.bind(Ce(n)),n._priorityWallCallback=n._priorityWallCallback.bind(Ce(n)),n}return e=i,(n=[{key:"create",value:function(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;var e=(this._width-2)*(this._height-2);this._firstRoom();var n,u=Date.now();do{if(n=0,Date.now()-u>this._options.timeLimit)break;var r=this._findWall();if(!r)break;var o=r.split(","),i=parseInt(o[0]),a=parseInt(o[1]),c=this._getDiggingDirection(i,a);if(c){var s=0;do{if(s++,this._tryFeature(i,a,c[0],c[1])){this._removeSurroundingWalls(i,a),this._removeSurroundingWalls(i-c[0],a-c[1]);break}}while(s<this._featureAttempts);for(var l in this._walls)this._walls[l]>1&&n++}}while(this._dug/e<this._options.dugPercentage||n);if(this._addDoors(),t)for(var f=0;f<this._width;f++)for(var h=0;h<this._height;h++)t(f,h,this._map[f][h]);return this._walls={},this._map=[],this}},{key:"_digCallback",value:function(t,e,n){0==n||2==n?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}},{key:"_isWallCallback",value:function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}},{key:"_canBeDugCallback",value:function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},{key:"_priorityWallCallback",value:function(t,e){this._walls[t+","+e]=2}},{key:"_firstRoom",value:function(){var t=Math.floor(this._width/2),e=Math.floor(this._height/2),n=Zt.createRandomCenter(t,e,this._options);this._rooms.push(n),n.create(this._digCallback)}},{key:"_findWall",value:function(){var t=[],e=[];for(var n in this._walls)2==this._walls[n]?e.push(n):t.push(n);var u=e.length?e:t;if(!u.length)return null;var o=r.a.getItem(u.sort());return delete this._walls[o],o}},{key:"_tryFeature",value:function(t,e,n,u){var o=r.a.getWeightedValue(this._features),i=me[o].createRandomAt(t,e,n,u,this._options);return!!i.isValid(this._isWallCallback,this._canBeDugCallback)&&(i.create(this._digCallback),i instanceof Zt&&this._rooms.push(i),i instanceof Jt&&(i.createPriorityWalls(this._priorityWallCallback),this._corridors.push(i)),!0)}},{key:"_removeSurroundingWalls",value:function(t,e){for(var n=dt[4],u=0;u<n.length;u++){var r=n[u],o=t+r[0],i=e+r[1];delete this._walls[o+","+i],o=t+2*r[0],i=e+2*r[1],delete this._walls[o+","+i]}}},{key:"_getDiggingDirection",value:function(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;for(var n=null,u=dt[4],r=0;r<u.length;r++){var o=u[r],i=t+o[0],a=e+o[1];if(!this._map[i][a]){if(n)return null;n=o}}return n?[-n[0],-n[1]]:null}},{key:"_addDoors",value:function(){var t=this._map;function e(e,n){return 1==t[e][n]}for(var n=0;n<this._rooms.length;n++){var u=this._rooms[n];u.clearDoors(),u.addDoors(e)}}}])&&de(e.prototype,n),u&&de(e,u),i}(Wt),EllerMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&we(t,e)}(i,t);var e,n,u,o=xe(i);function i(){return Fe(this,i),o.apply(this,arguments)}return e=i,(n=[{key:"create",value:function(t){for(var e,n=this._fillMap(1),u=Math.ceil((this._width-2)/2),o=[],i=[],a=0;a<u;a++)o.push(a),i.push(a);for(o.push(u-1),e=1;e+3<this._height;e+=2)for(var c=0;c<u;c++){var s=2*c+1,l=e;n[s][l]=0,c!=o[c+1]&&r.a.getUniform()>9/24&&(Oe(c,o,i),n[s+1][l]=0),c!=o[c]&&r.a.getUniform()>9/24?je(c,o,i):n[s][l+1]=0}for(var f=0;f<u;f++){var h=2*f+1,p=e;n[h][p]=0,f!=o[f+1]&&(f==o[f]||r.a.getUniform()>9/24)&&(Oe(f,o,i),n[h+1][p]=0),je(f,o,i)}for(var D=0;D<this._width;D++)for(var y=0;y<this._height;y++)t(D,y,n[D][y]);return this}}])&&Be(e.prototype,n),u&&Be(e,u),i}(Bt),DividedMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Me(t,e)}(i,t);var e,n,u,o=Ie(i);function i(){var t;return Re(this,i),(t=o.apply(this,arguments))._stack=[],t._map=[],t}return e=i,(n=[{key:"create",value:function(t){var e=this._width,n=this._height;this._map=[];for(var u=0;u<e;u++){this._map.push([]);for(var r=0;r<n;r++){var o=0==u||0==r||u+1==e||r+1==n;this._map[u].push(o?1:0)}}this._stack=[[1,1,e-2,n-2]],this._process();for(var i=0;i<e;i++)for(var a=0;a<n;a++)t(i,a,this._map[i][a]);return this._map=[],this}},{key:"_process",value:function(){for(;this._stack.length;){var t=this._stack.shift();this._partitionRoom(t)}}},{key:"_partitionRoom",value:function(t){for(var e=[],n=[],u=t[0]+1;u<t[2];u++){var o=this._map[u][t[1]-1],i=this._map[u][t[3]+1];!o||!i||u%2||e.push(u)}for(var a=t[1]+1;a<t[3];a++){var c=this._map[t[0]-1][a],s=this._map[t[2]+1][a];!c||!s||a%2||n.push(a)}if(e.length&&n.length){var l=r.a.getItem(e),f=r.a.getItem(n);this._map[l][f]=1;var h=[],p=[];h.push(p);for(var D=t[0];D<l;D++)this._map[D][f]=1,D%2&&p.push([D,f]);p=[],h.push(p);for(var y=l+1;y<=t[2];y++)this._map[y][f]=1,y%2&&p.push([y,f]);p=[],h.push(p);for(var v=t[1];v<f;v++)this._map[l][v]=1,v%2&&p.push([l,v]);p=[],h.push(p);for(var d=f+1;d<=t[3];d++)this._map[l][d]=1,d%2&&p.push([l,d]);for(var g=r.a.getItem(h),_=0;_<h.length;_++){var A=h[_];if(A!=g){var C=r.a.getItem(A);this._map[C[0]][C[1]]=0}}this._stack.push([t[0],t[1],l-1,f-1]),this._stack.push([l+1,t[1],t[2],f-1]),this._stack.push([t[0],f+1,l-1,t[3]]),this._stack.push([l+1,f+1,t[2],t[3]])}}}])&&Te(e.prototype,n),u&&Te(e,u),i}(Bt),IceyMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xe(t,e)}(i,t);var e,n,u,o=Ye(i);function i(t,e){var n,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return We(this,i),(n=o.call(this,t,e))._regularity=u,n._map=[],n}return e=i,(n=[{key:"create",value:function(t){var e=this._width,n=this._height,u=this._fillMap(1);e-=e%2?1:2,n-=n%2?1:2;var o=0,i=0,a=0,c=0,s=0,l=!1,f=[[0,0],[0,0],[0,0],[0,0]];do{if(o=1+2*Math.floor(r.a.getUniform()*(e-1)/2),i=1+2*Math.floor(r.a.getUniform()*(n-1)/2),s||(u[o][i]=0),!u[o][i]){this._randomize(f);do{0==Math.floor(r.a.getUniform()*(this._regularity+1))&&this._randomize(f),l=!0;for(var h=0;h<4;h++)if(a=o+2*f[h][0],c=i+2*f[h][1],this._isFree(u,a,c,e,n)){u[a][c]=0,u[o+f[h][0]][i+f[h][1]]=0,o=a,i=c,l=!1,s++;break}}while(!l)}}while(s+1<e*n/4);for(var p=0;p<this._width;p++)for(var D=0;D<this._height;D++)t(p,D,u[p][D]);return this._map=[],this}},{key:"_randomize",value:function(t){for(var e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}},{key:"_isFree",value:function(t,e,n,u,r){return!(e<1||n<1||e>=u||n>=r)&&t[e][n]}}])&&Ne(e.prototype,n),u&&Ne(e,u),i}(Bt),Rogue:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ke(t,e)}(i,t);var e,n,u,o=Qe(i);function i(t,e,n){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(u=o.call(this,t,e)).map=[],u.rooms=[],u.connectedCells=[],(n=Object.assign({cellWidth:3,cellHeight:3},n)).hasOwnProperty("roomWidth")||(n.roomWidth=u._calculateRoomSize(u._width,n.cellWidth)),n.hasOwnProperty("roomHeight")||(n.roomHeight=u._calculateRoomSize(u._height,n.cellHeight)),u._options=n,u}return e=i,(n=[{key:"create",value:function(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(var e=0;e<this._width;e++)for(var n=0;n<this._height;n++)t(e,n,this.map[e][n]);return this}},{key:"_calculateRoomSize",value:function(t,e){var n=Math.floor(t/e*.8),u=Math.floor(t/e*.25);return u<2&&(u=2),n<2&&(n=2),[u,n]}},{key:"_initRooms",value:function(){for(var t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(var e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}},{key:"_connectRooms",value:function(){var t,e,n,u,o,i,a=r.a.getUniformInt(0,this._options.cellWidth-1),c=r.a.getUniformInt(0,this._options.cellHeight-1),s=!1;do{i=[0,2,4,6],i=r.a.shuffle(i);do{if(s=!1,t=i.pop(),e=a+dt[8][t][0],n=c+dt[8][t][1],!(e<0||e>=this._options.cellWidth||n<0||n>=this._options.cellHeight)){if((u=this.rooms[a][c]).connections.length>0&&u.connections[0][0]==e&&u.connections[0][1]==n)break;0==(o=this.rooms[e][n]).connections.length&&(o.connections.push([a,c]),this.connectedCells.push([e,n]),a=e,c=n,s=!0)}}while(i.length>0&&0==s)}while(i.length>0)}},{key:"_connectUnconnectedRooms",value:function(){var t,e,n,u=this._options.cellWidth,o=this._options.cellHeight;this.connectedCells=r.a.shuffle(this.connectedCells);for(var i=0;i<this._options.cellWidth;i++)for(var a=0;a<this._options.cellHeight;a++)if(0==(t=this.rooms[i][a]).connections.length){var c=[0,2,4,6];c=r.a.shuffle(c),n=!1;do{var s=c.pop(),l=i+dt[8][s][0],f=a+dt[8][s][1];if(!(l<0||l>=u||f<0||f>=o)){if(n=!0,0==(e=this.rooms[l][f]).connections.length)break;for(var h=0;h<e.connections.length;h++)if(e.connections[h][0]==i&&e.connections[h][1]==a){n=!1;break}if(n)break}}while(c.length);n?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}},{key:"_createRandomRoomConnections",value:function(){}},{key:"_createRooms",value:function(){for(var t,e,n,u,o,i=this._width,a=this._height,c=this._options.cellWidth,s=this._options.cellHeight,l=Math.floor(this._width/c),f=Math.floor(this._height/s),h=this._options.roomWidth,p=this._options.roomHeight,D=0;D<c;D++)for(var y=0;y<s;y++){if(0==(n=l*D)&&(n=1),0==(u=f*y)&&(u=1),t=r.a.getUniformInt(h[0],h[1]),e=r.a.getUniformInt(p[0],p[1]),y>0)for(o=this.rooms[D][y-1];u-(o.y+o.height)<3;)u++;if(D>0)for(o=this.rooms[D-1][y];n-(o.x+o.width)<3;)n++;for(var v=Math.round(r.a.getUniformInt(0,l-t)/2),d=Math.round(r.a.getUniformInt(0,f-e)/2);n+v+t>=i;)v?v--:t--;for(;u+d+e>=a;)d?d--:e--;n+=v,u+=d,this.rooms[D][y].x=n,this.rooms[D][y].y=u,this.rooms[D][y].width=t,this.rooms[D][y].height=e;for(var g=n;g<n+t;g++)for(var _=u;_<u+e;_++)this.map[g][_]=0}}},{key:"_getWallPosition",value:function(t,e){var n,u,o;return 1==e||3==e?(n=r.a.getUniformInt(t.x+1,t.x+t.width-2),o=1==e?1+(u=t.y-2):(u=t.y+t.height+1)-1,this.map[n][o]=0):(u=r.a.getUniformInt(t.y+1,t.y+t.height-2),o=2==e?(n=t.x+t.width+1)-1:1+(n=t.x-2),this.map[o][u]=0),[n,u]}},{key:"_drawCorridor",value:function(t,e){var n,u,o,i,a=e[0]-t[0],c=e[1]-t[1],s=t[0],l=t[1],f=[],h=Math.abs(a),p=Math.abs(c),D=r.a.getUniform(),y=D,v=1-D;for(u=a>0?2:6,o=c>0?4:0,h<p?(n=Math.ceil(p*y),f.push([o,n]),f.push([u,h]),n=Math.floor(p*v),f.push([o,n])):(n=Math.ceil(h*y),f.push([u,n]),f.push([o,p]),n=Math.floor(h*v),f.push([u,n])),this.map[s][l]=0;f.length>0;)for(i=f.pop();i[1]>0;)s+=dt[8][i[0]][0],l+=dt[8][i[0]][1],this.map[s][l]=0,i[1]=i[1]-1}},{key:"_createCorridors",value:function(){for(var t,e,n,u,r,o=this._options.cellWidth,i=this._options.cellHeight,a=0;a<o;a++)for(var c=0;c<i;c++){t=this.rooms[a][c];for(var s=0;s<t.connections.length;s++)e=t.connections[s],(n=this.rooms[e[0]][e[1]]).cellx>t.cellx?(u=2,r=4):n.cellx<t.cellx?(u=4,r=2):n.celly>t.celly?(u=3,r=1):(u=1,r=3),this._drawCorridor(this._getWallPosition(t,u),this._getWallPosition(n,r))}}}])&&Ge(e.prototype,n),u&&Ge(e,u),i}(Bt)};Math.sqrt(3),Math.sqrt(3);function tn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function en(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}var nn=function(){function t(e,n,u){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};tn(this,t),this._toX=e,this._toY=n,this._passableCallback=u,this._options=Object.assign({topology:8},r),this._dirs=dt[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}var e,n,u;return e=t,(n=[{key:"_getNeighbors",value:function(t,e){for(var n=[],u=0;u<this._dirs.length;u++){var r=this._dirs[u],o=t+r[0],i=e+r[1];this._passableCallback(o,i)&&n.push([o,i])}return n}}])&&en(e.prototype,n),u&&en(e,u),t}();function un(t){return(un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function rn(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function on(t,e){return(on=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function an(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=sn(t);if(e){var r=sn(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return cn(this,n)}}function cn(t,e){return!e||"object"!==un(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function sn(t){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ln(t){return(ln="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hn(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function pn(t,e){return(pn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Dn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=vn(t);if(e){var r=vn(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return yn(this,n)}}function yn(t,e){return!e||"object"!==ln(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function vn(t){return(vn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var dn={Dijkstra:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&on(t,e)}(o,t);var e,n,u,r=an(o);function o(t,e,n,u){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,e,n,u))._computed={},i._todo=[],i._add(t,e,null),i}return e=o,(n=[{key:"compute",value:function(t,e,n){var u=t+","+e;if(u in this._computed||this._compute(t,e),u in this._computed)for(var r=this._computed[u];r;)n(r.x,r.y),r=r.prev}},{key:"_compute",value:function(t,e){for(;this._todo.length;){var n=this._todo.shift();if(n.x==t&&n.y==e)return;for(var u=this._getNeighbors(n.x,n.y),r=0;r<u.length;r++){var o=u[r],i=o[0],a=o[1];i+","+a in this._computed||this._add(i,a,n)}}}},{key:"_add",value:function(t,e,n){var u={x:t,y:e,prev:n};this._computed[t+","+e]=u,this._todo.push(u)}}])&&rn(e.prototype,n),u&&rn(e,u),o}(nn),AStar:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&pn(t,e)}(o,t);var e,n,u,r=Dn(o);function o(t,e,n){var u,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return fn(this,o),(u=r.call(this,t,e,n,i))._todo=[],u._done={},u}return e=o,(n=[{key:"compute",value:function(t,e,n){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){var u=this._todo.shift(),r=u.x+","+u.y;if(!(r in this._done)){if(this._done[r]=u,u.x==t&&u.y==e)break;for(var o=this._getNeighbors(u.x,u.y),i=0;i<o.length;i++){var a=o[i],c=a[0],s=a[1];c+","+s in this._done||this._add(c,s,u)}}}var l=this._done[t+","+e];if(l)for(;l;)n(l.x,l.y),l=l.prev}},{key:"_add",value:function(t,e,n){for(var u=this._distance(t,e),r={x:t,y:e,prev:n,g:n?n.g+1:0,h:u},o=r.g+r.h,i=0;i<this._todo.length;i++){var a=this._todo[i],c=a.g+a.h;if(o<c||o==c&&u<a.h)return void this._todo.splice(i,0,r)}this._todo.push(r)}},{key:"_distance",value:function(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:var n=Math.abs(t-this._fromX),u=Math.abs(e-this._fromY);return u+Math.max(0,(n-u)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}])&&hn(e.prototype,n),u&&hn(e,u),o}(nn)};window.devicePixelRatio,document.querySelector("#game");var gn=50,_n=34,An={width:20,height:10,x:10,y:3},Cn={width:10,height:10,x:31,y:3},En={width:10,height:2,x:1,y:3},mn={width:50,height:2,x:10,y:14},bn={width:30,height:1,x:10,y:16},Fn={width:20,height:1,x:12,y:2},Bn={width:40,height:30},wn=new mt({bg:"black",fg:"Grey",fontFamily:"Fira Mono",width:gn,height:_n,fontSize:18,forceSquareRatio:!0});document.body.appendChild(wn.getContainer());var xn={bg:"black",fg:"Grey",fontFamily:"Fira Mono",width:Bn.width,height:Bn.height,fontSize:18,forceSquareRatio:!0},kn=document.createElement("div");kn.id="helpMenu",document.body.appendChild(kn);var Sn=new mt(xn);function On(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||Rn(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jn(t,e){if(null==t)return{};var n,u,r=function(t,e){if(null==t)return{};var n,u,r={},o=Object.keys(t);for(u=0;u<o.length;u++)n=o[u],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(u=0;u<o.length;u++)n=o[u],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function Pn(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=Rn(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var u=0,r=function(){};return{s:r,n:function(){return u>=t.length?{done:!0}:{done:!1,value:t[u++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){a=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(a)throw o}}}}function Rn(t,e){if(t){if("string"==typeof t)return Tn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Tn(t,e):void 0}}function Tn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function Mn(t){return(Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function In(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function zn(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Un(t,e,n){return e&&zn(t.prototype,e),n&&zn(t,n),t}function Ln(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);e&&(u=u.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,u)}return n}function Wn(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ln(Object(n),!0).forEach((function(e){Nn(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ln(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Nn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Xn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}kn.appendChild(Sn.getContainer()),Sn.drawText(0,0,"HELLO CAN YOU SEE THIS");var Yn=function(t,e){if("string"!=typeof t&&!Array.isArray(t))throw new TypeError("Expected the input to be `string | string[]`");e=Wn(Wn({},{pascalCase:!1}),e);var n;return 0===(t=Array.isArray(t)?t.map((function(t){return t.trim()})).filter((function(t){return t.length})).join("-"):t.trim()).length?"":1===t.length?e.pascalCase?t.toLocaleUpperCase():t.toLocaleLowerCase():(t!==t.toLocaleLowerCase()&&(t=function(t){for(var e=!1,n=!1,u=!1,r=0;r<t.length;r++){var o=t[r];e&&/(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/.test(o)?(t=t.slice(0,r)+"-"+t.slice(r),e=!1,u=n,n=!0,r++):n&&u&&/(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43])/.test(o)?(t=t.slice(0,r-1)+"-"+t.slice(r-1),u=n,n=!1,e=!0):(e=o.toLocaleLowerCase()===o&&o.toLocaleUpperCase()!==o,u=n,n=o.toLocaleUpperCase()===o&&o.toLocaleLowerCase()!==o)}return t}(t)),t=t.replace(/^[_.\- ]+/,"").toLocaleLowerCase().replace(/[ \x2D\._]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(t,e){return e.toLocaleUpperCase()})).replace(/[0-9]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(t){return t.toLocaleUpperCase()})),n=t,e.pascalCase?n.charAt(0).toLocaleUpperCase()+n.slice(1):n)},Hn=Yn,qn=Yn;Hn.default=qn;var $n={},Gn=function(t){var e=$n[t];return e||($n[t]=Hn(t),$n[t])},Kn=function(){function t(){In(this,t),Xn(this,"_cbit",0),Xn(this,"_map",{})}return Un(t,[{key:"register",value:function(t){var e=Gn(t.name);t.prototype._ckey=e,t.prototype._cbit=BigInt(++this._cbit),this._map[e]=t}},{key:"get",value:function(t){return this._map[t]}}]),t}(),Qn=function(t){return function(t){return!!t&&"object"===Mn(t)}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===Vn}(t)}(t)};var Vn="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Zn(t,e){return!1!==e.clone&&e.isMergeableObject(t)?uu((n=t,Array.isArray(n)?[]:{}),t,e):t;var n}function Jn(t,e,n){return t.concat(e).map((function(t){return Zn(t,n)}))}function tu(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function eu(t,e){try{return e in t}catch(t){return!1}}function nu(t,e,n){var u={};return n.isMergeableObject(t)&&tu(t).forEach((function(e){u[e]=Zn(t[e],n)})),tu(e).forEach((function(r){(function(t,e){return eu(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,r)||(eu(t,r)&&n.isMergeableObject(e[r])?u[r]=function(t,e){if(!e.customMerge)return uu;var n=e.customMerge(t);return"function"==typeof n?n:uu}(r,n)(t[r],e[r],n):u[r]=Zn(e[r],n))})),u}function uu(t,e,n){(n=n||{}).arrayMerge=n.arrayMerge||Jn,n.isMergeableObject=n.isMergeableObject||Qn,n.cloneUnlessOtherwiseSpecified=Zn;var u=Array.isArray(e);return u===Array.isArray(t)?u?n.arrayMerge(t,e,n):nu(t,e,n):Zn(e,n)}uu.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,n){return uu(t,n,e)}),{})};var ru=uu,ou=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},u=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];In(this,t),this.clazz=e,this.properties=n,this.overwrite=u}return Un(t,[{key:"applyToEntity",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.clazz.allowMultiple&&t.has(this.clazz)){if(!this.overwrite)return;var n=t[this.clazz.prototype._ckey];t.remove(n)}var u=ru(this.properties,e);t.add(this.clazz,u)}}]),t}(),iu=function(){function t(e){In(this,t),Xn(this,"name",""),Xn(this,"inherit",[]),Xn(this,"components",[]),this.name=e}return Un(t,[{key:"addComponent",value:function(t){this.components.push(t)}},{key:"applyToEntity",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.inherit.forEach((function(n){n.applyToEntity(t,e)}));var n={};return this.components.forEach((function(u){var r=u.clazz,o=r.prototype._ckey,i={};if(r.allowMultiple)if(r.keyProperty){var a=u.properties[r.keyProperty];e[o]&&e[o][a]&&(i=e[o][a])}else n[o]||(n[o]=0),e[o]&&e[o][n[o]]&&(i=e[o][n[o]]),n[o]++;else i=e[o];u.applyToEntity(t,i)})),t}}]),t}(),au=function(){function t(e){In(this,t),Xn(this,"_prefabs",{}),Xn(this,"_engine",null),this._engine=e}return Un(t,[{key:"deserialize",value:function(t){var e=this,n=this.get(t.name);if(n)return n;var u,r=new iu(t.name);return u=Array.isArray(t.inherit)?t.inherit:"string"==typeof t.inherit?[t.inherit]:[],r.inherit=u.map((function(n){var u=e.get(n);return u||(console.warn('Prefab "'.concat(t.name,'" cannot inherit from Prefab "').concat(n,'" because is not registered yet! Prefabs must be registered in the right order.')),n)})),(t.components||[]).forEach((function(n){if("string"==typeof n){var u=Gn(n),o=e._engine._components.get(u);if(o)return void r.addComponent(new ou(o))}if("object"===Mn(n)){var i=Gn(n.type),a=e._engine._components.get(i);if(a)return void r.addComponent(new ou(a,n.properties,n.overwrite))}console.warn('Unrecognized component reference "'.concat(n,'" in prefab "').concat(t.name,'". Ensure the component is registered before the prefab.'))})),r}},{key:"register",value:function(t){var e=this.deserialize(t);this._prefabs[e.name]=e}},{key:"get",value:function(t){return this._prefabs[t]}},{key:"create",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=this.get(e);if(u){var r=t.createEntity();return r._qeligible=!1,u.applyToEntity(r,n),r._qeligible=!0,r._candidacy(),r}console.warn('Could not instantiate prefab "'.concat(e,'" since it is not registered'))}}]),t}(),cu=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};In(this,t),Object.assign(this,this.constructor.properties,e)}return Un(t,[{key:"world",get:function(){return this.entity.world}},{key:"allowMultiple",get:function(){return this.constructor.allowMultiple}},{key:"keyProperty",get:function(){return this.constructor.keyProperty}},{key:"destroy",value:function(){this.entity.remove(this)}},{key:"_onDestroyed",value:function(){this.onDestroyed(),delete this.entity}},{key:"_onEvent",value:function(t){this.onEvent(t),"function"==typeof this[t.handlerName]&&this[t.handlerName](t)}},{key:"_onAttached",value:function(t){this.entity=t,this.onAttached(t)}},{key:"serialize",value:function(){var t={};for(var e in this.constructor.properties)t[e]=this[e];return t}},{key:"onAttached",value:function(t){}},{key:"onDestroyed",value:function(){}},{key:"onEvent",value:function(t){}}]),t}();Xn(cu,"allowMultiple",!1),Xn(cu,"keyProperty",null),Xn(cu,"properties",{});var su=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};In(this,t),Xn(this,"data",{}),Xn(this,"prevented",!1),Xn(this,"handled",!1),this.name=e,this.data=n,this.handlerName=Gn("on ".concat(this.name))}return Un(t,[{key:"is",value:function(t){return this.name===t}},{key:"handle",value:function(){this.handled=!0,this.prevented=!0}},{key:"prevent",value:function(){this.prevented=!0}}]),t}(),lu=1n,fu=function(t,e){return t&~(1n<<e)},hu=function(t,e){return t|lu<<e},pu=function(t,e){return t&e},Du=function(t){return t.serialize()},yu=function(t){var e={};for(var n in t)e[n]=Du(t[n]);return e},vu=function(){function t(e,n){In(this,t),Xn(this,"_cbits",0n),Xn(this,"_qeligible",!0),this.world=e,this.id=n,this.components={},this.isDestroyed=!1}return Un(t,[{key:"_candidacy",value:function(){this._qeligible&&this.world._candidate(this)}},{key:"add",value:function(t,e){var n=new t(e);n.keyProperty?function(t,e){var n=e._ckey;t.components[n]||(t[n]={},t.components[n]={}),t[n][e[e.keyProperty]]=e,t.components[n][e[e.keyProperty]]=e}(this,n):n.allowMultiple?function(t,e){var n=e._ckey;t.components[n]||(t[n]=[],t.components[n]=[]),t[n].push(e),t.components[n].push(e)}(this,n):function(t,e){var n=e._ckey;t[n]=e,t.components[n]=e}(this,n),this._cbits=hu(this._cbits,n._cbit),n._onAttached(this),this._candidacy()}},{key:"has",value:function(t){return e=this._cbits,n=t.prototype._cbit,(e>>n)%2n!==0n;var e,n}},{key:"remove",value:function(t){t.keyProperty?function(t,e){var n=e._ckey,u=e[e.keyProperty];delete t[n][u],delete t.components[n][u],Object.keys(t[n]).length<=0&&(delete t[n],delete t.components[n],t._cbits=fu(t._cbits,e._cbit),t._candidacy())}(this,t):t.allowMultiple?function(t,e){var n=e._ckey,u=t[n].indexOf(e);t[n].splice(u,1),t.components[n].splice(u,1),t[n].length<=0&&(delete t[n],delete t.components[n],t._cbits=fu(t._cbits,e._cbit),t._candidacy())}(this,t):function(t,e){var n=e._ckey;delete t[n],delete t.components[n],t._cbits=fu(t._cbits,e._cbit),t._candidacy()}(this,t),t._onDestroyed()}},{key:"destroy",value:function(){for(var t in this.components){var e=this.components[t];if(e instanceof cu)this._cbits=fu(this._cbits,e._cbit),e._onDestroyed();else if(e instanceof Array){var n,u=Pn(e);try{for(u.s();!(n=u.n()).done;){var r=n.value;this._cbits=fu(this._cbits,r._cbit),r._onDestroyed()}}catch(t){u.e(t)}finally{u.f()}}else for(var o=0,i=Object.values(e);o<i.length;o++){var a=i[o];this._cbits=fu(this._cbits,a._cbit),a._onDestroyed()}delete this[t],delete this.components[t]}this._candidacy(),this.world._destroyed(this.id),this.components={},this.isDestroyed=!0}},{key:"serialize",value:function(){var t={};for(var e in this.components){var n=this.components[e];t[e]=n instanceof cu?Du(n):n instanceof Array?n.map(Du):yu(n)}return Wn({id:this.id},t)}},{key:"fireEvent",value:function(t,e){var n=new su(t,e);for(var u in this.components){var r=this.components[u];if(r instanceof cu){if(r._onEvent(n),n.prevented)return n}else if(r instanceof Array){for(var o=0;o<r.length;o++)if(r[o]._onEvent(n),n.prevented)return n}else for(var i=0,a=Object.values(r);i<a.length;i++){if(a[i]._onEvent(n),n.prevented)return n}}return n}}]),t}(),du=function(){function t(e,n){In(this,t),Xn(this,"_cache",[]),Xn(this,"_onAddListeners",[]),Xn(this,"_onRemoveListeners",[]),this._world=e;var u=n.any||[],r=n.all||[],o=n.none||[];this._any=u.reduce((function(t,e){return hu(t,e.prototype._cbit)}),0n),this._all=r.reduce((function(t,e){return hu(t,e.prototype._cbit)}),0n),this._none=o.reduce((function(t,e){return hu(t,e.prototype._cbit)}),0n),this.refresh()}return Un(t,[{key:"onEntityAdded",value:function(t){this._onAddListeners.push(t)}},{key:"onEntityRemoved",value:function(t){this._onRemoveListeners.push(t)}},{key:"has",value:function(t){return this.idx(t)>=0}},{key:"idx",value:function(t){return this._cache.indexOf(t)}},{key:"matches",value:function(t){var e=t._cbits,n=0n===this._any||pu(e,this._any)>0,u=pu(e,this._all)===this._all,r=0n===pu(e,this._none);return n&&u&&r}},{key:"candidate",value:function(t){var e=this.idx(t),n=e>=0;return!t.isDestroyed&&this.matches(t)?(n||(this._cache.push(t),this._onAddListeners.forEach((function(e){return e(t)}))),!0):(n&&(this._cache.splice(e,1),this._onRemoveListeners.forEach((function(e){return e(t)}))),!1)}},{key:"refresh",value:function(){var t=this;this._cache=[],this._world._entities.forEach((function(e){t.candidate(e)}))}},{key:"get",value:function(){return this._cache}}]),t}(),gu=function(){function t(e){In(this,t),Xn(this,"_id",0),Xn(this,"_queries",[]),Xn(this,"_entities",new Map),this.engine=e}return Un(t,[{key:"createId",value:function(){return++this._id+Math.random().toString(36).substr(2,9)}},{key:"getEntity",value:function(t){return this._entities.get(t)}},{key:"getEntities",value:function(){return this._entities.values()}},{key:"createEntity",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.createId(),e=new vu(this,t);return this._entities.set(t,e),e}},{key:"destroyEntity",value:function(t){var e=this.getEntity(t);e&&e.destroy()}},{key:"destroyEntities",value:function(){this._entities.forEach((function(t){t.destroy()}))}},{key:"destroy",value:function(){this.destroyEntities(),this._id=0,this._queries=[],this._entities=new Map}},{key:"createQuery",value:function(t){var e=new du(this,t);return this._queries.push(e),e}},{key:"createPrefab",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.engine._prefabs.create(this,t,e)}},{key:"serialize",value:function(t){var e=[];return(t||this._entities).forEach((function(t){e.push(t.serialize())})),{entities:e}}},{key:"deserialize",value:function(t){var e,n=Pn(t.entities);try{for(n.s();!(e=n.n()).done;){var u=e.value;this._createOrGetEntityById(u.id)}}catch(t){n.e(t)}finally{n.f()}var r,o=Pn(t.entities);try{for(o.s();!(r=o.n()).done;){var i=r.value;this._deserializeEntity(i)}}catch(t){o.e(t)}finally{o.f()}}},{key:"_createOrGetEntityById",value:function(t){return this.getEntity(t)||this.createEntity(t)}},{key:"_deserializeEntity",value:function(t){var e=this,n=t.id,u=jn(t,["id"]),r=this._createOrGetEntityById(n);r._qeligible=!1,Object.entries(u).forEach((function(t){var n=On(t,2),u=n[0],o=n[1],i=Gn(u),a=e.engine._components.get(i);a.allowMultiple?Object.values(o).forEach((function(t){r.add(a,t)})):r.add(a,o)})),r._qeligible=!0,r._candidacy()}},{key:"_candidate",value:function(t){this._queries.forEach((function(e){return e.candidate(t)}))}},{key:"_destroyed",value:function(t){return this._entities.delete(t)}}]),t}(),_u=function(){function t(){In(this,t),Xn(this,"_components",new Kn),Xn(this,"_prefabs",new au(this))}return Un(t,[{key:"registerComponent",value:function(t){this._components.register(t)}},{key:"registerPrefab",value:function(t){this._prefabs.register(t)}},{key:"createWorld",value:function(){return new gu(this)}},{key:"destroyWorld",value:function(t){t.destroy()}}]),t}(),Au=n(4),Cu={entitiesAtLocation:{}},Eu=function(t,e,n){Cu[t][e]||(Cu[t][e]=new Set),Cu[t][e].add(n)},mu=function(t,e,n){Cu[t][e]&&Cu[t][e].has(n)&&Cu[t][e].delete(n)},bu=function(t,e,n){if(Cu[t][e])return n?Cu[t][e].get(n):Cu[t][e]},Fu=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return wu(t,1,e)},Bu=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return wu(t,2,e)},wu=function(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,2,3,4,5,6],u=[],r=1;r<7;r++)t[r]&&t[r]==e&&n.includes(r)&&(console.log("found match"),u.push(r));return console.log(t),console.log(u),console.log("match:"+e),u},xu=function(t){var e=t;return"string"!=typeof e&&(e=Su(e)),e},ku=function(t){var e=t.split(",");return{x:parseInt(e[0],10),y:parseInt(e[1],10)}},Su=function(t){var e=t.x,n=t.y;return"".concat(e,",").concat(n)};function Ou(t){return function(t){if(Array.isArray(t))return ju(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return ju(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ju(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ju(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}var Pu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return Fu(n)},onUse:function(t,e){console.log("used"),console.log(t),console.log(t.abilityPhase.phase),Wu(e),e.fireEvent("gain-movement",3),e.fireEvent("exhaust-selected")}},Ru={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return Fu(n)},onUse:function(t,e){for(var n=Wu(e),u=0,r=1;r<7;r++)n[r]&&1==n[r]&&(u=r);e.fireEvent("gain-movement",u),e.fireEvent("exhaust-selected")}},Tu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return Bu(n)},onUse:function(t,e){e.fireEvent("gain-dodge",1),e.fireEvent("exhaust-selected")}},Mu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return!e.has(Dr)&&Fu(n,t.abilityAllowedDie.allowed)},onUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;console.log(t),console.log(t.abilityTarget.coords);var u=Nu(t,e,n);u.forEach((function(t){console.log(t),console.log(n.x+","+n.y);var e=Zr.createEntity();e.add(ar,{x:n.x+t[0],y:n.y+t[1]}),e.add(Ar),e.add(Er)})),e.fireEvent("exhaust-selected"),t.has(Pr)&&e.add(Dr)},onTarget:function(t,e){jo(t),Po(e),Ho("targeting")}},Iu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return!e.has(Dr)&&Fu(n,t.abilityAllowedDie.allowed)},onUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,u=Nu(t,e,n);u.forEach((function(t){console.log(t);var e=Zr.createEntity();e.add(ar,{x:n.x+t[0],y:n.y+t[1]}),e.add(_r),e.add(Er)})),e.fireEvent("exhaust-selected"),t.has(Pr)&&e.add(Dr)},onTarget:function(t,e){jo(t),Po(e),Ho("targeting")}},zu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return!e.has(Dr)&&Fu(n,t.abilityAllowedDie.allowed)},onUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,u=Nu(t,e,n);u.forEach((function(t){console.log(t);var e=Zr.createEntity();e.add(ar,{x:n.x+t[0],y:n.y+t[1]}),e.add(_r),e.add(Er)})),e.fireEvent("exhaust-selected"),t.has(Pr)&&e.add(Dr)},onTarget:function(t,e){jo(t),Po(e),Ho("targeting")}},Uu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return!e.has(Dr)&&Bu(n,t.abilityAllowedDie.allowed)},onUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,u=Nu(t,e,n);u.forEach((function(e){console.log(e);var u=Zr.createEntity();u.add(ar,{x:n.x+e[0],y:n.y+e[1]}),u.add(_r),u.add(Er,{dmg:t.abilityDamage.dmg})})),e.fireEvent("exhaust-selected"),t.has(Pr)&&e.add(Dr)},onTarget:function(t,e){jo(t),Po(e),Ho("targeting")}},Lu={canUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Wu(e);return!e.has(Dr)&&Bu(n,t.abilityAllowedDie.allowed)},onUse:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,u=Nu(t,e,n);u.forEach((function(e){console.log(e);var u=Zr.createEntity();u.add(ar,{x:n.x+e[0],y:n.y+e[1]}),u.add(Ar),u.add(Er,{dmg:t.abilityDamage.dmg})})),e.fireEvent("exhaust-selected"),t.has(Pr)&&e.add(Dr)},onTarget:function(t,e){jo(t),Po(e),Ho("targeting")}};var Wu=function(t){for(var e=[],n=0;n<t.die.length;n++)t.die[n].selected&&!t.die[n].exhausted&&e.push(t.die[n].number);e.sort();var u={};return e.forEach((function(t){u[t]=(u[t]||0)+1})),u},Nu=function(t,e,n){var u=n.x-e.position.x,r=n.y-e.position.y,o=t.abilityTarget.coords;return console.log("before rotate"),console.log(o),console.log("direction"),r<=-1?console.log("up"):r>=1?(console.log("down"),o=Hu(o)):u<=-1?(console.log("left"),o=Yu(o)):u>=1&&(console.log("right"),o=Xu(o)),console.log("after rotate"),console.log(o),o},Xu=function(t){var e=[];return t.forEach((function(t){var n=[];n.push(t[1]),n.push(t[0]),n[0]=-1*n[0],n[1]=1*n[1],e.push(n)})),e},Yu=function(t){var e=[];return t.forEach((function(t){var n=[];n.push(t[1]),n.push(t[0]),n[1]=-1*n[1],e.push(n)})),e},Hu=function(t){var e=[];return t.forEach((function(t){var n=[];(n=Ou(t))[0]=-1*n[0],n[1]=-1*n[1],e.push(n)})),e};function qu(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return $u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $u(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var u=0,r=function(){};return{s:r,n:function(){return u>=t.length?{done:!0}:{done:!1,value:t[u++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,a=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return i=t.done,t},e:function(t){a=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(a)throw o}}}}function $u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}function Gu(t){return(Gu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ku(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Qu(t,e,n){return e&&Ku(t.prototype,e),n&&Ku(t,n),t}function Vu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Zu(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ju(t,e)}function Ju(t,e){return(Ju=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function tr(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,u=nr(t);if(e){var r=nr(this).constructor;n=Reflect.construct(u,arguments,r)}else n=u.apply(this,arguments);return er(this,n)}}function er(t,e){return!e||"object"!==Gu(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function nr(t){return(nr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ur(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var rr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(rr,"properties",{color:"#ff0077",char:"?",background:"#000"});var or=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(or,"properties",{name:"No Name",description:"nothing"});var ir=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),ar=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onAttached",value:function(){var t="".concat(this.entity.position.x,",").concat(this.entity.position.y);Eu("entitiesAtLocation",t,this.entity.id)}},{key:"onDestroyed",value:function(){var t="".concat(this.x,",").concat(this.y);mu("entitiesAtLocation",t,this.entity.id)}}]),n}(cu);ur(ar,"properties",{x:0,y:0});var cr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onTakeDamage",value:function(t){console.log("i've been hit!"),this.current-=t.data.amount,console.log(this),console.log("ow"),this.current<=0&&(this.entity.remove(this.entity.position),this.entity.add(Cr)),t.handle()}}]),n}(cu);ur(cr,"properties",{max:4,current:4});var sr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onGainMovement",value:function(t){this.movement+=t.data,console.log("new movement: "+this.movement),t.handle()}},{key:"onGainDodge",value:function(t){this.dodge+=t.data,t.handle()}},{key:"onTurnEnd",value:function(t){console.log("ended in move"),this.movement=0,this.dodge=0}},{key:"onChangePosition",value:function(t){this.x=t.data.x,this.y=t.data.y,t.handle()}},{key:"onAttemptMove",value:function(t){this.movement<=0&&this.dodge<=0?t.handle():function(t,e){console.log("check here"),console.log(t),console.log(e);var n=t.x,u=t.y;n=e.position.x+n,u=e.position.y+u;var r=[],o=[];console.log("".concat(n,",").concat(u));var i=bu("entitiesAtLocation","".concat(n,",").concat(u));console.log(i);var a,c=qu(i);try{for(c.s();!(a=c.n()).done;){var s=a.value;Zr.getEntity(s).isBlocking&&r.push(s)}}catch(t){c.e(t)}finally{c.f()}if(r.length>=1)return console.log("blocked"),!1;var l,f=qu(bu("entitiesAtLocation",xu({x:e.position.x,y:e.position.y})));try{for(f.s();!(l=f.n()).done;){var h=l.value;console.log(Zr.getEntity(h)),Zr.getEntity(h).fastAttack&&o.push(e)}}catch(t){f.e(t)}finally{f.f()}return o.length>=1&&e.movement.dodge<1?(console.log("no dodge"),!1):(mu("entitiesAtLocation","".concat(e.position.x,",").concat(e.position.y),e.id),Eu("entitiesAtLocation","".concat(n,",").concat(u),e.id),e.position.x=n,e.position.y=u,!0)}(this,this.entity)&&(this.dodge>0?this.dodge=Math.max(0,this.dodge-1):this.movement-=1);this.x=0,this.y=0,t.handle()}}]),n}(cu);ur(sr,"properties",{movement:0,dodge:0,x:0,y:0});var lr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onTurnStart",value:function(t){this.entity.fireEvent("gain-movement",this.amount)}}]),n}(cu);ur(lr,"properties",{amount:3});var fr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(fr,"properties",{max:0,current:0});var hr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onAttached",value:function(){for(var t=0;t<this.max;t++)this.entity.add(pr);this.onRollDice()}},{key:"onTurnEnd",value:function(t){console.log("doing turn end"),this.current=Math.min(this.max,this.current+Math.max(0,this.regen-this.used)),this.used=0,this.onRollDice()}},{key:"onRollDice",value:function(){for(var t=0;t<this.max;t++)this.entity.die[t].selected=!1,this.entity.die[t].exhausted=t>=this.current,this.entity.die[t].number=Object(Au.random)(1,6)}},{key:"onUseStamina",value:function(t){this.current=Math.max(this.current-t.data,0)}},{key:"onAiUseStamina",value:function(t){this.used+=t.data}},{key:"onUpdateStamina",value:function(){}}]),n}(cu);ur(hr,"properties",{max:5,current:5,used:0,regen:4});var pr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onExhaustSelected",value:function(t){this.selected&&(this.entity.stamina.used++,this.entity.stamina.current--,this.exhausted=!0,this.selected=!1,this.entity.fireEvent("update-stamina"))}}]),n}(cu);ur(pr,"allowMultiple",!0),ur(pr,"properties",{number:0,selected:!1,exhausted:!1});var Dr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onTurnEnd",value:function(t){this.destroy()}}]),n}(cu),yr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),vr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(vr,"properties",{enemy:!0});var dr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),gr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),_r=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),Ar=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),Cr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),Er=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(Er,"properties",{dmg:1});var mr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return Qu(n,[{key:"onAttached",value:function(){var t=[];this.abilities.forEach((function(e){t.push(Zr.createPrefab(e))})),this.abilities=t}}]),n}(cu);ur(mr,"properties",{abilities:[]});var br=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(br,"properties",{coords:[[0,0]]});var Fr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(Fr,"properties",{allowed:[1,2,3,4,5,6]});var Br=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(Br,"properties",{function:Pu});var wr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(wr,"properties",{phase:"Any"});var xr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(xr,"properties",{speed:"Instant"});var kr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(kr,"properties",{amount:1});var Sr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(Sr,"properties",{smallName:"abl"});var Or=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(Or,"properties",{range:1});var jr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu);ur(jr,"properties",{dmg:1});var Pr=function(t){Zu(n,t);var e=tr(n);function n(){return Vu(this,n),e.apply(this,arguments)}return n}(cu),Rr={name:"Tile",components:[{type:"Appearance"},{type:"Description"},{type:"LayerMap"}]},Tr={name:"Being",components:[{type:"Appearance"},{type:"Description"},{type:"Health"},{type:"IsBlocking"},{type:"LayerUnit"},{type:"Movement"},{type:"Armour"},{type:"Stamina"},{type:"AbilityList"}]},Mr={name:"Ability",components:[{type:"Description",properties:{name:"Generic Ability",description:"used for testing as base template"}},{type:"AbilityPhase"},{type:"AbilitySpeed"},{type:"AbilityStaminaCost"},{type:"AbilityFunction"},{type:"AbilitySmallName"},{type:"AbilityTarget"},{type:"AbilityAllowedDie"},{type:"AbilityRange"},{type:"AbilityDamage"}]},Ir={name:"Wall",inherit:["Tile"],components:[{type:"IsBlocking"},{type:"Appearance",properties:{char:"#",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]},zr={name:"Floor",inherit:["Tile"],components:[{type:"Appearance",properties:{char:".",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]},Ur={name:"PlayerBeing",inherit:["Being"],components:[{type:"IsPlayerControlled"},{type:"Apperance",properties:{char:"@"}},{type:"AbilityList",properties:{abilities:["AbilityMove","AbilityDodge","AbilitySwordJab","AbilitySwordSwing"]}}]},Lr={name:"Mob",inherit:["Being"],components:[{type:"Ai"},{type:"IsEnemy"},{type:"GainMovement"}]},Wr={name:"Goblin",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"g",color:"green"}},{type:"Description",properties:{name:"Goblin",description:"A lowly Goblin"}},{type:"AbilityList",properties:{abilities:["AbilitySpearThrust"]}},{type:"Health",properties:{max:2,current:2}},{type:"Stamina",properties:{max:2,current:2,used:0,regen:2}}]},Nr={name:"Orc Warrior",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"o",color:"green"}},{type:"Description",properties:{name:"Orc Warrior",description:"A fearsome Orc wielding axees"}},{type:"AbilityList",properties:{abilities:["AbilityDoubleAxeSwing","AbilityAxeDecapitate"]}},{type:"Health",properties:{max:8,current:8}},{type:"Stamina",properties:{max:4,current:4,used:0,regen:4}}]},Xr={name:"AbilityMove",inherit:["Ability"],components:[{type:"Description",properties:{name:"Move",description:"exhausts 1 die to give it's face value for movement points"}},{type:"AbilityFunction",properties:{function:Ru}},{type:"AbilitySmallName",properties:{smallName:"MOV"}}]},Yr={name:"AbilityDodge",inherit:["Ability"],components:[{type:"Description",properties:{name:"Dodge",description:"exhausts a pair to give 1 dodge point"}},{type:"AbilityFunction",properties:{function:Tu}},{type:"AbilitySmallName",properties:{smallName:"DDG"}},{type:"AbilityStaminaCost",properties:{amount:2}}]},Hr={name:"AbilitySpearThrust",inherit:["Ability"],components:[{type:"Description",properties:{name:"Spear Thrust",description:"exhausts 5,6 to do a slow attack on a 2x1 1 dmg"}},{type:"AbilityFunction",properties:{function:zu}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"STH"}},{type:"AbilityTarget",properties:{coords:[[0,0],[0,-1]]}},{type:"AbilityAllowedDie",properties:{allowed:[5,6]}},{type:"AbilityRange",properties:{range:2}}]},qr={name:"AbilitySwordJab",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Jab",description:"exhausts a 4,5,6 to do a slow attack on a single tile for 1 dmg"}},{type:"AbilityFunction",properties:{function:Mu}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SJB"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[4,5,6]}},{type:"AbilityEndsTurn"}]},$r={name:"AbilitySwordSwing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Swing",description:"exhausts 6 to do a slow attack on a T shape for 1 dmg"}},{type:"AbilityFunction",properties:{function:Iu}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SSW"}},{type:"AbilityTarget",properties:{coords:[[-1,0],[0,0],[1,0],[0,-1]]}},{type:"AbilityAllowedDie",properties:{allowed:[6]}},{type:"AbilityEndsTurn"}]},Gr={name:"AbilityDoubleAxeSwing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Double Axe Swing",description:"swings both your axes in two massive arcs dealing 2 dmg"}},{type:"AbilityFunction",properties:{function:Uu}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"DAS"}},{type:"AbilityTarget",properties:{coords:[[-1,0],[0,0],[1,0],[-1,1],[1,1]]}},{type:"AbilityAllowedDie",properties:{allowed:[5,6]}},{type:"AbilityStaminaCost",properties:{amount:3}},{type:"AbilityDamage",properties:{dmg:2}},{type:"AbilityEndsTurn"}]},Kr={name:"AbilityAxeDecapitate",inherit:["Ability"],components:[{type:"Description",properties:{name:"Axe Decapitate",description:"Swings an axe directly at the targets head for 3 dmg"}},{type:"AbilityFunction",properties:{function:Lu}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"DAC"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[6]}},{type:"AbilityStaminaCost",properties:{amount:4}},{type:"AbilityDamage",properties:{dmg:3}},{type:"AbilityEndsTurn"}]},Qr=new _u,Vr=Qr.createWorld();console.log("got here first"),Qr.registerComponent(rr),Qr.registerComponent(fr),Qr.registerComponent(or),Qr.registerComponent(cr),Qr.registerComponent(ir),Qr.registerComponent(Cr),Qr.registerComponent(yr),Qr.registerComponent(vr),Qr.registerComponent(dr),Qr.registerComponent(gr),Qr.registerComponent(sr),Qr.registerComponent(ar),Qr.registerComponent(hr),Qr.registerComponent(pr),Qr.registerComponent(_r),Qr.registerComponent(Ar),Qr.registerComponent(Er),Qr.registerComponent(Dr),Qr.registerComponent(mr),Qr.registerComponent(Br),Qr.registerComponent(wr),Qr.registerComponent(xr),Qr.registerComponent(kr),Qr.registerComponent(Sr),Qr.registerComponent(br),Qr.registerComponent(Fr),Qr.registerComponent(lr),Qr.registerComponent(Or),Qr.registerComponent(jr),Qr.registerComponent(Pr),Qr.registerPrefab(Rr),Qr.registerPrefab(Tr),Qr.registerPrefab(Ir),Qr.registerPrefab(zr),Qr.registerPrefab(Ur),Qr.registerPrefab(Lr),Qr.registerPrefab(Wr),Qr.registerPrefab(Nr),Qr.registerPrefab(Mr),Qr.registerPrefab(Xr),Qr.registerPrefab(Yr),Qr.registerPrefab(Hr),Qr.registerPrefab(qr),Qr.registerPrefab($r),Qr.registerPrefab(Gr),Qr.registerPrefab(Kr),ui();var Zr=Vr,Jr=function(){kn.style.visibility="visible";var t="#".repeat(Bn.width);Sn.drawText(0,0,t)},to=function(t){var e="";return e+="\n"+t.description.name,e+="\n"+t.description.description,e+="\n"+t.abilityPhase.phase,e+="\n"+t.abilityPhase.speed};function eo(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var n=[],u=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(u=(i=a.next()).done)&&(n.push(i.value),!e||n.length!==e);u=!0);}catch(t){r=!0,o=t}finally{try{u||null==a.return||a.return()}finally{if(r)throw o}}return n}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return no(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return no(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function no(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}var uo=Zr.createQuery({all:[ar,rr,dr]}),ro=Zr.createQuery({all:[ar,rr,gr]}),oo=Zr.createQuery({all:[ar,_r]}),io=Zr.createQuery({all:[ar,Ar]}),ao=Zr.createQuery({all:[ar,rr,gr,vr],none:[Cr]}),co="",so=["q","w","e","r","t","y"],lo=function(t,e,n){wn.drawText(e,n,t)},fo=function(t,e,n){wn.draw(e,n,t.appearance.char,t.appearance.color,t.appearance.background||"black")},ho=function(){var t;"Help"==xo?function(){Jr();Sn.drawText(2,5,"Welcome to my bad game, this is just placeholder help text for now\n\nEnemy attacks at end of player defend turn\nyou need to use dodge to get out of red attacks\nYou regen 4 stamina - the amount used this turn\nplayer attacks resolve at end of player attack turn\n\nHOTKEYS:\nArrow Keys to move\nEnter to end turn / confirm target\nn: select next character\n1-6 are to select stamina die\nqwerty selects abilites\nshift+qwerty for info\nz: shows enemy numbers\nc: shows dmg that will hit tile\nEscape to exit this and most menus")}():"AbilityInfo"==xo?function(t){Jr();var e=to(t);Sn.drawText(2,5,e)}(co):"EnemyNumbers"==xo?(t=1,ao.get().forEach((function(e){wn.draw(An.x+e.position.x,An.y+e.position.y,t.toString()),t++}))):"DamageShow"==xo?function(){var t=[];t.push.apply(t,oo.get()),t.push.apply(t,io.get()),console.log(t);var e,n=[];t.forEach((function(t){var e=xu({x:t.position.x,y:t.position.y});n[e]||(n[e]=0),n[e]+=t.dmgTile.dmg})),console.log(n);for(var u=0,r=Object.entries(n);u<r.length;u++){var o=eo(r[u],2),i=o[0],a=o[1];console.log("".concat(i,": ").concat(a));var c=(e=void 0,"string"==typeof(e=i)&&(e=ku(e)),e);wn.draw(An.x+c.x,An.y+c.y,a)}}():(wn.clear(),uo.get().forEach((function(t){fo(t,t.position.x+An.x,t.position.y+An.y)})),ro.get().forEach((function(t){fo(t,t.position.x+An.x,t.position.y+An.y)})),function(){if(To){lo("Active:",En.x,En.y),fo(To,En.x+"Active:".length,En.y),lo("Hp:"+To.health.current.toString(),En.x,En.y+1),lo("Stam:"+To.stamina.current.toString()+"/"+To.stamina.max.toString(),En.x,En.y+2),lo("StamRgn:"+Math.max(0,4-To.stamina.used).toString(),En.x,En.y+3),lo("Move:"+To.movement.movement.toString(),En.x,En.y+4),lo("Dodge:"+To.movement.dodge.toString(),En.x,En.y+5)}}(),function(){if(To)for(var t=0;t<To.die.length;t++){var e="white";To.die[t].selected?e="green":To.die[t].exhausted&&(e="grey"),lo((t+1).toString()+"| |",mn.x+5*t,mn.y),wn.draw(2+mn.x+5*t,mn.y,To.die[t].number.toString(),"black",e)}}(),function(){for(var t=0;t<To.abilityList.abilities.length;t++){var e="gray",n="PlayerTurnDefend"==xo?"Defend":"Attack";("Any"==To.abilityList.abilities[t].abilityPhase.phase||To.abilityList.abilities[t].abilityPhase.phase==n)&&To.abilityList.abilities[t].abilityFunction.function.canUse(To.abilityList.abilities[t],To).length>0&&(e="white");var u=To.abilityList.abilities[t].abilitySmallName.smallName;lo(so[t]+"[%c{"+e+"}"+u+"%c{}]",bn.x+7*t,bn.y)}}(),lo(xo,Fn.x,Fn.y),wn.draw(0,0,"O"),wn.draw(0,_n-1,"O"),wn.draw(gn-1,0,"O"),wn.draw(gn-1,_n-1,"O"),function(){var t=1;ao.get().forEach((function(e){var n=""+t;n+="%c{"+e.appearance.color+"} "+e.description.name+" "+e.health.current,lo(n,Cn.x,Cn.y+t-1),t++}))}(),oo.get().forEach((function(t){var e,n=bu("entitiesAtLocation",xu({x:t.position.x,y:t.position.y})),u=!1;n.forEach((function(n){var r=Zr.getEntity(n);r.has(gr)?(u=!0,wn.draw(t.position.x+An.x,t.position.y+An.y,r.appearance.char,r.appearance.color,"yellow")):r.has(dr)&&(e=r),!u&&e&&wn.draw(t.position.x+An.x,t.position.y+An.y,e.appearance.char,e.appearance.color,"yellow")}))})),io.get().forEach((function(t){var e,n=bu("entitiesAtLocation",xu({x:t.position.x,y:t.position.y})),u=!1;n.forEach((function(n){var r=Zr.getEntity(n);r.has(gr)?(u=!0,wn.draw(t.position.x+An.x,t.position.y+An.y,r.appearance.char,r.appearance.color,"red")):r.has(dr)&&(e=r),!u&&e&&wn.draw(t.position.x+An.x,t.position.y+An.y,e.appearance.char,e.appearance.color,"red")}))})),console.log(xo),"examine"!==xo&&"targeting"!==xo||(console.log("need to show target"),console.log(Ro),fo(Ro,Ro.position.x+An.x,Ro.position.y+An.y)))},po=Zr.createQuery({all:[ar,rr,dr]}),Do=new Je.Arena(An.width,An.height),yo=function(){var t=vo();return Object(Au.sample)(t)},vo=function(){var t=[];return po.get().forEach((function(e){e.isBlocking||1==bu("entitiesAtLocation",xu({x:e.position.x,y:e.position.y})).size&&t.push(e)})),t};function go(t){return function(t){if(Array.isArray(t))return t}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return _o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _o(t,e)}(t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,u=new Array(e);n<e;n++)u[n]=t[n];return u}var Ao=Zr.createQuery({all:[ar,rr,gr],none:[vr]}),Co=function(t,e){return new dn.Dijkstra(t,e,Fo,{topology:4})},Eo=function(t){var e=Co(t.position.x,t.position.y);console.log("path finder"),console.log(e);var n=mo(e,t);return console.log(n),n.pop(),n},mo=function(t,e){var n;return e.has(vr)&&(console.log("enemies to check: "+Ao.get().length),Ao.get().forEach((function(e){var u=[];t.compute(e.position.x,e.position.y,(function(t,e){u.push([t,e])})),(!n||u.length<n.length)&&(n=u)}))),n},bo=function(t,e){var n=go(t).slice(0);if(console.log("in range check"),1==n.length)return console.log("path short"),!0;var u=[],r=[];return n.forEach((function(t){u.push(t[0]),r.push(t[1])})),console.log(u.toString()),console.log(r.toString()),e.x==n[0][0]||e.y==n[0][1]},Fo=function(t,e){var n=bu("entitiesAtLocation",xu({x:t,y:e}));return n?(n.forEach((function(t){if(Zr.getEntity(t).has(ir))return 0})),1):0},Bo=function(t,e){var n=!1;e.shuffle(),console.log("Doing mob attack: ");for(var u=0;u<2;u++){var r=Eo(t);e.forEach((function(e){if(console.log(r.toString()),console.log(r.length),r.length>=1&&r.length<=e.abilityRange.range&&!n&&bo(r,{x:t.position.x,y:t.position.y})){console.log("In Range");var u=r.pop();console.log(u.toString()),e.abilityFunction.function.onUse(e,t,{x:u[0],y:u[1]}),t.fireEvent("use-stamina",e.abilityStaminaCost.amount),t.fireEvent("ai-use-stamina",e.abilityStaminaCost.amount),n=!0}})),r.length>1&&!n&&(console.log("Not In Range so we move"),r.length>1&&(wo(t,r),t.fireEvent("use-stamina",1),t.fireEvent("ai-use-stamina",1)))}},wo=function(t,e){t.fireEvent("gain-movement",2);for(var n=t.movement.movement,u=0;u<n;u++)if(e&&e.length>1){console.log("remaining target"),console.log(e.toString());var r=e.pop();console.log("Next Step"+r.toString()),t.movement.x=r[0]-t.position.x,t.movement.y=r[1]-t.position.y,t.fireEvent("attempt-move")}};Object.defineProperty(Array.prototype,"shuffle",{value:function(){for(var t=this.length-1;t>0;t--){var e=Math.floor(Math.random()*(t+1)),n=[this[e],this[t]];this[t]=n[0],this[e]=n[1]}return this}});var xo="setup",ko="",So="hi",Oo="hi",jo=function(t){So=t},Po=function(t){Oo=t},Ro=Zr.createEntity("targetEntity");Ro.add(rr,{char:"X",color:"black",background:"green"});var To,Mo=0,Io=null,zo=Zr.createQuery({all:[ar,rr,gr,yr],none:[Cr]}),Uo=Zr.createQuery({all:[ar,rr,gr],none:[vr]}),Lo=Zr.createQuery({all:[ar,rr,gr,vr],none:[Cr]}),Wo=Zr.createQuery({all:[Er]}),No=function(){if("PlayerTurnDefend"==xo||"PlayerTurnAttack"==xo)if("?"===Io)qo("Help"),ho();else if("n"===Io)console.log("input: "+Io),To=Vo(),ho();else if("1"===Io||"2"===Io||"3"===Io||"4"===Io||"5"===Io||"6"===Io||"7"===Io||"8"===Io||"9"===Io)console.log("dice swap"),Io-1<To.die.length&&(console.log(To.die[Io-1]),To.die[Io-1].exhausted||(To.die[Io-1].selected=!To.die[Io-1].selected),ho());else if("ArrowUp"===Io)Ko();else if("ArrowRight"===Io)Ko();else if("ArrowDown"===Io)Ko();else if("ArrowLeft"===Io)Ko();else if("q"===Io||"w"===Io||"e"===Io||"r"===Io||"t"===Io||"y"===Io){if(console.log("ability use"),(u=Xo(Io))<To.abilityList.abilities.length){var t=To.abilityList.abilities[u],e=t.abilityFunction.function.canUse(t,To),n="PlayerTurnDefend"==xo?"Defend":"Attack";e.length>0&&("Any"==t.abilityPhase.phase||t.abilityPhase.phase==n)&&(t.abilityFunction.function.onTarget?t.abilityFunction.function.onTarget(t,To):t.abilityFunction.function.onUse(t,To,Yo()))}ho()}else if("Q"===Io||"W"===Io||"E"===Io||"R"===Io||"T"===Io||"Y"===Io){console.log("ability info");var u=Xo(Io);qo("AbilityInfo"),console.log(u),console.log(To.abilityList.abilities[u]),r=To.abilityList.abilities[u],co=r,ho()}else"Enter"==Io?(console.log("Enter"),"PlayerTurnDefend"==xo?(ti(),xo="PlayerTurnAttack"):"PlayerTurnAttack"==xo&&(ei(),ni(Uo.get()),xo="EnemyTurnDefend"),ho()):"x"===Io?(Ho("examine"),ho()):"c"===Io?(qo("DamageShow"),ho()):"z"===Io?(qo("EnemyNumbers"),ho()):"p"===Io&&console.log(To);else"examine"===xo||"targeting"===xo?"Escape"===Io?($o(),ho()):"ArrowUp"===Io||"ArrowRight"===Io||"ArrowDown"===Io||"ArrowLeft"===Io?(Qo(),ho()):"Enter"===Io&&"targeting"===xo&&(console.log(So),So.abilityFunction.function.onUse(So,Oo,Yo()),$o(),ho()):"Help"!==xo&&"AbilityInfo"!=xo&&"DamageShow"!=xo&&"EnemyNumbers"!=xo||"Escape"===Io&&(Sn.clear(),kn.style.visibility="hidden",Go(),ho());var r;Io=null},Xo=function(t){switch(Io){case"q":case"Q":return 0;case"w":case"W":return 1;case"e":case"E":return 2;case"r":case"R":return 3;case"t":case"T":return 4;case"y":case"Y":return 5;default:return 0}},Yo=function(){return Ro.has(ar)?{x:Ro.position.x,y:Ro.position.y}:{x:0,y:0}},Ho=function(t){qo(t),Ro.add(ar,{x:To.position.x,y:To.position.y})},qo=function(t){ko=xo,xo=t},$o=function(){Go(),Ro.remove(Ro.position)},Go=function(){xo=ko},Ko=function(){"ArrowUp"===Io&&(To.movement.y=-1),"ArrowRight"===Io&&(To.movement.x=1),"ArrowDown"===Io&&(To.movement.y=1),"ArrowLeft"===Io&&(To.movement.x=-1),To.fireEvent("attempt-move"),ho()},Qo=function(){"ArrowUp"===Io?(Ro.position.y=To.position.y+-1,Ro.position.x=To.position.x):"ArrowRight"===Io?(Ro.position.x=To.position.x+1,Ro.position.y=To.position.y):"ArrowDown"===Io?(Ro.position.y=To.position.y+1,Ro.position.x=To.position.x):"ArrowLeft"===Io&&(Ro.position.x=To.position.x+-1,Ro.position.y=To.position.y)},Vo=function(){return Mo+1>=zo.get().length?Mo=0:Mo++,zo.get()[Mo]};document.addEventListener("keydown",(function(t){Io=t.key}));var Zo=function(){var t=Zr.createPrefab("PlayerBeing",{appearance:{char:"@",color:"green"}}),e=yo();t.add(ar,{x:e.position.x,y:e.position.y}),To=t;var n=Zr.createPrefab("PlayerBeing",{appearance:{char:"@",color:"purple"}});e=yo(),n.add(ar,{x:e.position.x,y:e.position.y}),Object(Au.times)(6,(function(){e=yo(),Zr.createPrefab("Goblin").add(ar,{x:e.position.x,y:e.position.y})})),e=yo(),Zr.createPrefab("Orc Warrior").add(ar,{x:e.position.x,y:e.position.y})},Jo=function(){console.log("enemy attacks"),Lo.get().forEach((function(t){var e,n,u;n=[],u=(e=t).stamina.current,console.log("AI usable stamina"),console.log(e),console.log(u),e.abilityList.abilities.forEach((function(t){("Any"==t.abilityPhase.phase||"Attack"==t.abilityPhase.phase)&&t.abilityStaminaCost.amount<=e.stamina.current&&n.push(t)})),console.log("ai usable abilities"),console.log(n),Bo(e,n),console.log("pathfinding")}))},ti=function(){ei()},ei=function(){console.log("process dmg"),console.log(Wo.get());var t=[];Wo.get().forEach((function(e){bu("entitiesAtLocation",xu({x:e.position.x,y:e.position.y})).forEach((function(t){var n=Zr.getEntity(t);console.log(n),n.layerUnit&&n.fireEvent("take-damage",{amount:e.dmgTile.dmg})})),t.push(e)})),t.forEach((function(t){t.destroy()})),console.log(Wo.get()),console.log("end process dmg")},ni=function(t){console.log("ending turn for "),t.forEach((function(t){console.log(t),t.fireEvent("turn-end",t)}))},ui=function(){Do.create((function(t,e,n){n?Zr.createPrefab("Wall").add(ar,{x:t,y:e}):Zr.createPrefab("Floor").add(ar,{x:t,y:e})})),Zo(),yo(),ho()};requestAnimationFrame((function t(){"setup"==xo?xo="EnemyTurnDefend":"EnemyTurnDefend"==xo?(xo="EnemyTurnAttack",ho()):"EnemyTurnAttack"==xo?(Jo(),ni(Lo.get()),xo="PlayerTurnDefend",ho()):"PlayerTurnDefend"==xo||"PlayerTurnAttack"==xo?No():"examine"!=xo&&"targeting"!=xo&&"Help"!=xo&&"AbilityInfo"!=xo&&"DamageShow"!=xo&&"EnemyNumbers"!=xo||No(),requestAnimationFrame(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,