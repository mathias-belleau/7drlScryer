!function(t){var e={};function u(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,u),r.l=!0,r.exports}u.m=t,u.c=e,u.d=function(t,e,n){u.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},u.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},u.t=function(t,e){if(1&e&&(t=u(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(u.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)u.d(n,r,function(e){return t[e]}.bind(null,r));return n},u.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return u.d(e,"a",e),e},u.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},u.p="",u(u.s=10)}([function(t,e,u){"use strict";function n(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var r=2.3283064365386963e-10,o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}var e,u,o;return e=t,(u=[{key:"getSeed",value:function(){return this._seed}},{key:"setSeed",value:function(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*r,t=69069*t+1>>>0,this._s1=t*r,t=69069*t+1>>>0,this._s2=t*r,this._c=1,this}},{key:"getUniform",value:function(){var t=2091639*this._s0+this._c*r;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}},{key:"getUniformInt",value:function(t,e){var u=Math.max(t,e),n=Math.min(t,e);return Math.floor(this.getUniform()*(u-n+1))+n}},{key:"getNormal",value:function(){var t,e,u,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;do{u=(t=2*this.getUniform()-1)*t+(e=2*this.getUniform()-1)*e}while(u>1||0==u);var o=t*Math.sqrt(-2*Math.log(u)/u);return n+o*r}},{key:"getPercentage",value:function(){return 1+Math.floor(100*this.getUniform())}},{key:"getItem",value:function(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}},{key:"shuffle",value:function(t){for(var e=[],u=t.slice();u.length;){var n=u.indexOf(this.getItem(u));e.push(u.splice(n,1)[0])}return e}},{key:"getWeightedValue",value:function(t){var e=0;for(var u in t)e+=t[u];var n,r=this.getUniform()*e,o=0;for(n in t)if(r<(o+=t[n]))return n;return n}},{key:"getState",value:function(){return[this._s0,this._s1,this._s2,this._c]}},{key:"setState",value:function(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}},{key:"clone",value:function(){var e=new t;return e.setState(this.getState())}}])&&n(e.prototype,u),o&&n(e,o),t}();e.a=(new o).setSeed(Date.now())},function(t,e,u){"use strict";function n(t,e){return(t%e+e)%e}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return t<e?e:t>u?u:t}function o(t){return t.charAt(0).toUpperCase()+t.substring(1)}function i(t){for(var e=arguments.length,u=new Array(e>1?e-1:0),n=1;n<e;n++)u[n-1]=arguments[n];var r=i.map,a=function(e,n,i,a){if("%"==t.charAt(a-1))return e.substring(1);if(!u.length)return e;var c=u[0],s=(n||i).split(","),f=s.shift()||"",l=r[f.toLowerCase()];if(!l)return e;var h=(c=u.shift())[l].apply(c,s),p=f.charAt(0);return p!=p.toLowerCase()&&(h=o(h)),h};return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,a)}u.r(e),u.d(e,"mod",(function(){return n})),u.d(e,"clamp",(function(){return r})),u.d(e,"capitalize",(function(){return o})),u.d(e,"format",(function(){return i})),i.map={s:"toString"}},function(t,e,u){"use strict";u.r(e),u.d(e,"fromString",(function(){return o})),u.d(e,"add",(function(){return i})),u.d(e,"add_",(function(){return a})),u.d(e,"multiply",(function(){return c})),u.d(e,"multiply_",(function(){return s})),u.d(e,"interpolate",(function(){return f})),u.d(e,"lerp",(function(){return l})),u.d(e,"interpolateHSL",(function(){return h})),u.d(e,"lerpHSL",(function(){return p})),u.d(e,"randomize",(function(){return D})),u.d(e,"rgb2hsl",(function(){return v})),u.d(e,"hsl2rgb",(function(){return d})),u.d(e,"toRGB",(function(){return _})),u.d(e,"toHex",(function(){return g}));var n=u(1),r=u(0);function o(t){var e,u;if(t in C)e=C[t];else{if("#"==t.charAt(0)){var n=(t.match(/[0-9a-f]/gi)||[]).map((function(t){return parseInt(t,16)}));if(3==n.length)e=n.map((function(t){return 17*t}));else{for(var r=0;r<3;r++)n[r+1]+=16*n[r],n.splice(r,1);e=n}}else e=(u=t.match(/rgb\(([0-9, ]+)\)/i))?u[1].split(/\s*,\s*/).map((function(t){return parseInt(t)})):[0,0,0];C[t]=e}return e.slice()}function i(t){for(var e=t.slice(),u=arguments.length,n=new Array(u>1?u-1:0),r=1;r<u;r++)n[r-1]=arguments[r];for(var o=0;o<3;o++)for(var i=0;i<n.length;i++)e[o]+=n[i][o];return e}function a(t){for(var e=arguments.length,u=new Array(e>1?e-1:0),n=1;n<e;n++)u[n-1]=arguments[n];for(var r=0;r<3;r++)for(var o=0;o<u.length;o++)t[r]+=u[o][r];return t}function c(t){for(var e=t.slice(),u=arguments.length,n=new Array(u>1?u-1:0),r=1;r<u;r++)n[r-1]=arguments[r];for(var o=0;o<3;o++){for(var i=0;i<n.length;i++)e[o]*=n[i][o]/255;e[o]=Math.round(e[o])}return e}function s(t){for(var e=arguments.length,u=new Array(e>1?e-1:0),n=1;n<e;n++)u[n-1]=arguments[n];for(var r=0;r<3;r++){for(var o=0;o<u.length;o++)t[r]*=u[o][r]/255;t[r]=Math.round(t[r])}return t}function f(t,e){for(var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,n=t.slice(),r=0;r<3;r++)n[r]=Math.round(n[r]+u*(e[r]-t[r]));return n}var l=f;function h(t,e){for(var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5,n=v(t),r=v(e),o=0;o<3;o++)n[o]+=u*(r[o]-n[o]);return d(n)}var p=h;function D(t,e){e instanceof Array||(e=Math.round(r.a.getNormal(0,e)));for(var u=t.slice(),n=0;n<3;n++)u[n]+=e instanceof Array?Math.round(r.a.getNormal(0,e[n])):e;return u}function v(t){var e,u=t[0]/255,n=t[1]/255,r=t[2]/255,o=Math.max(u,n,r),i=Math.min(u,n,r),a=0,c=(o+i)/2;if(o==i)e=0;else{var s=o-i;switch(e=c>.5?s/(2-o-i):s/(o+i),o){case u:a=(n-r)/s+(n<r?6:0);break;case n:a=(r-u)/s+2;break;case r:a=(u-n)/s+4}a/=6}return[a,e,c]}function y(t,e,u){return u<0&&(u+=1),u>1&&(u-=1),u<1/6?t+6*(e-t)*u:u<.5?e:u<2/3?t+(e-t)*(2/3-u)*6:t}function d(t){var e=t[2];if(0==t[1])return[e=Math.round(255*e),e,e];var u=t[1],n=e<.5?e*(1+u):e+u-e*u,r=2*e-n,o=y(r,n,t[0]+1/3),i=y(r,n,t[0]),a=y(r,n,t[0]-1/3);return[Math.round(255*o),Math.round(255*i),Math.round(255*a)]}function _(t){var e=t.map((function(t){return Object(n.clamp)(t,0,255)}));return"rgb(".concat(e.join(","),")")}function g(t){var e=t.map((function(t){return Object(n.clamp)(t,0,255).toString(16).padStart(2,"0")}));return"#".concat(e.join(""))}var C={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,u){"use strict";function n(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}u.d(e,"a",(function(){return r}));var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,u,r;return e=t,(u=[{key:"getContainer",value:function(){return null}},{key:"setOptions",value:function(t){this._options=t}}])&&n(e.prototype,u),r&&n(e,r),t}()},function(t,e,u){(function(t,n){var r;function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i="Expected a function",a="__lodash_placeholder__",c=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",f="[object Array]",l="[object Boolean]",h="[object Date]",p="[object Error]",D="[object Function]",v="[object GeneratorFunction]",y="[object Map]",d="[object Number]",_="[object Object]",g="[object RegExp]",C="[object Set]",A="[object String]",E="[object Symbol]",b="[object WeakMap]",m="[object ArrayBuffer]",F="[object DataView]",B="[object Float32Array]",w="[object Float64Array]",k="[object Int8Array]",x="[object Int16Array]",O="[object Int32Array]",S="[object Uint8Array]",j="[object Uint16Array]",P="[object Uint32Array]",R=/\b__p \+= '';/g,T=/\b(__p \+=) '' \+/g,M=/(__e\(.*?\)|\b__t\)) \+\n'';/g,I=/&(?:amp|lt|gt|quot|#39);/g,z=/[&<>"']/g,U=RegExp(I.source),L=RegExp(z.source),W=/<%-([\s\S]+?)%>/g,N=/<%([\s\S]+?)%>/g,X=/<%=([\s\S]+?)%>/g,Y=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,q=/^\w*$/,H=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,$=/[\\^$.*+?()[\]{}|]/g,G=RegExp($.source),K=/^\s+/,V=/\s/,Z=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Q=/\{\n\/\* \[wrapped with (.+)\] \*/,J=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/[()=,{}\[\]\/\s]/,ut=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,ot=/^[-+]0x[0-9a-f]+$/i,it=/^0b[01]+$/i,at=/^\[object .+?Constructor\]$/,ct=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,ft=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,lt=/($^)/,ht=/['\n\r\u2028\u2029\\]/g,pt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Dt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",vt="[\\ud800-\\udfff]",yt="["+Dt+"]",dt="["+pt+"]",_t="\\d+",gt="[\\u2700-\\u27bf]",Ct="[a-z\\xdf-\\xf6\\xf8-\\xff]",At="[^\\ud800-\\udfff"+Dt+_t+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Et="\\ud83c[\\udffb-\\udfff]",bt="[^\\ud800-\\udfff]",mt="(?:\\ud83c[\\udde6-\\uddff]){2}",Ft="[\\ud800-\\udbff][\\udc00-\\udfff]",Bt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",wt="(?:"+Ct+"|"+At+")",kt="(?:"+Bt+"|"+At+")",xt="(?:"+dt+"|"+Et+")"+"?",Ot="[\\ufe0e\\ufe0f]?"+xt+("(?:\\u200d(?:"+[bt,mt,Ft].join("|")+")[\\ufe0e\\ufe0f]?"+xt+")*"),St="(?:"+[gt,mt,Ft].join("|")+")"+Ot,jt="(?:"+[bt+dt+"?",dt,mt,Ft,vt].join("|")+")",Pt=RegExp("['’]","g"),Rt=RegExp(dt,"g"),Tt=RegExp(Et+"(?="+Et+")|"+jt+Ot,"g"),Mt=RegExp([Bt+"?"+Ct+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[yt,Bt,"$"].join("|")+")",kt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[yt,Bt+wt,"$"].join("|")+")",Bt+"?"+wt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Bt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",_t,St].join("|"),"g"),It=RegExp("[\\u200d\\ud800-\\udfff"+pt+"\\ufe0e\\ufe0f]"),zt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ut=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Lt=-1,Wt={};Wt[B]=Wt[w]=Wt[k]=Wt[x]=Wt[O]=Wt[S]=Wt["[object Uint8ClampedArray]"]=Wt[j]=Wt[P]=!0,Wt[s]=Wt[f]=Wt[m]=Wt[l]=Wt[F]=Wt[h]=Wt[p]=Wt[D]=Wt[y]=Wt[d]=Wt[_]=Wt[g]=Wt[C]=Wt[A]=Wt[b]=!1;var Nt={};Nt[s]=Nt[f]=Nt[m]=Nt[F]=Nt[l]=Nt[h]=Nt[B]=Nt[w]=Nt[k]=Nt[x]=Nt[O]=Nt[y]=Nt[d]=Nt[_]=Nt[g]=Nt[C]=Nt[A]=Nt[E]=Nt[S]=Nt["[object Uint8ClampedArray]"]=Nt[j]=Nt[P]=!0,Nt[p]=Nt[D]=Nt[b]=!1;var Xt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Yt=parseFloat,qt=parseInt,Ht="object"==(void 0===t?"undefined":o(t))&&t&&t.Object===Object&&t,$t="object"==("undefined"==typeof self?"undefined":o(self))&&self&&self.Object===Object&&self,Gt=Ht||$t||Function("return this")(),Kt="object"==o(e)&&e&&!e.nodeType&&e,Vt=Kt&&"object"==o(n)&&n&&!n.nodeType&&n,Zt=Vt&&Vt.exports===Kt,Qt=Zt&&Ht.process,Jt=function(){try{var t=Vt&&Vt.require&&Vt.require("util").types;return t||Qt&&Qt.binding&&Qt.binding("util")}catch(t){}}(),te=Jt&&Jt.isArrayBuffer,ee=Jt&&Jt.isDate,ue=Jt&&Jt.isMap,ne=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,oe=Jt&&Jt.isTypedArray;function ie(t,e,u){switch(u.length){case 0:return t.call(e);case 1:return t.call(e,u[0]);case 2:return t.call(e,u[0],u[1]);case 3:return t.call(e,u[0],u[1],u[2])}return t.apply(e,u)}function ae(t,e,u,n){for(var r=-1,o=null==t?0:t.length;++r<o;){var i=t[r];e(n,i,u(i),t)}return n}function ce(t,e){for(var u=-1,n=null==t?0:t.length;++u<n&&!1!==e(t[u],u,t););return t}function se(t,e){for(var u=null==t?0:t.length;u--&&!1!==e(t[u],u,t););return t}function fe(t,e){for(var u=-1,n=null==t?0:t.length;++u<n;)if(!e(t[u],u,t))return!1;return!0}function le(t,e){for(var u=-1,n=null==t?0:t.length,r=0,o=[];++u<n;){var i=t[u];e(i,u,t)&&(o[r++]=i)}return o}function he(t,e){return!!(null==t?0:t.length)&&Ee(t,e,0)>-1}function pe(t,e,u){for(var n=-1,r=null==t?0:t.length;++n<r;)if(u(e,t[n]))return!0;return!1}function De(t,e){for(var u=-1,n=null==t?0:t.length,r=Array(n);++u<n;)r[u]=e(t[u],u,t);return r}function ve(t,e){for(var u=-1,n=e.length,r=t.length;++u<n;)t[r+u]=e[u];return t}function ye(t,e,u,n){var r=-1,o=null==t?0:t.length;for(n&&o&&(u=t[++r]);++r<o;)u=e(u,t[r],r,t);return u}function de(t,e,u,n){var r=null==t?0:t.length;for(n&&r&&(u=t[--r]);r--;)u=e(u,t[r],r,t);return u}function _e(t,e){for(var u=-1,n=null==t?0:t.length;++u<n;)if(e(t[u],u,t))return!0;return!1}var ge=Be("length");function Ce(t,e,u){var n;return u(t,(function(t,u,r){if(e(t,u,r))return n=u,!1})),n}function Ae(t,e,u,n){for(var r=t.length,o=u+(n?1:-1);n?o--:++o<r;)if(e(t[o],o,t))return o;return-1}function Ee(t,e,u){return e==e?function(t,e,u){var n=u-1,r=t.length;for(;++n<r;)if(t[n]===e)return n;return-1}(t,e,u):Ae(t,me,u)}function be(t,e,u,n){for(var r=u-1,o=t.length;++r<o;)if(n(t[r],e))return r;return-1}function me(t){return t!=t}function Fe(t,e){var u=null==t?0:t.length;return u?xe(t,e)/u:NaN}function Be(t){return function(e){return null==e?void 0:e[t]}}function we(t){return function(e){return null==t?void 0:t[e]}}function ke(t,e,u,n,r){return r(t,(function(t,r,o){u=n?(n=!1,t):e(u,t,r,o)})),u}function xe(t,e){for(var u,n=-1,r=t.length;++n<r;){var o=e(t[n]);void 0!==o&&(u=void 0===u?o:u+o)}return u}function Oe(t,e){for(var u=-1,n=Array(t);++u<t;)n[u]=e(u);return n}function Se(t){return t?t.slice(0,Ke(t)+1).replace(K,""):t}function je(t){return function(e){return t(e)}}function Pe(t,e){return De(e,(function(e){return t[e]}))}function Re(t,e){return t.has(e)}function Te(t,e){for(var u=-1,n=t.length;++u<n&&Ee(e,t[u],0)>-1;);return u}function Me(t,e){for(var u=t.length;u--&&Ee(e,t[u],0)>-1;);return u}function Ie(t,e){for(var u=t.length,n=0;u--;)t[u]===e&&++n;return n}var ze=we({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ue=we({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Le(t){return"\\"+Xt[t]}function We(t){return It.test(t)}function Ne(t){var e=-1,u=Array(t.size);return t.forEach((function(t,n){u[++e]=[n,t]})),u}function Xe(t,e){return function(u){return t(e(u))}}function Ye(t,e){for(var u=-1,n=t.length,r=0,o=[];++u<n;){var i=t[u];i!==e&&i!==a||(t[u]=a,o[r++]=u)}return o}function qe(t){var e=-1,u=Array(t.size);return t.forEach((function(t){u[++e]=t})),u}function He(t){var e=-1,u=Array(t.size);return t.forEach((function(t){u[++e]=[t,t]})),u}function $e(t){return We(t)?function(t){var e=Tt.lastIndex=0;for(;Tt.test(t);)++e;return e}(t):ge(t)}function Ge(t){return We(t)?function(t){return t.match(Tt)||[]}(t):function(t){return t.split("")}(t)}function Ke(t){for(var e=t.length;e--&&V.test(t.charAt(e)););return e}var Ve=we({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ze=function t(e){var u,n=(e=null==e?Gt:Ze.defaults(Gt.Object(),e,Ze.pick(Gt,Ut))).Array,r=e.Date,V=e.Error,pt=e.Function,Dt=e.Math,vt=e.Object,yt=e.RegExp,dt=e.String,_t=e.TypeError,gt=n.prototype,Ct=pt.prototype,At=vt.prototype,Et=e["__core-js_shared__"],bt=Ct.toString,mt=At.hasOwnProperty,Ft=0,Bt=(u=/[^.]+$/.exec(Et&&Et.keys&&Et.keys.IE_PROTO||""))?"Symbol(src)_1."+u:"",wt=At.toString,kt=bt.call(vt),xt=Gt._,Ot=yt("^"+bt.call(mt).replace($,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),St=Zt?e.Buffer:void 0,jt=e.Symbol,Tt=e.Uint8Array,It=St?St.allocUnsafe:void 0,Xt=Xe(vt.getPrototypeOf,vt),Ht=vt.create,$t=At.propertyIsEnumerable,Kt=gt.splice,Vt=jt?jt.isConcatSpreadable:void 0,Qt=jt?jt.iterator:void 0,Jt=jt?jt.toStringTag:void 0,ge=function(){try{var t=eo(vt,"defineProperty");return t({},"",{}),t}catch(t){}}(),we=e.clearTimeout!==Gt.clearTimeout&&e.clearTimeout,Qe=r&&r.now!==Gt.Date.now&&r.now,Je=e.setTimeout!==Gt.setTimeout&&e.setTimeout,tu=Dt.ceil,eu=Dt.floor,uu=vt.getOwnPropertySymbols,nu=St?St.isBuffer:void 0,ru=e.isFinite,ou=gt.join,iu=Xe(vt.keys,vt),au=Dt.max,cu=Dt.min,su=r.now,fu=e.parseInt,lu=Dt.random,hu=gt.reverse,pu=eo(e,"DataView"),Du=eo(e,"Map"),vu=eo(e,"Promise"),yu=eo(e,"Set"),du=eo(e,"WeakMap"),_u=eo(vt,"create"),gu=du&&new du,Cu={},Au=xo(pu),Eu=xo(Du),bu=xo(vu),mu=xo(yu),Fu=xo(du),Bu=jt?jt.prototype:void 0,wu=Bu?Bu.valueOf:void 0,ku=Bu?Bu.toString:void 0;function xu(t){if(Hi(t)&&!Ti(t)&&!(t instanceof Pu)){if(t instanceof ju)return t;if(mt.call(t,"__wrapped__"))return Oo(t)}return new ju(t)}var Ou=function(){function t(){}return function(e){if(!qi(e))return{};if(Ht)return Ht(e);t.prototype=e;var u=new t;return t.prototype=void 0,u}}();function Su(){}function ju(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pu(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Ru(t){var e=-1,u=null==t?0:t.length;for(this.clear();++e<u;){var n=t[e];this.set(n[0],n[1])}}function Tu(t){var e=-1,u=null==t?0:t.length;for(this.clear();++e<u;){var n=t[e];this.set(n[0],n[1])}}function Mu(t){var e=-1,u=null==t?0:t.length;for(this.clear();++e<u;){var n=t[e];this.set(n[0],n[1])}}function Iu(t){var e=-1,u=null==t?0:t.length;for(this.__data__=new Mu;++e<u;)this.add(t[e])}function zu(t){var e=this.__data__=new Tu(t);this.size=e.size}function Uu(t,e){var u=Ti(t),n=!u&&Ri(t),r=!u&&!n&&Ui(t),o=!u&&!n&&!r&&ta(t),i=u||n||r||o,a=i?Oe(t.length,dt):[],c=a.length;for(var s in t)!e&&!mt.call(t,s)||i&&("length"==s||r&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||co(s,c))||a.push(s);return a}function Lu(t){var e=t.length;return e?t[zn(0,e-1)]:void 0}function Wu(t,e){return Bo(gr(t),Vu(e,0,t.length))}function Nu(t){return Bo(gr(t))}function Xu(t,e,u){(void 0!==u&&!Si(t[e],u)||void 0===u&&!(e in t))&&Gu(t,e,u)}function Yu(t,e,u){var n=t[e];mt.call(t,e)&&Si(n,u)&&(void 0!==u||e in t)||Gu(t,e,u)}function qu(t,e){for(var u=t.length;u--;)if(Si(t[u][0],e))return u;return-1}function Hu(t,e,u,n){return en(t,(function(t,r,o){e(n,t,u(t),o)})),n}function $u(t,e){return t&&Cr(e,Ea(e),t)}function Gu(t,e,u){"__proto__"==e&&ge?ge(t,e,{configurable:!0,enumerable:!0,value:u,writable:!0}):t[e]=u}function Ku(t,e){for(var u=-1,r=e.length,o=n(r),i=null==t;++u<r;)o[u]=i?void 0:da(t,e[u]);return o}function Vu(t,e,u){return t==t&&(void 0!==u&&(t=t<=u?t:u),void 0!==e&&(t=t>=e?t:e)),t}function Zu(t,e,u,n,r,o){var i,a=1&e,c=2&e,f=4&e;if(u&&(i=r?u(t,n,r,o):u(t)),void 0!==i)return i;if(!qi(t))return t;var p=Ti(t);if(p){if(i=function(t){var e=t.length,u=new t.constructor(e);e&&"string"==typeof t[0]&&mt.call(t,"index")&&(u.index=t.index,u.input=t.input);return u}(t),!a)return gr(t,i)}else{var b=ro(t),R=b==D||b==v;if(Ui(t))return pr(t,a);if(b==_||b==s||R&&!r){if(i=c||R?{}:io(t),!a)return c?function(t,e){return Cr(t,no(t),e)}(t,function(t,e){return t&&Cr(e,ba(e),t)}(i,t)):function(t,e){return Cr(t,uo(t),e)}(t,$u(i,t))}else{if(!Nt[b])return r?t:{};i=function(t,e,u){var n=t.constructor;switch(e){case m:return Dr(t);case l:case h:return new n(+t);case F:return function(t,e){var u=e?Dr(t.buffer):t.buffer;return new t.constructor(u,t.byteOffset,t.byteLength)}(t,u);case B:case w:case k:case x:case O:case S:case"[object Uint8ClampedArray]":case j:case P:return vr(t,u);case y:return new n;case d:case A:return new n(t);case g:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case C:return new n;case E:return r=t,wu?vt(wu.call(r)):{}}var r}(t,b,a)}}o||(o=new zu);var T=o.get(t);if(T)return T;o.set(t,i),Zi(t)?t.forEach((function(n){i.add(Zu(n,e,u,n,t,o))})):$i(t)&&t.forEach((function(n,r){i.set(r,Zu(n,e,u,r,t,o))}));var M=p?void 0:(f?c?Gr:$r:c?ba:Ea)(t);return ce(M||t,(function(n,r){M&&(n=t[r=n]),Yu(i,r,Zu(n,e,u,r,t,o))})),i}function Qu(t,e,u){var n=u.length;if(null==t)return!n;for(t=vt(t);n--;){var r=u[n],o=e[r],i=t[r];if(void 0===i&&!(r in t)||!o(i))return!1}return!0}function Ju(t,e,u){if("function"!=typeof t)throw new _t(i);return Eo((function(){t.apply(void 0,u)}),e)}function tn(t,e,u,n){var r=-1,o=he,i=!0,a=t.length,c=[],s=e.length;if(!a)return c;u&&(e=De(e,je(u))),n?(o=pe,i=!1):e.length>=200&&(o=Re,i=!1,e=new Iu(e));t:for(;++r<a;){var f=t[r],l=null==u?f:u(f);if(f=n||0!==f?f:0,i&&l==l){for(var h=s;h--;)if(e[h]===l)continue t;c.push(f)}else o(e,l,n)||c.push(f)}return c}xu.templateSettings={escape:W,evaluate:N,interpolate:X,variable:"",imports:{_:xu}},xu.prototype=Su.prototype,xu.prototype.constructor=xu,ju.prototype=Ou(Su.prototype),ju.prototype.constructor=ju,Pu.prototype=Ou(Su.prototype),Pu.prototype.constructor=Pu,Ru.prototype.clear=function(){this.__data__=_u?_u(null):{},this.size=0},Ru.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Ru.prototype.get=function(t){var e=this.__data__;if(_u){var u=e[t];return"__lodash_hash_undefined__"===u?void 0:u}return mt.call(e,t)?e[t]:void 0},Ru.prototype.has=function(t){var e=this.__data__;return _u?void 0!==e[t]:mt.call(e,t)},Ru.prototype.set=function(t,e){var u=this.__data__;return this.size+=this.has(t)?0:1,u[t]=_u&&void 0===e?"__lodash_hash_undefined__":e,this},Tu.prototype.clear=function(){this.__data__=[],this.size=0},Tu.prototype.delete=function(t){var e=this.__data__,u=qu(e,t);return!(u<0)&&(u==e.length-1?e.pop():Kt.call(e,u,1),--this.size,!0)},Tu.prototype.get=function(t){var e=this.__data__,u=qu(e,t);return u<0?void 0:e[u][1]},Tu.prototype.has=function(t){return qu(this.__data__,t)>-1},Tu.prototype.set=function(t,e){var u=this.__data__,n=qu(u,t);return n<0?(++this.size,u.push([t,e])):u[n][1]=e,this},Mu.prototype.clear=function(){this.size=0,this.__data__={hash:new Ru,map:new(Du||Tu),string:new Ru}},Mu.prototype.delete=function(t){var e=Jr(this,t).delete(t);return this.size-=e?1:0,e},Mu.prototype.get=function(t){return Jr(this,t).get(t)},Mu.prototype.has=function(t){return Jr(this,t).has(t)},Mu.prototype.set=function(t,e){var u=Jr(this,t),n=u.size;return u.set(t,e),this.size+=u.size==n?0:1,this},Iu.prototype.add=Iu.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Iu.prototype.has=function(t){return this.__data__.has(t)},zu.prototype.clear=function(){this.__data__=new Tu,this.size=0},zu.prototype.delete=function(t){var e=this.__data__,u=e.delete(t);return this.size=e.size,u},zu.prototype.get=function(t){return this.__data__.get(t)},zu.prototype.has=function(t){return this.__data__.has(t)},zu.prototype.set=function(t,e){var u=this.__data__;if(u instanceof Tu){var n=u.__data__;if(!Du||n.length<199)return n.push([t,e]),this.size=++u.size,this;u=this.__data__=new Mu(n)}return u.set(t,e),this.size=u.size,this};var en=br(fn),un=br(ln,!0);function nn(t,e){var u=!0;return en(t,(function(t,n,r){return u=!!e(t,n,r)})),u}function rn(t,e,u){for(var n=-1,r=t.length;++n<r;){var o=t[n],i=e(o);if(null!=i&&(void 0===a?i==i&&!Ji(i):u(i,a)))var a=i,c=o}return c}function on(t,e){var u=[];return en(t,(function(t,n,r){e(t,n,r)&&u.push(t)})),u}function an(t,e,u,n,r){var o=-1,i=t.length;for(u||(u=ao),r||(r=[]);++o<i;){var a=t[o];e>0&&u(a)?e>1?an(a,e-1,u,n,r):ve(r,a):n||(r[r.length]=a)}return r}var cn=mr(),sn=mr(!0);function fn(t,e){return t&&cn(t,e,Ea)}function ln(t,e){return t&&sn(t,e,Ea)}function hn(t,e){return le(e,(function(e){return Ni(t[e])}))}function pn(t,e){for(var u=0,n=(e=sr(e,t)).length;null!=t&&u<n;)t=t[ko(e[u++])];return u&&u==n?t:void 0}function Dn(t,e,u){var n=e(t);return Ti(t)?n:ve(n,u(t))}function vn(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Jt&&Jt in vt(t)?function(t){var e=mt.call(t,Jt),u=t[Jt];try{t[Jt]=void 0;var n=!0}catch(t){}var r=wt.call(t);n&&(e?t[Jt]=u:delete t[Jt]);return r}(t):function(t){return wt.call(t)}(t)}function yn(t,e){return t>e}function dn(t,e){return null!=t&&mt.call(t,e)}function _n(t,e){return null!=t&&e in vt(t)}function gn(t,e,u){for(var r=u?pe:he,o=t[0].length,i=t.length,a=i,c=n(i),s=1/0,f=[];a--;){var l=t[a];a&&e&&(l=De(l,je(e))),s=cu(l.length,s),c[a]=!u&&(e||o>=120&&l.length>=120)?new Iu(a&&l):void 0}l=t[0];var h=-1,p=c[0];t:for(;++h<o&&f.length<s;){var D=l[h],v=e?e(D):D;if(D=u||0!==D?D:0,!(p?Re(p,v):r(f,v,u))){for(a=i;--a;){var y=c[a];if(!(y?Re(y,v):r(t[a],v,u)))continue t}p&&p.push(v),f.push(D)}}return f}function Cn(t,e,u){var n=null==(t=_o(t,e=sr(e,t)))?t:t[ko(Wo(e))];return null==n?void 0:ie(n,t,u)}function An(t){return Hi(t)&&vn(t)==s}function En(t,e,u,n,r){return t===e||(null==t||null==e||!Hi(t)&&!Hi(e)?t!=t&&e!=e:function(t,e,u,n,r,o){var i=Ti(t),a=Ti(e),c=i?f:ro(t),D=a?f:ro(e),v=(c=c==s?_:c)==_,b=(D=D==s?_:D)==_,B=c==D;if(B&&Ui(t)){if(!Ui(e))return!1;i=!0,v=!1}if(B&&!v)return o||(o=new zu),i||ta(t)?qr(t,e,u,n,r,o):function(t,e,u,n,r,o,i){switch(u){case F:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case m:return!(t.byteLength!=e.byteLength||!o(new Tt(t),new Tt(e)));case l:case h:case d:return Si(+t,+e);case p:return t.name==e.name&&t.message==e.message;case g:case A:return t==e+"";case y:var a=Ne;case C:var c=1&n;if(a||(a=qe),t.size!=e.size&&!c)return!1;var s=i.get(t);if(s)return s==e;n|=2,i.set(t,e);var f=qr(a(t),a(e),n,r,o,i);return i.delete(t),f;case E:if(wu)return wu.call(t)==wu.call(e)}return!1}(t,e,c,u,n,r,o);if(!(1&u)){var w=v&&mt.call(t,"__wrapped__"),k=b&&mt.call(e,"__wrapped__");if(w||k){var x=w?t.value():t,O=k?e.value():e;return o||(o=new zu),r(x,O,u,n,o)}}if(!B)return!1;return o||(o=new zu),function(t,e,u,n,r,o){var i=1&u,a=$r(t),c=a.length,s=$r(e).length;if(c!=s&&!i)return!1;var f=c;for(;f--;){var l=a[f];if(!(i?l in e:mt.call(e,l)))return!1}var h=o.get(t),p=o.get(e);if(h&&p)return h==e&&p==t;var D=!0;o.set(t,e),o.set(e,t);var v=i;for(;++f<c;){l=a[f];var y=t[l],d=e[l];if(n)var _=i?n(d,y,l,e,t,o):n(y,d,l,t,e,o);if(!(void 0===_?y===d||r(y,d,u,n,o):_)){D=!1;break}v||(v="constructor"==l)}if(D&&!v){var g=t.constructor,C=e.constructor;g==C||!("constructor"in t)||!("constructor"in e)||"function"==typeof g&&g instanceof g&&"function"==typeof C&&C instanceof C||(D=!1)}return o.delete(t),o.delete(e),D}(t,e,u,n,r,o)}(t,e,u,n,En,r))}function bn(t,e,u,n){var r=u.length,o=r,i=!n;if(null==t)return!o;for(t=vt(t);r--;){var a=u[r];if(i&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++r<o;){var c=(a=u[r])[0],s=t[c],f=a[1];if(i&&a[2]){if(void 0===s&&!(c in t))return!1}else{var l=new zu;if(n)var h=n(s,f,c,t,e,l);if(!(void 0===h?En(f,s,3,n,l):h))return!1}}return!0}function mn(t){return!(!qi(t)||(e=t,Bt&&Bt in e))&&(Ni(t)?Ot:at).test(xo(t));var e}function Fn(t){return"function"==typeof t?t:null==t?Ga:"object"==o(t)?Ti(t)?Sn(t[0],t[1]):On(t):nc(t)}function Bn(t){if(!po(t))return iu(t);var e=[];for(var u in vt(t))mt.call(t,u)&&"constructor"!=u&&e.push(u);return e}function wn(t){if(!qi(t))return function(t){var e=[];if(null!=t)for(var u in vt(t))e.push(u);return e}(t);var e=po(t),u=[];for(var n in t)("constructor"!=n||!e&&mt.call(t,n))&&u.push(n);return u}function kn(t,e){return t<e}function xn(t,e){var u=-1,r=Ii(t)?n(t.length):[];return en(t,(function(t,n,o){r[++u]=e(t,n,o)})),r}function On(t){var e=to(t);return 1==e.length&&e[0][2]?vo(e[0][0],e[0][1]):function(u){return u===t||bn(u,t,e)}}function Sn(t,e){return fo(t)&&Do(e)?vo(ko(t),e):function(u){var n=da(u,t);return void 0===n&&n===e?_a(u,t):En(e,n,3)}}function jn(t,e,u,n,r){t!==e&&cn(e,(function(o,i){if(r||(r=new zu),qi(o))!function(t,e,u,n,r,o,i){var a=Co(t,u),c=Co(e,u),s=i.get(c);if(s)return void Xu(t,u,s);var f=o?o(a,c,u+"",t,e,i):void 0,l=void 0===f;if(l){var h=Ti(c),p=!h&&Ui(c),D=!h&&!p&&ta(c);f=c,h||p||D?Ti(a)?f=a:zi(a)?f=gr(a):p?(l=!1,f=pr(c,!0)):D?(l=!1,f=vr(c,!0)):f=[]:Ki(c)||Ri(c)?(f=a,Ri(a)?f=ca(a):qi(a)&&!Ni(a)||(f=io(c))):l=!1}l&&(i.set(c,f),r(f,c,n,o,i),i.delete(c));Xu(t,u,f)}(t,e,i,u,jn,n,r);else{var a=n?n(Co(t,i),o,i+"",t,e,r):void 0;void 0===a&&(a=o),Xu(t,i,a)}}),ba)}function Pn(t,e){var u=t.length;if(u)return co(e+=e<0?u:0,u)?t[e]:void 0}function Rn(t,e,u){e=e.length?De(e,(function(t){return Ti(t)?function(e){return pn(e,1===t.length?t[0]:t)}:t})):[Ga];var n=-1;return e=De(e,je(Qr())),function(t,e){var u=t.length;for(t.sort(e);u--;)t[u]=t[u].value;return t}(xn(t,(function(t,u,r){return{criteria:De(e,(function(e){return e(t)})),index:++n,value:t}})),(function(t,e){return function(t,e,u){var n=-1,r=t.criteria,o=e.criteria,i=r.length,a=u.length;for(;++n<i;){var c=yr(r[n],o[n]);if(c){if(n>=a)return c;var s=u[n];return c*("desc"==s?-1:1)}}return t.index-e.index}(t,e,u)}))}function Tn(t,e,u){for(var n=-1,r=e.length,o={};++n<r;){var i=e[n],a=pn(t,i);u(a,i)&&Xn(o,sr(i,t),a)}return o}function Mn(t,e,u,n){var r=n?be:Ee,o=-1,i=e.length,a=t;for(t===e&&(e=gr(e)),u&&(a=De(t,je(u)));++o<i;)for(var c=0,s=e[o],f=u?u(s):s;(c=r(a,f,c,n))>-1;)a!==t&&Kt.call(a,c,1),Kt.call(t,c,1);return t}function In(t,e){for(var u=t?e.length:0,n=u-1;u--;){var r=e[u];if(u==n||r!==o){var o=r;co(r)?Kt.call(t,r,1):er(t,r)}}return t}function zn(t,e){return t+eu(lu()*(e-t+1))}function Un(t,e){var u="";if(!t||e<1||e>9007199254740991)return u;do{e%2&&(u+=t),(e=eu(e/2))&&(t+=t)}while(e);return u}function Ln(t,e){return bo(yo(t,e,Ga),t+"")}function Wn(t){return Lu(Sa(t))}function Nn(t,e){var u=Sa(t);return Bo(u,Vu(e,0,u.length))}function Xn(t,e,u,n){if(!qi(t))return t;for(var r=-1,o=(e=sr(e,t)).length,i=o-1,a=t;null!=a&&++r<o;){var c=ko(e[r]),s=u;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(r!=i){var f=a[c];void 0===(s=n?n(f,c,a):void 0)&&(s=qi(f)?f:co(e[r+1])?[]:{})}Yu(a,c,s),a=a[c]}return t}var Yn=gu?function(t,e){return gu.set(t,e),t}:Ga,qn=ge?function(t,e){return ge(t,"toString",{configurable:!0,enumerable:!1,value:qa(e),writable:!0})}:Ga;function Hn(t){return Bo(Sa(t))}function $n(t,e,u){var r=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(u=u>o?o:u)<0&&(u+=o),o=e>u?0:u-e>>>0,e>>>=0;for(var i=n(o);++r<o;)i[r]=t[r+e];return i}function Gn(t,e){var u;return en(t,(function(t,n,r){return!(u=e(t,n,r))})),!!u}function Kn(t,e,u){var n=0,r=null==t?n:t.length;if("number"==typeof e&&e==e&&r<=2147483647){for(;n<r;){var o=n+r>>>1,i=t[o];null!==i&&!Ji(i)&&(u?i<=e:i<e)?n=o+1:r=o}return r}return Vn(t,e,Ga,u)}function Vn(t,e,u,n){var r=0,o=null==t?0:t.length;if(0===o)return 0;for(var i=(e=u(e))!=e,a=null===e,c=Ji(e),s=void 0===e;r<o;){var f=eu((r+o)/2),l=u(t[f]),h=void 0!==l,p=null===l,D=l==l,v=Ji(l);if(i)var y=n||D;else y=s?D&&(n||h):a?D&&h&&(n||!p):c?D&&h&&!p&&(n||!v):!p&&!v&&(n?l<=e:l<e);y?r=f+1:o=f}return cu(o,4294967294)}function Zn(t,e){for(var u=-1,n=t.length,r=0,o=[];++u<n;){var i=t[u],a=e?e(i):i;if(!u||!Si(a,c)){var c=a;o[r++]=0===i?0:i}}return o}function Qn(t){return"number"==typeof t?t:Ji(t)?NaN:+t}function Jn(t){if("string"==typeof t)return t;if(Ti(t))return De(t,Jn)+"";if(Ji(t))return ku?ku.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function tr(t,e,u){var n=-1,r=he,o=t.length,i=!0,a=[],c=a;if(u)i=!1,r=pe;else if(o>=200){var s=e?null:Ur(t);if(s)return qe(s);i=!1,r=Re,c=new Iu}else c=e?[]:a;t:for(;++n<o;){var f=t[n],l=e?e(f):f;if(f=u||0!==f?f:0,i&&l==l){for(var h=c.length;h--;)if(c[h]===l)continue t;e&&c.push(l),a.push(f)}else r(c,l,u)||(c!==a&&c.push(l),a.push(f))}return a}function er(t,e){return null==(t=_o(t,e=sr(e,t)))||delete t[ko(Wo(e))]}function ur(t,e,u,n){return Xn(t,e,u(pn(t,e)),n)}function nr(t,e,u,n){for(var r=t.length,o=n?r:-1;(n?o--:++o<r)&&e(t[o],o,t););return u?$n(t,n?0:o,n?o+1:r):$n(t,n?o+1:0,n?r:o)}function rr(t,e){var u=t;return u instanceof Pu&&(u=u.value()),ye(e,(function(t,e){return e.func.apply(e.thisArg,ve([t],e.args))}),u)}function or(t,e,u){var r=t.length;if(r<2)return r?tr(t[0]):[];for(var o=-1,i=n(r);++o<r;)for(var a=t[o],c=-1;++c<r;)c!=o&&(i[o]=tn(i[o]||a,t[c],e,u));return tr(an(i,1),e,u)}function ir(t,e,u){for(var n=-1,r=t.length,o=e.length,i={};++n<r;){var a=n<o?e[n]:void 0;u(i,t[n],a)}return i}function ar(t){return zi(t)?t:[]}function cr(t){return"function"==typeof t?t:Ga}function sr(t,e){return Ti(t)?t:fo(t,e)?[t]:wo(sa(t))}var fr=Ln;function lr(t,e,u){var n=t.length;return u=void 0===u?n:u,!e&&u>=n?t:$n(t,e,u)}var hr=we||function(t){return Gt.clearTimeout(t)};function pr(t,e){if(e)return t.slice();var u=t.length,n=It?It(u):new t.constructor(u);return t.copy(n),n}function Dr(t){var e=new t.constructor(t.byteLength);return new Tt(e).set(new Tt(t)),e}function vr(t,e){var u=e?Dr(t.buffer):t.buffer;return new t.constructor(u,t.byteOffset,t.length)}function yr(t,e){if(t!==e){var u=void 0!==t,n=null===t,r=t==t,o=Ji(t),i=void 0!==e,a=null===e,c=e==e,s=Ji(e);if(!a&&!s&&!o&&t>e||o&&i&&c&&!a&&!s||n&&i&&c||!u&&c||!r)return 1;if(!n&&!o&&!s&&t<e||s&&u&&r&&!n&&!o||a&&u&&r||!i&&r||!c)return-1}return 0}function dr(t,e,u,r){for(var o=-1,i=t.length,a=u.length,c=-1,s=e.length,f=au(i-a,0),l=n(s+f),h=!r;++c<s;)l[c]=e[c];for(;++o<a;)(h||o<i)&&(l[u[o]]=t[o]);for(;f--;)l[c++]=t[o++];return l}function _r(t,e,u,r){for(var o=-1,i=t.length,a=-1,c=u.length,s=-1,f=e.length,l=au(i-c,0),h=n(l+f),p=!r;++o<l;)h[o]=t[o];for(var D=o;++s<f;)h[D+s]=e[s];for(;++a<c;)(p||o<i)&&(h[D+u[a]]=t[o++]);return h}function gr(t,e){var u=-1,r=t.length;for(e||(e=n(r));++u<r;)e[u]=t[u];return e}function Cr(t,e,u,n){var r=!u;u||(u={});for(var o=-1,i=e.length;++o<i;){var a=e[o],c=n?n(u[a],t[a],a,u,t):void 0;void 0===c&&(c=t[a]),r?Gu(u,a,c):Yu(u,a,c)}return u}function Ar(t,e){return function(u,n){var r=Ti(u)?ae:Hu,o=e?e():{};return r(u,t,Qr(n,2),o)}}function Er(t){return Ln((function(e,u){var n=-1,r=u.length,o=r>1?u[r-1]:void 0,i=r>2?u[2]:void 0;for(o=t.length>3&&"function"==typeof o?(r--,o):void 0,i&&so(u[0],u[1],i)&&(o=r<3?void 0:o,r=1),e=vt(e);++n<r;){var a=u[n];a&&t(e,a,n,o)}return e}))}function br(t,e){return function(u,n){if(null==u)return u;if(!Ii(u))return t(u,n);for(var r=u.length,o=e?r:-1,i=vt(u);(e?o--:++o<r)&&!1!==n(i[o],o,i););return u}}function mr(t){return function(e,u,n){for(var r=-1,o=vt(e),i=n(e),a=i.length;a--;){var c=i[t?a:++r];if(!1===u(o[c],c,o))break}return e}}function Fr(t){return function(e){var u=We(e=sa(e))?Ge(e):void 0,n=u?u[0]:e.charAt(0),r=u?lr(u,1).join(""):e.slice(1);return n[t]()+r}}function Br(t){return function(e){return ye(Na(Ra(e).replace(Pt,"")),t,"")}}function wr(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var u=Ou(t.prototype),n=t.apply(u,e);return qi(n)?n:u}}function kr(t){return function(e,u,n){var r=vt(e);if(!Ii(e)){var o=Qr(u,3);e=Ea(e),u=function(t){return o(r[t],t,r)}}var i=t(e,u,n);return i>-1?r[o?e[i]:i]:void 0}}function xr(t){return Hr((function(e){var u=e.length,n=u,r=ju.prototype.thru;for(t&&e.reverse();n--;){var o=e[n];if("function"!=typeof o)throw new _t(i);if(r&&!a&&"wrapper"==Vr(o))var a=new ju([],!0)}for(n=a?n:u;++n<u;){var c=Vr(o=e[n]),s="wrapper"==c?Kr(o):void 0;a=s&&lo(s[0])&&424==s[1]&&!s[4].length&&1==s[9]?a[Vr(s[0])].apply(a,s[3]):1==o.length&&lo(o)?a[c]():a.thru(o)}return function(){var t=arguments,n=t[0];if(a&&1==t.length&&Ti(n))return a.plant(n).value();for(var r=0,o=u?e[r].apply(this,t):n;++r<u;)o=e[r].call(this,o);return o}}))}function Or(t,e,u,r,o,i,a,c,s,f){var l=128&e,h=1&e,p=2&e,D=24&e,v=512&e,y=p?void 0:wr(t);return function d(){for(var _=arguments.length,g=n(_),C=_;C--;)g[C]=arguments[C];if(D)var A=Zr(d),E=Ie(g,A);if(r&&(g=dr(g,r,o,D)),i&&(g=_r(g,i,a,D)),_-=E,D&&_<f){var b=Ye(g,A);return Ir(t,e,Or,d.placeholder,u,g,b,c,s,f-_)}var m=h?u:this,F=p?m[t]:t;return _=g.length,c?g=go(g,c):v&&_>1&&g.reverse(),l&&s<_&&(g.length=s),this&&this!==Gt&&this instanceof d&&(F=y||wr(F)),F.apply(m,g)}}function Sr(t,e){return function(u,n){return function(t,e,u,n){return fn(t,(function(t,r,o){e(n,u(t),r,o)})),n}(u,t,e(n),{})}}function jr(t,e){return function(u,n){var r;if(void 0===u&&void 0===n)return e;if(void 0!==u&&(r=u),void 0!==n){if(void 0===r)return n;"string"==typeof u||"string"==typeof n?(u=Jn(u),n=Jn(n)):(u=Qn(u),n=Qn(n)),r=t(u,n)}return r}}function Pr(t){return Hr((function(e){return e=De(e,je(Qr())),Ln((function(u){var n=this;return t(e,(function(t){return ie(t,n,u)}))}))}))}function Rr(t,e){var u=(e=void 0===e?" ":Jn(e)).length;if(u<2)return u?Un(e,t):e;var n=Un(e,tu(t/$e(e)));return We(e)?lr(Ge(n),0,t).join(""):n.slice(0,t)}function Tr(t){return function(e,u,r){return r&&"number"!=typeof r&&so(e,u,r)&&(u=r=void 0),e=ra(e),void 0===u?(u=e,e=0):u=ra(u),function(t,e,u,r){for(var o=-1,i=au(tu((e-t)/(u||1)),0),a=n(i);i--;)a[r?i:++o]=t,t+=u;return a}(e,u,r=void 0===r?e<u?1:-1:ra(r),t)}}function Mr(t){return function(e,u){return"string"==typeof e&&"string"==typeof u||(e=aa(e),u=aa(u)),t(e,u)}}function Ir(t,e,u,n,r,o,i,a,c,s){var f=8&e;e|=f?32:64,4&(e&=~(f?64:32))||(e&=-4);var l=[t,e,r,f?o:void 0,f?i:void 0,f?void 0:o,f?void 0:i,a,c,s],h=u.apply(void 0,l);return lo(t)&&Ao(h,l),h.placeholder=n,mo(h,t,e)}function zr(t){var e=Dt[t];return function(t,u){if(t=aa(t),(u=null==u?0:cu(oa(u),292))&&ru(t)){var n=(sa(t)+"e").split("e");return+((n=(sa(e(n[0]+"e"+(+n[1]+u)))+"e").split("e"))[0]+"e"+(+n[1]-u))}return e(t)}}var Ur=yu&&1/qe(new yu([,-0]))[1]==1/0?function(t){return new yu(t)}:Ja;function Lr(t){return function(e){var u=ro(e);return u==y?Ne(e):u==C?He(e):function(t,e){return De(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Wr(t,e,u,r,o,c,s,f){var l=2&e;if(!l&&"function"!=typeof t)throw new _t(i);var h=r?r.length:0;if(h||(e&=-97,r=o=void 0),s=void 0===s?s:au(oa(s),0),f=void 0===f?f:oa(f),h-=o?o.length:0,64&e){var p=r,D=o;r=o=void 0}var v=l?void 0:Kr(t),y=[t,e,u,r,o,p,D,c,s,f];if(v&&function(t,e){var u=t[1],n=e[1],r=u|n,o=r<131,i=128==n&&8==u||128==n&&256==u&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==u;if(!o&&!i)return t;1&n&&(t[2]=e[2],r|=1&u?0:4);var c=e[3];if(c){var s=t[3];t[3]=s?dr(s,c,e[4]):c,t[4]=s?Ye(t[3],a):e[4]}(c=e[5])&&(s=t[5],t[5]=s?_r(s,c,e[6]):c,t[6]=s?Ye(t[5],a):e[6]);(c=e[7])&&(t[7]=c);128&n&&(t[8]=null==t[8]?e[8]:cu(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=r}(y,v),t=y[0],e=y[1],u=y[2],r=y[3],o=y[4],!(f=y[9]=void 0===y[9]?l?0:t.length:au(y[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)d=8==e||16==e?function(t,e,u){var r=wr(t);return function o(){for(var i=arguments.length,a=n(i),c=i,s=Zr(o);c--;)a[c]=arguments[c];var f=i<3&&a[0]!==s&&a[i-1]!==s?[]:Ye(a,s);if((i-=f.length)<u)return Ir(t,e,Or,o.placeholder,void 0,a,f,void 0,void 0,u-i);var l=this&&this!==Gt&&this instanceof o?r:t;return ie(l,this,a)}}(t,e,f):32!=e&&33!=e||o.length?Or.apply(void 0,y):function(t,e,u,r){var o=1&e,i=wr(t);return function e(){for(var a=-1,c=arguments.length,s=-1,f=r.length,l=n(f+c),h=this&&this!==Gt&&this instanceof e?i:t;++s<f;)l[s]=r[s];for(;c--;)l[s++]=arguments[++a];return ie(h,o?u:this,l)}}(t,e,u,r);else var d=function(t,e,u){var n=1&e,r=wr(t);return function e(){var o=this&&this!==Gt&&this instanceof e?r:t;return o.apply(n?u:this,arguments)}}(t,e,u);return mo((v?Yn:Ao)(d,y),t,e)}function Nr(t,e,u,n){return void 0===t||Si(t,At[u])&&!mt.call(n,u)?e:t}function Xr(t,e,u,n,r,o){return qi(t)&&qi(e)&&(o.set(e,t),jn(t,e,void 0,Xr,o),o.delete(e)),t}function Yr(t){return Ki(t)?void 0:t}function qr(t,e,u,n,r,o){var i=1&u,a=t.length,c=e.length;if(a!=c&&!(i&&c>a))return!1;var s=o.get(t),f=o.get(e);if(s&&f)return s==e&&f==t;var l=-1,h=!0,p=2&u?new Iu:void 0;for(o.set(t,e),o.set(e,t);++l<a;){var D=t[l],v=e[l];if(n)var y=i?n(v,D,l,e,t,o):n(D,v,l,t,e,o);if(void 0!==y){if(y)continue;h=!1;break}if(p){if(!_e(e,(function(t,e){if(!Re(p,e)&&(D===t||r(D,t,u,n,o)))return p.push(e)}))){h=!1;break}}else if(D!==v&&!r(D,v,u,n,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function Hr(t){return bo(yo(t,void 0,Mo),t+"")}function $r(t){return Dn(t,Ea,uo)}function Gr(t){return Dn(t,ba,no)}var Kr=gu?function(t){return gu.get(t)}:Ja;function Vr(t){for(var e=t.name+"",u=Cu[e],n=mt.call(Cu,e)?u.length:0;n--;){var r=u[n],o=r.func;if(null==o||o==t)return r.name}return e}function Zr(t){return(mt.call(xu,"placeholder")?xu:t).placeholder}function Qr(){var t=xu.iteratee||Ka;return t=t===Ka?Fn:t,arguments.length?t(arguments[0],arguments[1]):t}function Jr(t,e){var u,n,r=t.__data__;return("string"==(n=o(u=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==u:null===u)?r["string"==typeof e?"string":"hash"]:r.map}function to(t){for(var e=Ea(t),u=e.length;u--;){var n=e[u],r=t[n];e[u]=[n,r,Do(r)]}return e}function eo(t,e){var u=function(t,e){return null==t?void 0:t[e]}(t,e);return mn(u)?u:void 0}var uo=uu?function(t){return null==t?[]:(t=vt(t),le(uu(t),(function(e){return $t.call(t,e)})))}:ic,no=uu?function(t){for(var e=[];t;)ve(e,uo(t)),t=Xt(t);return e}:ic,ro=vn;function oo(t,e,u){for(var n=-1,r=(e=sr(e,t)).length,o=!1;++n<r;){var i=ko(e[n]);if(!(o=null!=t&&u(t,i)))break;t=t[i]}return o||++n!=r?o:!!(r=null==t?0:t.length)&&Yi(r)&&co(i,r)&&(Ti(t)||Ri(t))}function io(t){return"function"!=typeof t.constructor||po(t)?{}:Ou(Xt(t))}function ao(t){return Ti(t)||Ri(t)||!!(Vt&&t&&t[Vt])}function co(t,e){var u=o(t);return!!(e=null==e?9007199254740991:e)&&("number"==u||"symbol"!=u&&st.test(t))&&t>-1&&t%1==0&&t<e}function so(t,e,u){if(!qi(u))return!1;var n=o(e);return!!("number"==n?Ii(u)&&co(e,u.length):"string"==n&&e in u)&&Si(u[e],t)}function fo(t,e){if(Ti(t))return!1;var u=o(t);return!("number"!=u&&"symbol"!=u&&"boolean"!=u&&null!=t&&!Ji(t))||(q.test(t)||!Y.test(t)||null!=e&&t in vt(e))}function lo(t){var e=Vr(t),u=xu[e];if("function"!=typeof u||!(e in Pu.prototype))return!1;if(t===u)return!0;var n=Kr(u);return!!n&&t===n[0]}(pu&&ro(new pu(new ArrayBuffer(1)))!=F||Du&&ro(new Du)!=y||vu&&"[object Promise]"!=ro(vu.resolve())||yu&&ro(new yu)!=C||du&&ro(new du)!=b)&&(ro=function(t){var e=vn(t),u=e==_?t.constructor:void 0,n=u?xo(u):"";if(n)switch(n){case Au:return F;case Eu:return y;case bu:return"[object Promise]";case mu:return C;case Fu:return b}return e});var ho=Et?Ni:ac;function po(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||At)}function Do(t){return t==t&&!qi(t)}function vo(t,e){return function(u){return null!=u&&(u[t]===e&&(void 0!==e||t in vt(u)))}}function yo(t,e,u){return e=au(void 0===e?t.length-1:e,0),function(){for(var r=arguments,o=-1,i=au(r.length-e,0),a=n(i);++o<i;)a[o]=r[e+o];o=-1;for(var c=n(e+1);++o<e;)c[o]=r[o];return c[e]=u(a),ie(t,this,c)}}function _o(t,e){return e.length<2?t:pn(t,$n(e,0,-1))}function go(t,e){for(var u=t.length,n=cu(e.length,u),r=gr(t);n--;){var o=e[n];t[n]=co(o,u)?r[o]:void 0}return t}function Co(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Ao=Fo(Yn),Eo=Je||function(t,e){return Gt.setTimeout(t,e)},bo=Fo(qn);function mo(t,e,u){var n=e+"";return bo(t,function(t,e){var u=e.length;if(!u)return t;var n=u-1;return e[n]=(u>1?"& ":"")+e[n],e=e.join(u>2?", ":" "),t.replace(Z,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return ce(c,(function(u){var n="_."+u[0];e&u[1]&&!he(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(Q);return e?e[1].split(J):[]}(n),u)))}function Fo(t){var e=0,u=0;return function(){var n=su(),r=16-(n-u);if(u=n,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Bo(t,e){var u=-1,n=t.length,r=n-1;for(e=void 0===e?n:e;++u<e;){var o=zn(u,r),i=t[o];t[o]=t[u],t[u]=i}return t.length=e,t}var wo=function(t){var e=Fi(t,(function(t){return 500===u.size&&u.clear(),t})),u=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(H,(function(t,u,n,r){e.push(n?r.replace(ut,"$1"):u||t)})),e}));function ko(t){if("string"==typeof t||Ji(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function xo(t){if(null!=t){try{return bt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Oo(t){if(t instanceof Pu)return t.clone();var e=new ju(t.__wrapped__,t.__chain__);return e.__actions__=gr(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var So=Ln((function(t,e){return zi(t)?tn(t,an(e,1,zi,!0)):[]})),jo=Ln((function(t,e){var u=Wo(e);return zi(u)&&(u=void 0),zi(t)?tn(t,an(e,1,zi,!0),Qr(u,2)):[]})),Po=Ln((function(t,e){var u=Wo(e);return zi(u)&&(u=void 0),zi(t)?tn(t,an(e,1,zi,!0),void 0,u):[]}));function Ro(t,e,u){var n=null==t?0:t.length;if(!n)return-1;var r=null==u?0:oa(u);return r<0&&(r=au(n+r,0)),Ae(t,Qr(e,3),r)}function To(t,e,u){var n=null==t?0:t.length;if(!n)return-1;var r=n-1;return void 0!==u&&(r=oa(u),r=u<0?au(n+r,0):cu(r,n-1)),Ae(t,Qr(e,3),r,!0)}function Mo(t){return(null==t?0:t.length)?an(t,1):[]}function Io(t){return t&&t.length?t[0]:void 0}var zo=Ln((function(t){var e=De(t,ar);return e.length&&e[0]===t[0]?gn(e):[]})),Uo=Ln((function(t){var e=Wo(t),u=De(t,ar);return e===Wo(u)?e=void 0:u.pop(),u.length&&u[0]===t[0]?gn(u,Qr(e,2)):[]})),Lo=Ln((function(t){var e=Wo(t),u=De(t,ar);return(e="function"==typeof e?e:void 0)&&u.pop(),u.length&&u[0]===t[0]?gn(u,void 0,e):[]}));function Wo(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var No=Ln(Xo);function Xo(t,e){return t&&t.length&&e&&e.length?Mn(t,e):t}var Yo=Hr((function(t,e){var u=null==t?0:t.length,n=Ku(t,e);return In(t,De(e,(function(t){return co(t,u)?+t:t})).sort(yr)),n}));function qo(t){return null==t?t:hu.call(t)}var Ho=Ln((function(t){return tr(an(t,1,zi,!0))})),$o=Ln((function(t){var e=Wo(t);return zi(e)&&(e=void 0),tr(an(t,1,zi,!0),Qr(e,2))})),Go=Ln((function(t){var e=Wo(t);return e="function"==typeof e?e:void 0,tr(an(t,1,zi,!0),void 0,e)}));function Ko(t){if(!t||!t.length)return[];var e=0;return t=le(t,(function(t){if(zi(t))return e=au(t.length,e),!0})),Oe(e,(function(e){return De(t,Be(e))}))}function Vo(t,e){if(!t||!t.length)return[];var u=Ko(t);return null==e?u:De(u,(function(t){return ie(e,void 0,t)}))}var Zo=Ln((function(t,e){return zi(t)?tn(t,e):[]})),Qo=Ln((function(t){return or(le(t,zi))})),Jo=Ln((function(t){var e=Wo(t);return zi(e)&&(e=void 0),or(le(t,zi),Qr(e,2))})),ti=Ln((function(t){var e=Wo(t);return e="function"==typeof e?e:void 0,or(le(t,zi),void 0,e)})),ei=Ln(Ko);var ui=Ln((function(t){var e=t.length,u=e>1?t[e-1]:void 0;return u="function"==typeof u?(t.pop(),u):void 0,Vo(t,u)}));function ni(t){var e=xu(t);return e.__chain__=!0,e}function ri(t,e){return e(t)}var oi=Hr((function(t){var e=t.length,u=e?t[0]:0,n=this.__wrapped__,r=function(e){return Ku(e,t)};return!(e>1||this.__actions__.length)&&n instanceof Pu&&co(u)?((n=n.slice(u,+u+(e?1:0))).__actions__.push({func:ri,args:[r],thisArg:void 0}),new ju(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(r)}));var ii=Ar((function(t,e,u){mt.call(t,u)?++t[u]:Gu(t,u,1)}));var ai=kr(Ro),ci=kr(To);function si(t,e){return(Ti(t)?ce:en)(t,Qr(e,3))}function fi(t,e){return(Ti(t)?se:un)(t,Qr(e,3))}var li=Ar((function(t,e,u){mt.call(t,u)?t[u].push(e):Gu(t,u,[e])}));var hi=Ln((function(t,e,u){var r=-1,o="function"==typeof e,i=Ii(t)?n(t.length):[];return en(t,(function(t){i[++r]=o?ie(e,t,u):Cn(t,e,u)})),i})),pi=Ar((function(t,e,u){Gu(t,u,e)}));function Di(t,e){return(Ti(t)?De:xn)(t,Qr(e,3))}var vi=Ar((function(t,e,u){t[u?0:1].push(e)}),(function(){return[[],[]]}));var yi=Ln((function(t,e){if(null==t)return[];var u=e.length;return u>1&&so(t,e[0],e[1])?e=[]:u>2&&so(e[0],e[1],e[2])&&(e=[e[0]]),Rn(t,an(e,1),[])})),di=Qe||function(){return Gt.Date.now()};function _i(t,e,u){return e=u?void 0:e,Wr(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function gi(t,e){var u;if("function"!=typeof e)throw new _t(i);return t=oa(t),function(){return--t>0&&(u=e.apply(this,arguments)),t<=1&&(e=void 0),u}}var Ci=Ln((function(t,e,u){var n=1;if(u.length){var r=Ye(u,Zr(Ci));n|=32}return Wr(t,n,e,u,r)})),Ai=Ln((function(t,e,u){var n=3;if(u.length){var r=Ye(u,Zr(Ai));n|=32}return Wr(e,n,t,u,r)}));function Ei(t,e,u){var n,r,o,a,c,s,f=0,l=!1,h=!1,p=!0;if("function"!=typeof t)throw new _t(i);function D(e){var u=n,o=r;return n=r=void 0,f=e,a=t.apply(o,u)}function v(t){return f=t,c=Eo(d,e),l?D(t):a}function y(t){var u=t-s;return void 0===s||u>=e||u<0||h&&t-f>=o}function d(){var t=di();if(y(t))return _(t);c=Eo(d,function(t){var u=e-(t-s);return h?cu(u,o-(t-f)):u}(t))}function _(t){return c=void 0,p&&n?D(t):(n=r=void 0,a)}function g(){var t=di(),u=y(t);if(n=arguments,r=this,s=t,u){if(void 0===c)return v(s);if(h)return hr(c),c=Eo(d,e),D(s)}return void 0===c&&(c=Eo(d,e)),a}return e=aa(e)||0,qi(u)&&(l=!!u.leading,o=(h="maxWait"in u)?au(aa(u.maxWait)||0,e):o,p="trailing"in u?!!u.trailing:p),g.cancel=function(){void 0!==c&&hr(c),f=0,n=s=r=c=void 0},g.flush=function(){return void 0===c?a:_(di())},g}var bi=Ln((function(t,e){return Ju(t,1,e)})),mi=Ln((function(t,e,u){return Ju(t,aa(e)||0,u)}));function Fi(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new _t(i);var u=function u(){var n=arguments,r=e?e.apply(this,n):n[0],o=u.cache;if(o.has(r))return o.get(r);var i=t.apply(this,n);return u.cache=o.set(r,i)||o,i};return u.cache=new(Fi.Cache||Mu),u}function Bi(t){if("function"!=typeof t)throw new _t(i);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Fi.Cache=Mu;var wi=fr((function(t,e){var u=(e=1==e.length&&Ti(e[0])?De(e[0],je(Qr())):De(an(e,1),je(Qr()))).length;return Ln((function(n){for(var r=-1,o=cu(n.length,u);++r<o;)n[r]=e[r].call(this,n[r]);return ie(t,this,n)}))})),ki=Ln((function(t,e){return Wr(t,32,void 0,e,Ye(e,Zr(ki)))})),xi=Ln((function(t,e){return Wr(t,64,void 0,e,Ye(e,Zr(xi)))})),Oi=Hr((function(t,e){return Wr(t,256,void 0,void 0,void 0,e)}));function Si(t,e){return t===e||t!=t&&e!=e}var ji=Mr(yn),Pi=Mr((function(t,e){return t>=e})),Ri=An(function(){return arguments}())?An:function(t){return Hi(t)&&mt.call(t,"callee")&&!$t.call(t,"callee")},Ti=n.isArray,Mi=te?je(te):function(t){return Hi(t)&&vn(t)==m};function Ii(t){return null!=t&&Yi(t.length)&&!Ni(t)}function zi(t){return Hi(t)&&Ii(t)}var Ui=nu||ac,Li=ee?je(ee):function(t){return Hi(t)&&vn(t)==h};function Wi(t){if(!Hi(t))return!1;var e=vn(t);return e==p||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Ki(t)}function Ni(t){if(!qi(t))return!1;var e=vn(t);return e==D||e==v||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Xi(t){return"number"==typeof t&&t==oa(t)}function Yi(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function qi(t){var e=o(t);return null!=t&&("object"==e||"function"==e)}function Hi(t){return null!=t&&"object"==o(t)}var $i=ue?je(ue):function(t){return Hi(t)&&ro(t)==y};function Gi(t){return"number"==typeof t||Hi(t)&&vn(t)==d}function Ki(t){if(!Hi(t)||vn(t)!=_)return!1;var e=Xt(t);if(null===e)return!0;var u=mt.call(e,"constructor")&&e.constructor;return"function"==typeof u&&u instanceof u&&bt.call(u)==kt}var Vi=ne?je(ne):function(t){return Hi(t)&&vn(t)==g};var Zi=re?je(re):function(t){return Hi(t)&&ro(t)==C};function Qi(t){return"string"==typeof t||!Ti(t)&&Hi(t)&&vn(t)==A}function Ji(t){return"symbol"==o(t)||Hi(t)&&vn(t)==E}var ta=oe?je(oe):function(t){return Hi(t)&&Yi(t.length)&&!!Wt[vn(t)]};var ea=Mr(kn),ua=Mr((function(t,e){return t<=e}));function na(t){if(!t)return[];if(Ii(t))return Qi(t)?Ge(t):gr(t);if(Qt&&t[Qt])return function(t){for(var e,u=[];!(e=t.next()).done;)u.push(e.value);return u}(t[Qt]());var e=ro(t);return(e==y?Ne:e==C?qe:Sa)(t)}function ra(t){return t?(t=aa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function oa(t){var e=ra(t),u=e%1;return e==e?u?e-u:e:0}function ia(t){return t?Vu(oa(t),0,4294967295):0}function aa(t){if("number"==typeof t)return t;if(Ji(t))return NaN;if(qi(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=qi(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Se(t);var u=it.test(t);return u||ct.test(t)?qt(t.slice(2),u?2:8):ot.test(t)?NaN:+t}function ca(t){return Cr(t,ba(t))}function sa(t){return null==t?"":Jn(t)}var fa=Er((function(t,e){if(po(e)||Ii(e))Cr(e,Ea(e),t);else for(var u in e)mt.call(e,u)&&Yu(t,u,e[u])})),la=Er((function(t,e){Cr(e,ba(e),t)})),ha=Er((function(t,e,u,n){Cr(e,ba(e),t,n)})),pa=Er((function(t,e,u,n){Cr(e,Ea(e),t,n)})),Da=Hr(Ku);var va=Ln((function(t,e){t=vt(t);var u=-1,n=e.length,r=n>2?e[2]:void 0;for(r&&so(e[0],e[1],r)&&(n=1);++u<n;)for(var o=e[u],i=ba(o),a=-1,c=i.length;++a<c;){var s=i[a],f=t[s];(void 0===f||Si(f,At[s])&&!mt.call(t,s))&&(t[s]=o[s])}return t})),ya=Ln((function(t){return t.push(void 0,Xr),ie(Fa,void 0,t)}));function da(t,e,u){var n=null==t?void 0:pn(t,e);return void 0===n?u:n}function _a(t,e){return null!=t&&oo(t,e,_n)}var ga=Sr((function(t,e,u){null!=e&&"function"!=typeof e.toString&&(e=wt.call(e)),t[e]=u}),qa(Ga)),Ca=Sr((function(t,e,u){null!=e&&"function"!=typeof e.toString&&(e=wt.call(e)),mt.call(t,e)?t[e].push(u):t[e]=[u]}),Qr),Aa=Ln(Cn);function Ea(t){return Ii(t)?Uu(t):Bn(t)}function ba(t){return Ii(t)?Uu(t,!0):wn(t)}var ma=Er((function(t,e,u){jn(t,e,u)})),Fa=Er((function(t,e,u,n){jn(t,e,u,n)})),Ba=Hr((function(t,e){var u={};if(null==t)return u;var n=!1;e=De(e,(function(e){return e=sr(e,t),n||(n=e.length>1),e})),Cr(t,Gr(t),u),n&&(u=Zu(u,7,Yr));for(var r=e.length;r--;)er(u,e[r]);return u}));var wa=Hr((function(t,e){return null==t?{}:function(t,e){return Tn(t,e,(function(e,u){return _a(t,u)}))}(t,e)}));function ka(t,e){if(null==t)return{};var u=De(Gr(t),(function(t){return[t]}));return e=Qr(e),Tn(t,u,(function(t,u){return e(t,u[0])}))}var xa=Lr(Ea),Oa=Lr(ba);function Sa(t){return null==t?[]:Pe(t,Ea(t))}var ja=Br((function(t,e,u){return e=e.toLowerCase(),t+(u?Pa(e):e)}));function Pa(t){return Wa(sa(t).toLowerCase())}function Ra(t){return(t=sa(t))&&t.replace(ft,ze).replace(Rt,"")}var Ta=Br((function(t,e,u){return t+(u?"-":"")+e.toLowerCase()})),Ma=Br((function(t,e,u){return t+(u?" ":"")+e.toLowerCase()})),Ia=Fr("toLowerCase");var za=Br((function(t,e,u){return t+(u?"_":"")+e.toLowerCase()}));var Ua=Br((function(t,e,u){return t+(u?" ":"")+Wa(e)}));var La=Br((function(t,e,u){return t+(u?" ":"")+e.toUpperCase()})),Wa=Fr("toUpperCase");function Na(t,e,u){return t=sa(t),void 0===(e=u?void 0:e)?function(t){return zt.test(t)}(t)?function(t){return t.match(Mt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Xa=Ln((function(t,e){try{return ie(t,void 0,e)}catch(t){return Wi(t)?t:new V(t)}})),Ya=Hr((function(t,e){return ce(e,(function(e){e=ko(e),Gu(t,e,Ci(t[e],t))})),t}));function qa(t){return function(){return t}}var Ha=xr(),$a=xr(!0);function Ga(t){return t}function Ka(t){return Fn("function"==typeof t?t:Zu(t,1))}var Va=Ln((function(t,e){return function(u){return Cn(u,t,e)}})),Za=Ln((function(t,e){return function(u){return Cn(t,u,e)}}));function Qa(t,e,u){var n=Ea(e),r=hn(e,n);null!=u||qi(e)&&(r.length||!n.length)||(u=e,e=t,t=this,r=hn(e,Ea(e)));var o=!(qi(u)&&"chain"in u&&!u.chain),i=Ni(t);return ce(r,(function(u){var n=e[u];t[u]=n,i&&(t.prototype[u]=function(){var e=this.__chain__;if(o||e){var u=t(this.__wrapped__),r=u.__actions__=gr(this.__actions__);return r.push({func:n,args:arguments,thisArg:t}),u.__chain__=e,u}return n.apply(t,ve([this.value()],arguments))})})),t}function Ja(){}var tc=Pr(De),ec=Pr(fe),uc=Pr(_e);function nc(t){return fo(t)?Be(ko(t)):function(t){return function(e){return pn(e,t)}}(t)}var rc=Tr(),oc=Tr(!0);function ic(){return[]}function ac(){return!1}var cc=jr((function(t,e){return t+e}),0),sc=zr("ceil"),fc=jr((function(t,e){return t/e}),1),lc=zr("floor");var hc,pc=jr((function(t,e){return t*e}),1),Dc=zr("round"),vc=jr((function(t,e){return t-e}),0);return xu.after=function(t,e){if("function"!=typeof e)throw new _t(i);return t=oa(t),function(){if(--t<1)return e.apply(this,arguments)}},xu.ary=_i,xu.assign=fa,xu.assignIn=la,xu.assignInWith=ha,xu.assignWith=pa,xu.at=Da,xu.before=gi,xu.bind=Ci,xu.bindAll=Ya,xu.bindKey=Ai,xu.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ti(t)?t:[t]},xu.chain=ni,xu.chunk=function(t,e,u){e=(u?so(t,e,u):void 0===e)?1:au(oa(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var o=0,i=0,a=n(tu(r/e));o<r;)a[i++]=$n(t,o,o+=e);return a},xu.compact=function(t){for(var e=-1,u=null==t?0:t.length,n=0,r=[];++e<u;){var o=t[e];o&&(r[n++]=o)}return r},xu.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),u=arguments[0],r=t;r--;)e[r-1]=arguments[r];return ve(Ti(u)?gr(u):[u],an(e,1))},xu.cond=function(t){var e=null==t?0:t.length,u=Qr();return t=e?De(t,(function(t){if("function"!=typeof t[1])throw new _t(i);return[u(t[0]),t[1]]})):[],Ln((function(u){for(var n=-1;++n<e;){var r=t[n];if(ie(r[0],this,u))return ie(r[1],this,u)}}))},xu.conforms=function(t){return function(t){var e=Ea(t);return function(u){return Qu(u,t,e)}}(Zu(t,1))},xu.constant=qa,xu.countBy=ii,xu.create=function(t,e){var u=Ou(t);return null==e?u:$u(u,e)},xu.curry=function t(e,u,n){var r=Wr(e,8,void 0,void 0,void 0,void 0,void 0,u=n?void 0:u);return r.placeholder=t.placeholder,r},xu.curryRight=function t(e,u,n){var r=Wr(e,16,void 0,void 0,void 0,void 0,void 0,u=n?void 0:u);return r.placeholder=t.placeholder,r},xu.debounce=Ei,xu.defaults=va,xu.defaultsDeep=ya,xu.defer=bi,xu.delay=mi,xu.difference=So,xu.differenceBy=jo,xu.differenceWith=Po,xu.drop=function(t,e,u){var n=null==t?0:t.length;return n?$n(t,(e=u||void 0===e?1:oa(e))<0?0:e,n):[]},xu.dropRight=function(t,e,u){var n=null==t?0:t.length;return n?$n(t,0,(e=n-(e=u||void 0===e?1:oa(e)))<0?0:e):[]},xu.dropRightWhile=function(t,e){return t&&t.length?nr(t,Qr(e,3),!0,!0):[]},xu.dropWhile=function(t,e){return t&&t.length?nr(t,Qr(e,3),!0):[]},xu.fill=function(t,e,u,n){var r=null==t?0:t.length;return r?(u&&"number"!=typeof u&&so(t,e,u)&&(u=0,n=r),function(t,e,u,n){var r=t.length;for((u=oa(u))<0&&(u=-u>r?0:r+u),(n=void 0===n||n>r?r:oa(n))<0&&(n+=r),n=u>n?0:ia(n);u<n;)t[u++]=e;return t}(t,e,u,n)):[]},xu.filter=function(t,e){return(Ti(t)?le:on)(t,Qr(e,3))},xu.flatMap=function(t,e){return an(Di(t,e),1)},xu.flatMapDeep=function(t,e){return an(Di(t,e),1/0)},xu.flatMapDepth=function(t,e,u){return u=void 0===u?1:oa(u),an(Di(t,e),u)},xu.flatten=Mo,xu.flattenDeep=function(t){return(null==t?0:t.length)?an(t,1/0):[]},xu.flattenDepth=function(t,e){return(null==t?0:t.length)?an(t,e=void 0===e?1:oa(e)):[]},xu.flip=function(t){return Wr(t,512)},xu.flow=Ha,xu.flowRight=$a,xu.fromPairs=function(t){for(var e=-1,u=null==t?0:t.length,n={};++e<u;){var r=t[e];n[r[0]]=r[1]}return n},xu.functions=function(t){return null==t?[]:hn(t,Ea(t))},xu.functionsIn=function(t){return null==t?[]:hn(t,ba(t))},xu.groupBy=li,xu.initial=function(t){return(null==t?0:t.length)?$n(t,0,-1):[]},xu.intersection=zo,xu.intersectionBy=Uo,xu.intersectionWith=Lo,xu.invert=ga,xu.invertBy=Ca,xu.invokeMap=hi,xu.iteratee=Ka,xu.keyBy=pi,xu.keys=Ea,xu.keysIn=ba,xu.map=Di,xu.mapKeys=function(t,e){var u={};return e=Qr(e,3),fn(t,(function(t,n,r){Gu(u,e(t,n,r),t)})),u},xu.mapValues=function(t,e){var u={};return e=Qr(e,3),fn(t,(function(t,n,r){Gu(u,n,e(t,n,r))})),u},xu.matches=function(t){return On(Zu(t,1))},xu.matchesProperty=function(t,e){return Sn(t,Zu(e,1))},xu.memoize=Fi,xu.merge=ma,xu.mergeWith=Fa,xu.method=Va,xu.methodOf=Za,xu.mixin=Qa,xu.negate=Bi,xu.nthArg=function(t){return t=oa(t),Ln((function(e){return Pn(e,t)}))},xu.omit=Ba,xu.omitBy=function(t,e){return ka(t,Bi(Qr(e)))},xu.once=function(t){return gi(2,t)},xu.orderBy=function(t,e,u,n){return null==t?[]:(Ti(e)||(e=null==e?[]:[e]),Ti(u=n?void 0:u)||(u=null==u?[]:[u]),Rn(t,e,u))},xu.over=tc,xu.overArgs=wi,xu.overEvery=ec,xu.overSome=uc,xu.partial=ki,xu.partialRight=xi,xu.partition=vi,xu.pick=wa,xu.pickBy=ka,xu.property=nc,xu.propertyOf=function(t){return function(e){return null==t?void 0:pn(t,e)}},xu.pull=No,xu.pullAll=Xo,xu.pullAllBy=function(t,e,u){return t&&t.length&&e&&e.length?Mn(t,e,Qr(u,2)):t},xu.pullAllWith=function(t,e,u){return t&&t.length&&e&&e.length?Mn(t,e,void 0,u):t},xu.pullAt=Yo,xu.range=rc,xu.rangeRight=oc,xu.rearg=Oi,xu.reject=function(t,e){return(Ti(t)?le:on)(t,Bi(Qr(e,3)))},xu.remove=function(t,e){var u=[];if(!t||!t.length)return u;var n=-1,r=[],o=t.length;for(e=Qr(e,3);++n<o;){var i=t[n];e(i,n,t)&&(u.push(i),r.push(n))}return In(t,r),u},xu.rest=function(t,e){if("function"!=typeof t)throw new _t(i);return Ln(t,e=void 0===e?e:oa(e))},xu.reverse=qo,xu.sampleSize=function(t,e,u){return e=(u?so(t,e,u):void 0===e)?1:oa(e),(Ti(t)?Wu:Nn)(t,e)},xu.set=function(t,e,u){return null==t?t:Xn(t,e,u)},xu.setWith=function(t,e,u,n){return n="function"==typeof n?n:void 0,null==t?t:Xn(t,e,u,n)},xu.shuffle=function(t){return(Ti(t)?Nu:Hn)(t)},xu.slice=function(t,e,u){var n=null==t?0:t.length;return n?(u&&"number"!=typeof u&&so(t,e,u)?(e=0,u=n):(e=null==e?0:oa(e),u=void 0===u?n:oa(u)),$n(t,e,u)):[]},xu.sortBy=yi,xu.sortedUniq=function(t){return t&&t.length?Zn(t):[]},xu.sortedUniqBy=function(t,e){return t&&t.length?Zn(t,Qr(e,2)):[]},xu.split=function(t,e,u){return u&&"number"!=typeof u&&so(t,e,u)&&(e=u=void 0),(u=void 0===u?4294967295:u>>>0)?(t=sa(t))&&("string"==typeof e||null!=e&&!Vi(e))&&!(e=Jn(e))&&We(t)?lr(Ge(t),0,u):t.split(e,u):[]},xu.spread=function(t,e){if("function"!=typeof t)throw new _t(i);return e=null==e?0:au(oa(e),0),Ln((function(u){var n=u[e],r=lr(u,0,e);return n&&ve(r,n),ie(t,this,r)}))},xu.tail=function(t){var e=null==t?0:t.length;return e?$n(t,1,e):[]},xu.take=function(t,e,u){return t&&t.length?$n(t,0,(e=u||void 0===e?1:oa(e))<0?0:e):[]},xu.takeRight=function(t,e,u){var n=null==t?0:t.length;return n?$n(t,(e=n-(e=u||void 0===e?1:oa(e)))<0?0:e,n):[]},xu.takeRightWhile=function(t,e){return t&&t.length?nr(t,Qr(e,3),!1,!0):[]},xu.takeWhile=function(t,e){return t&&t.length?nr(t,Qr(e,3)):[]},xu.tap=function(t,e){return e(t),t},xu.throttle=function(t,e,u){var n=!0,r=!0;if("function"!=typeof t)throw new _t(i);return qi(u)&&(n="leading"in u?!!u.leading:n,r="trailing"in u?!!u.trailing:r),Ei(t,e,{leading:n,maxWait:e,trailing:r})},xu.thru=ri,xu.toArray=na,xu.toPairs=xa,xu.toPairsIn=Oa,xu.toPath=function(t){return Ti(t)?De(t,ko):Ji(t)?[t]:gr(wo(sa(t)))},xu.toPlainObject=ca,xu.transform=function(t,e,u){var n=Ti(t),r=n||Ui(t)||ta(t);if(e=Qr(e,4),null==u){var o=t&&t.constructor;u=r?n?new o:[]:qi(t)&&Ni(o)?Ou(Xt(t)):{}}return(r?ce:fn)(t,(function(t,n,r){return e(u,t,n,r)})),u},xu.unary=function(t){return _i(t,1)},xu.union=Ho,xu.unionBy=$o,xu.unionWith=Go,xu.uniq=function(t){return t&&t.length?tr(t):[]},xu.uniqBy=function(t,e){return t&&t.length?tr(t,Qr(e,2)):[]},xu.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?tr(t,void 0,e):[]},xu.unset=function(t,e){return null==t||er(t,e)},xu.unzip=Ko,xu.unzipWith=Vo,xu.update=function(t,e,u){return null==t?t:ur(t,e,cr(u))},xu.updateWith=function(t,e,u,n){return n="function"==typeof n?n:void 0,null==t?t:ur(t,e,cr(u),n)},xu.values=Sa,xu.valuesIn=function(t){return null==t?[]:Pe(t,ba(t))},xu.without=Zo,xu.words=Na,xu.wrap=function(t,e){return ki(cr(e),t)},xu.xor=Qo,xu.xorBy=Jo,xu.xorWith=ti,xu.zip=ei,xu.zipObject=function(t,e){return ir(t||[],e||[],Yu)},xu.zipObjectDeep=function(t,e){return ir(t||[],e||[],Xn)},xu.zipWith=ui,xu.entries=xa,xu.entriesIn=Oa,xu.extend=la,xu.extendWith=ha,Qa(xu,xu),xu.add=cc,xu.attempt=Xa,xu.camelCase=ja,xu.capitalize=Pa,xu.ceil=sc,xu.clamp=function(t,e,u){return void 0===u&&(u=e,e=void 0),void 0!==u&&(u=(u=aa(u))==u?u:0),void 0!==e&&(e=(e=aa(e))==e?e:0),Vu(aa(t),e,u)},xu.clone=function(t){return Zu(t,4)},xu.cloneDeep=function(t){return Zu(t,5)},xu.cloneDeepWith=function(t,e){return Zu(t,5,e="function"==typeof e?e:void 0)},xu.cloneWith=function(t,e){return Zu(t,4,e="function"==typeof e?e:void 0)},xu.conformsTo=function(t,e){return null==e||Qu(t,e,Ea(e))},xu.deburr=Ra,xu.defaultTo=function(t,e){return null==t||t!=t?e:t},xu.divide=fc,xu.endsWith=function(t,e,u){t=sa(t),e=Jn(e);var n=t.length,r=u=void 0===u?n:Vu(oa(u),0,n);return(u-=e.length)>=0&&t.slice(u,r)==e},xu.eq=Si,xu.escape=function(t){return(t=sa(t))&&L.test(t)?t.replace(z,Ue):t},xu.escapeRegExp=function(t){return(t=sa(t))&&G.test(t)?t.replace($,"\\$&"):t},xu.every=function(t,e,u){var n=Ti(t)?fe:nn;return u&&so(t,e,u)&&(e=void 0),n(t,Qr(e,3))},xu.find=ai,xu.findIndex=Ro,xu.findKey=function(t,e){return Ce(t,Qr(e,3),fn)},xu.findLast=ci,xu.findLastIndex=To,xu.findLastKey=function(t,e){return Ce(t,Qr(e,3),ln)},xu.floor=lc,xu.forEach=si,xu.forEachRight=fi,xu.forIn=function(t,e){return null==t?t:cn(t,Qr(e,3),ba)},xu.forInRight=function(t,e){return null==t?t:sn(t,Qr(e,3),ba)},xu.forOwn=function(t,e){return t&&fn(t,Qr(e,3))},xu.forOwnRight=function(t,e){return t&&ln(t,Qr(e,3))},xu.get=da,xu.gt=ji,xu.gte=Pi,xu.has=function(t,e){return null!=t&&oo(t,e,dn)},xu.hasIn=_a,xu.head=Io,xu.identity=Ga,xu.includes=function(t,e,u,n){t=Ii(t)?t:Sa(t),u=u&&!n?oa(u):0;var r=t.length;return u<0&&(u=au(r+u,0)),Qi(t)?u<=r&&t.indexOf(e,u)>-1:!!r&&Ee(t,e,u)>-1},xu.indexOf=function(t,e,u){var n=null==t?0:t.length;if(!n)return-1;var r=null==u?0:oa(u);return r<0&&(r=au(n+r,0)),Ee(t,e,r)},xu.inRange=function(t,e,u){return e=ra(e),void 0===u?(u=e,e=0):u=ra(u),function(t,e,u){return t>=cu(e,u)&&t<au(e,u)}(t=aa(t),e,u)},xu.invoke=Aa,xu.isArguments=Ri,xu.isArray=Ti,xu.isArrayBuffer=Mi,xu.isArrayLike=Ii,xu.isArrayLikeObject=zi,xu.isBoolean=function(t){return!0===t||!1===t||Hi(t)&&vn(t)==l},xu.isBuffer=Ui,xu.isDate=Li,xu.isElement=function(t){return Hi(t)&&1===t.nodeType&&!Ki(t)},xu.isEmpty=function(t){if(null==t)return!0;if(Ii(t)&&(Ti(t)||"string"==typeof t||"function"==typeof t.splice||Ui(t)||ta(t)||Ri(t)))return!t.length;var e=ro(t);if(e==y||e==C)return!t.size;if(po(t))return!Bn(t).length;for(var u in t)if(mt.call(t,u))return!1;return!0},xu.isEqual=function(t,e){return En(t,e)},xu.isEqualWith=function(t,e,u){var n=(u="function"==typeof u?u:void 0)?u(t,e):void 0;return void 0===n?En(t,e,void 0,u):!!n},xu.isError=Wi,xu.isFinite=function(t){return"number"==typeof t&&ru(t)},xu.isFunction=Ni,xu.isInteger=Xi,xu.isLength=Yi,xu.isMap=$i,xu.isMatch=function(t,e){return t===e||bn(t,e,to(e))},xu.isMatchWith=function(t,e,u){return u="function"==typeof u?u:void 0,bn(t,e,to(e),u)},xu.isNaN=function(t){return Gi(t)&&t!=+t},xu.isNative=function(t){if(ho(t))throw new V("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return mn(t)},xu.isNil=function(t){return null==t},xu.isNull=function(t){return null===t},xu.isNumber=Gi,xu.isObject=qi,xu.isObjectLike=Hi,xu.isPlainObject=Ki,xu.isRegExp=Vi,xu.isSafeInteger=function(t){return Xi(t)&&t>=-9007199254740991&&t<=9007199254740991},xu.isSet=Zi,xu.isString=Qi,xu.isSymbol=Ji,xu.isTypedArray=ta,xu.isUndefined=function(t){return void 0===t},xu.isWeakMap=function(t){return Hi(t)&&ro(t)==b},xu.isWeakSet=function(t){return Hi(t)&&"[object WeakSet]"==vn(t)},xu.join=function(t,e){return null==t?"":ou.call(t,e)},xu.kebabCase=Ta,xu.last=Wo,xu.lastIndexOf=function(t,e,u){var n=null==t?0:t.length;if(!n)return-1;var r=n;return void 0!==u&&(r=(r=oa(u))<0?au(n+r,0):cu(r,n-1)),e==e?function(t,e,u){for(var n=u+1;n--;)if(t[n]===e)return n;return n}(t,e,r):Ae(t,me,r,!0)},xu.lowerCase=Ma,xu.lowerFirst=Ia,xu.lt=ea,xu.lte=ua,xu.max=function(t){return t&&t.length?rn(t,Ga,yn):void 0},xu.maxBy=function(t,e){return t&&t.length?rn(t,Qr(e,2),yn):void 0},xu.mean=function(t){return Fe(t,Ga)},xu.meanBy=function(t,e){return Fe(t,Qr(e,2))},xu.min=function(t){return t&&t.length?rn(t,Ga,kn):void 0},xu.minBy=function(t,e){return t&&t.length?rn(t,Qr(e,2),kn):void 0},xu.stubArray=ic,xu.stubFalse=ac,xu.stubObject=function(){return{}},xu.stubString=function(){return""},xu.stubTrue=function(){return!0},xu.multiply=pc,xu.nth=function(t,e){return t&&t.length?Pn(t,oa(e)):void 0},xu.noConflict=function(){return Gt._===this&&(Gt._=xt),this},xu.noop=Ja,xu.now=di,xu.pad=function(t,e,u){t=sa(t);var n=(e=oa(e))?$e(t):0;if(!e||n>=e)return t;var r=(e-n)/2;return Rr(eu(r),u)+t+Rr(tu(r),u)},xu.padEnd=function(t,e,u){t=sa(t);var n=(e=oa(e))?$e(t):0;return e&&n<e?t+Rr(e-n,u):t},xu.padStart=function(t,e,u){t=sa(t);var n=(e=oa(e))?$e(t):0;return e&&n<e?Rr(e-n,u)+t:t},xu.parseInt=function(t,e,u){return u||null==e?e=0:e&&(e=+e),fu(sa(t).replace(K,""),e||0)},xu.random=function(t,e,u){if(u&&"boolean"!=typeof u&&so(t,e,u)&&(e=u=void 0),void 0===u&&("boolean"==typeof e?(u=e,e=void 0):"boolean"==typeof t&&(u=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=ra(t),void 0===e?(e=t,t=0):e=ra(e)),t>e){var n=t;t=e,e=n}if(u||t%1||e%1){var r=lu();return cu(t+r*(e-t+Yt("1e-"+((r+"").length-1))),e)}return zn(t,e)},xu.reduce=function(t,e,u){var n=Ti(t)?ye:ke,r=arguments.length<3;return n(t,Qr(e,4),u,r,en)},xu.reduceRight=function(t,e,u){var n=Ti(t)?de:ke,r=arguments.length<3;return n(t,Qr(e,4),u,r,un)},xu.repeat=function(t,e,u){return e=(u?so(t,e,u):void 0===e)?1:oa(e),Un(sa(t),e)},xu.replace=function(){var t=arguments,e=sa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},xu.result=function(t,e,u){var n=-1,r=(e=sr(e,t)).length;for(r||(r=1,t=void 0);++n<r;){var o=null==t?void 0:t[ko(e[n])];void 0===o&&(n=r,o=u),t=Ni(o)?o.call(t):o}return t},xu.round=Dc,xu.runInContext=t,xu.sample=function(t){return(Ti(t)?Lu:Wn)(t)},xu.size=function(t){if(null==t)return 0;if(Ii(t))return Qi(t)?$e(t):t.length;var e=ro(t);return e==y||e==C?t.size:Bn(t).length},xu.snakeCase=za,xu.some=function(t,e,u){var n=Ti(t)?_e:Gn;return u&&so(t,e,u)&&(e=void 0),n(t,Qr(e,3))},xu.sortedIndex=function(t,e){return Kn(t,e)},xu.sortedIndexBy=function(t,e,u){return Vn(t,e,Qr(u,2))},xu.sortedIndexOf=function(t,e){var u=null==t?0:t.length;if(u){var n=Kn(t,e);if(n<u&&Si(t[n],e))return n}return-1},xu.sortedLastIndex=function(t,e){return Kn(t,e,!0)},xu.sortedLastIndexBy=function(t,e,u){return Vn(t,e,Qr(u,2),!0)},xu.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var u=Kn(t,e,!0)-1;if(Si(t[u],e))return u}return-1},xu.startCase=Ua,xu.startsWith=function(t,e,u){return t=sa(t),u=null==u?0:Vu(oa(u),0,t.length),e=Jn(e),t.slice(u,u+e.length)==e},xu.subtract=vc,xu.sum=function(t){return t&&t.length?xe(t,Ga):0},xu.sumBy=function(t,e){return t&&t.length?xe(t,Qr(e,2)):0},xu.template=function(t,e,u){var n=xu.templateSettings;u&&so(t,e,u)&&(e=void 0),t=sa(t),e=ha({},e,n,Nr);var r,o,i=ha({},e.imports,n.imports,Nr),a=Ea(i),c=Pe(i,a),s=0,f=e.interpolate||lt,l="__p += '",h=yt((e.escape||lt).source+"|"+f.source+"|"+(f===X?nt:lt).source+"|"+(e.evaluate||lt).source+"|$","g"),p="//# sourceURL="+(mt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Lt+"]")+"\n";t.replace(h,(function(e,u,n,i,a,c){return n||(n=i),l+=t.slice(s,c).replace(ht,Le),u&&(r=!0,l+="' +\n__e("+u+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),n&&(l+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),s=c+e.length,e})),l+="';\n";var D=mt.call(e,"variable")&&e.variable;if(D){if(et.test(D))throw new V("Invalid `variable` option passed into `_.template`")}else l="with (obj) {\n"+l+"\n}\n";l=(o?l.replace(R,""):l).replace(T,"$1").replace(M,"$1;"),l="function("+(D||"obj")+") {\n"+(D?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=Xa((function(){return pt(a,p+"return "+l).apply(void 0,c)}));if(v.source=l,Wi(v))throw v;return v},xu.times=function(t,e){if((t=oa(t))<1||t>9007199254740991)return[];var u=4294967295,n=cu(t,4294967295);t-=4294967295;for(var r=Oe(n,e=Qr(e));++u<t;)e(u);return r},xu.toFinite=ra,xu.toInteger=oa,xu.toLength=ia,xu.toLower=function(t){return sa(t).toLowerCase()},xu.toNumber=aa,xu.toSafeInteger=function(t){return t?Vu(oa(t),-9007199254740991,9007199254740991):0===t?t:0},xu.toString=sa,xu.toUpper=function(t){return sa(t).toUpperCase()},xu.trim=function(t,e,u){if((t=sa(t))&&(u||void 0===e))return Se(t);if(!t||!(e=Jn(e)))return t;var n=Ge(t),r=Ge(e);return lr(n,Te(n,r),Me(n,r)+1).join("")},xu.trimEnd=function(t,e,u){if((t=sa(t))&&(u||void 0===e))return t.slice(0,Ke(t)+1);if(!t||!(e=Jn(e)))return t;var n=Ge(t);return lr(n,0,Me(n,Ge(e))+1).join("")},xu.trimStart=function(t,e,u){if((t=sa(t))&&(u||void 0===e))return t.replace(K,"");if(!t||!(e=Jn(e)))return t;var n=Ge(t);return lr(n,Te(n,Ge(e))).join("")},xu.truncate=function(t,e){var u=30,n="...";if(qi(e)){var r="separator"in e?e.separator:r;u="length"in e?oa(e.length):u,n="omission"in e?Jn(e.omission):n}var o=(t=sa(t)).length;if(We(t)){var i=Ge(t);o=i.length}if(u>=o)return t;var a=u-$e(n);if(a<1)return n;var c=i?lr(i,0,a).join(""):t.slice(0,a);if(void 0===r)return c+n;if(i&&(a+=c.length-a),Vi(r)){if(t.slice(a).search(r)){var s,f=c;for(r.global||(r=yt(r.source,sa(rt.exec(r))+"g")),r.lastIndex=0;s=r.exec(f);)var l=s.index;c=c.slice(0,void 0===l?a:l)}}else if(t.indexOf(Jn(r),a)!=a){var h=c.lastIndexOf(r);h>-1&&(c=c.slice(0,h))}return c+n},xu.unescape=function(t){return(t=sa(t))&&U.test(t)?t.replace(I,Ve):t},xu.uniqueId=function(t){var e=++Ft;return sa(t)+e},xu.upperCase=La,xu.upperFirst=Wa,xu.each=si,xu.eachRight=fi,xu.first=Io,Qa(xu,(hc={},fn(xu,(function(t,e){mt.call(xu.prototype,e)||(hc[e]=t)})),hc),{chain:!1}),xu.VERSION="4.17.21",ce(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){xu[t].placeholder=xu})),ce(["drop","take"],(function(t,e){Pu.prototype[t]=function(u){u=void 0===u?1:au(oa(u),0);var n=this.__filtered__&&!e?new Pu(this):this.clone();return n.__filtered__?n.__takeCount__=cu(u,n.__takeCount__):n.__views__.push({size:cu(u,4294967295),type:t+(n.__dir__<0?"Right":"")}),n},Pu.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ce(["filter","map","takeWhile"],(function(t,e){var u=e+1,n=1==u||3==u;Pu.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Qr(t,3),type:u}),e.__filtered__=e.__filtered__||n,e}})),ce(["head","last"],(function(t,e){var u="take"+(e?"Right":"");Pu.prototype[t]=function(){return this[u](1).value()[0]}})),ce(["initial","tail"],(function(t,e){var u="drop"+(e?"":"Right");Pu.prototype[t]=function(){return this.__filtered__?new Pu(this):this[u](1)}})),Pu.prototype.compact=function(){return this.filter(Ga)},Pu.prototype.find=function(t){return this.filter(t).head()},Pu.prototype.findLast=function(t){return this.reverse().find(t)},Pu.prototype.invokeMap=Ln((function(t,e){return"function"==typeof t?new Pu(this):this.map((function(u){return Cn(u,t,e)}))})),Pu.prototype.reject=function(t){return this.filter(Bi(Qr(t)))},Pu.prototype.slice=function(t,e){t=oa(t);var u=this;return u.__filtered__&&(t>0||e<0)?new Pu(u):(t<0?u=u.takeRight(-t):t&&(u=u.drop(t)),void 0!==e&&(u=(e=oa(e))<0?u.dropRight(-e):u.take(e-t)),u)},Pu.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pu.prototype.toArray=function(){return this.take(4294967295)},fn(Pu.prototype,(function(t,e){var u=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),r=xu[n?"take"+("last"==e?"Right":""):e],o=n||/^find/.test(e);r&&(xu.prototype[e]=function(){var e=this.__wrapped__,i=n?[1]:arguments,a=e instanceof Pu,c=i[0],s=a||Ti(e),f=function(t){var e=r.apply(xu,ve([t],i));return n&&l?e[0]:e};s&&u&&"function"==typeof c&&1!=c.length&&(a=s=!1);var l=this.__chain__,h=!!this.__actions__.length,p=o&&!l,D=a&&!h;if(!o&&s){e=D?e:new Pu(this);var v=t.apply(e,i);return v.__actions__.push({func:ri,args:[f],thisArg:void 0}),new ju(v,l)}return p&&D?t.apply(this,i):(v=this.thru(f),p?n?v.value()[0]:v.value():v)})})),ce(["pop","push","shift","sort","splice","unshift"],(function(t){var e=gt[t],u=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);xu.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var r=this.value();return e.apply(Ti(r)?r:[],t)}return this[u]((function(u){return e.apply(Ti(u)?u:[],t)}))}})),fn(Pu.prototype,(function(t,e){var u=xu[e];if(u){var n=u.name+"";mt.call(Cu,n)||(Cu[n]=[]),Cu[n].push({name:e,func:u})}})),Cu[Or(void 0,2).name]=[{name:"wrapper",func:void 0}],Pu.prototype.clone=function(){var t=new Pu(this.__wrapped__);return t.__actions__=gr(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=gr(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=gr(this.__views__),t},Pu.prototype.reverse=function(){if(this.__filtered__){var t=new Pu(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pu.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,u=Ti(t),n=e<0,r=u?t.length:0,o=function(t,e,u){var n=-1,r=u.length;for(;++n<r;){var o=u[n],i=o.size;switch(o.type){case"drop":t+=i;break;case"dropRight":e-=i;break;case"take":e=cu(e,t+i);break;case"takeRight":t=au(t,e-i)}}return{start:t,end:e}}(0,r,this.__views__),i=o.start,a=o.end,c=a-i,s=n?a:i-1,f=this.__iteratees__,l=f.length,h=0,p=cu(c,this.__takeCount__);if(!u||!n&&r==c&&p==c)return rr(t,this.__actions__);var D=[];t:for(;c--&&h<p;){for(var v=-1,y=t[s+=e];++v<l;){var d=f[v],_=d.iteratee,g=d.type,C=_(y);if(2==g)y=C;else if(!C){if(1==g)continue t;break t}}D[h++]=y}return D},xu.prototype.at=oi,xu.prototype.chain=function(){return ni(this)},xu.prototype.commit=function(){return new ju(this.value(),this.__chain__)},xu.prototype.next=function(){void 0===this.__values__&&(this.__values__=na(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},xu.prototype.plant=function(t){for(var e,u=this;u instanceof Su;){var n=Oo(u);n.__index__=0,n.__values__=void 0,e?r.__wrapped__=n:e=n;var r=n;u=u.__wrapped__}return r.__wrapped__=t,e},xu.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pu){var e=t;return this.__actions__.length&&(e=new Pu(this)),(e=e.reverse()).__actions__.push({func:ri,args:[qo],thisArg:void 0}),new ju(e,this.__chain__)}return this.thru(qo)},xu.prototype.toJSON=xu.prototype.valueOf=xu.prototype.value=function(){return rr(this.__wrapped__,this.__actions__)},xu.prototype.first=xu.prototype.head,Qt&&(xu.prototype[Qt]=function(){return this}),xu}();"object"==o(u(6))&&u(6)?(Gt._=Ze,void 0===(r=function(){return Ze}.call(e,u,e,n))||(n.exports=r)):Vt?((Vt.exports=Ze)._=Ze,Kt._=Ze):Gt._=Ze}).call(this)}).call(this,u(8),u(9)(t))},function(t,e,u){"use strict";(function(t){u.d(e,"a",(function(){return v}));var n=u(3),r=u(2);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return a(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return a(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function c(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e,u){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,u){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=p(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(u):r.value}})(t,e,u||t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=p(t);if(e){var r=p(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return h(this,u)}}function h(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function p(t){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function D(t){var e=r.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}var v=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(a,e);var u,n,r,o=l(a);function a(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this))._offset=[0,0],t._cursor=[-1,-1],t._lastColor="",t}return u=a,(n=[{key:"schedule",value:function(t){setTimeout(t,1e3/60)}},{key:"setOptions",value:function(t){s(p(a.prototype),"setOptions",this).call(this,t);var e=[t.width,t.height],u=this.computeSize();this._offset=u.map((function(t,u){return Math.floor((t-e[u])/2)}))}},{key:"clear",value:function(){var e;t.stdout.write((e=this._options.bg,"[0;48;5;".concat(D(e),"m[2J")))}},{key:"draw",value:function(e,u){var n=i(e,5),r=n[0],o=n[1],a=n[2],c=n[3],s=n[4],f=this._offset[0]+r,l=this._offset[1]+o,h=this.computeSize();if(!(f<0||f>=h[0])&&!(l<0||l>=h[1])&&(f===this._cursor[0]&&l===this._cursor[1]||(t.stdout.write(function(t,e){return"[".concat(e+1,";").concat(t+1,"H")}(f,l)),this._cursor[0]=f,this._cursor[1]=l),u&&(a||(a=" ")),a)){var p=function(t,e){return"[0;38;5;".concat(D(t),";48;5;").concat(D(e),"m")}(c,s);if(p!==this._lastColor&&(t.stdout.write(p),this._lastColor=p),"\t"!=a){var v=[].concat(a);t.stdout.write(v[0])}this._cursor[0]++,this._cursor[0]>=h[0]&&(this._cursor[0]=0,this._cursor[1]++)}}},{key:"computeFontSize",value:function(){throw new Error("Terminal backend has no notion of font size")}},{key:"eventToPosition",value:function(t,e){return[t,e]}},{key:"computeSize",value:function(){return[t.stdout.columns,t.stdout.rows]}}])&&c(u.prototype,n),r&&c(u,r),a}(n.a)}).call(this,u(7))},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e){var u,n,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(u===setTimeout)return setTimeout(t,0);if((u===o||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}!function(){try{u="function"==typeof setTimeout?setTimeout:o}catch(t){u=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(t){n=i}}();var c,s=[],f=!1,l=-1;function h(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&p())}function p(){if(!f){var t=a(h);f=!0;for(var e=s.length;e;){for(c=s,s=[];++l<e;)c&&c[l].run();l=-1,e=s.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function D(t,e){this.fun=t,this.array=e}function v(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)e[u-1]=arguments[u];s.push(new D(t,e)),1!==s.length||f||a(p)},D.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e){function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":u(window))&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,u){"use strict";u.r(e),u.d(e,"gameState",(function(){return Hr})),u.d(e,"previousGameState",(function(){return $r})),u.d(e,"SetQueuedAbility",(function(){return Vr})),u.d(e,"SetQueuedEntity",(function(){return Zr})),u.d(e,"targetEntity",(function(){return Qr})),u.d(e,"CurrrentActivePlayer",(function(){return Jr})),u.d(e,"ExamineTargetEnable",(function(){return co})),u.d(e,"ExamineTargetDisable",(function(){return so})),u.d(e,"setupTestFight",(function(){return po}));var n={};u.r(n),u.d(n,"TYPE_TEXT",(function(){return ft})),u.d(n,"TYPE_NEWLINE",(function(){return lt})),u.d(n,"TYPE_FG",(function(){return ht})),u.d(n,"TYPE_BG",(function(){return pt})),u.d(n,"measure",(function(){return Dt})),u.d(n,"tokenize",(function(){return vt}));var r=u(0),o=u(3);function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function c(t,e,u){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,u){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(u):r.value}})(t,e,u||t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=h(t);if(e){var r=h(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return l(this,u)}}function l(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var p=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(o,t);var e,u,n,r=f(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._ctx=document.createElement("canvas").getContext("2d"),t}return e=o,(u=[{key:"schedule",value:function(t){requestAnimationFrame(t)}},{key:"getContainer",value:function(){return this._ctx.canvas}},{key:"setOptions",value:function(t){c(h(o.prototype),"setOptions",this).call(this,t);var e=t.fontStyle?"".concat(t.fontStyle," "):"",u="".concat(e," ").concat(t.fontSize,"px ").concat(t.fontFamily);this._ctx.font=u,this._updateSize(),this._ctx.font=u,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}},{key:"clear",value:function(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}},{key:"eventToPosition",value:function(t,e){var u=this._ctx.canvas,n=u.getBoundingClientRect();return t-=n.left,e-=n.top,t*=u.width/n.width,e*=u.height/n.height,t<0||e<0||t>=u.width||e>=u.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}])&&a(e.prototype,u),n&&a(e,n),o}(o.a),D=u(1);function v(t){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return d(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return d(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function _(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e){return(g=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function C(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=E(t);if(e){var r=E(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return A(this,u)}}function A(t,e){return!e||"object"!==v(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function E(t){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var b=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&g(t,e)}(o,t);var e,u,n,r=C(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._spacingX=0,t._spacingY=0,t._hexSize=0,t}return e=o,(u=[{key:"draw",value:function(t,e){var u=y(t,5),n=u[0],r=u[1],o=u[2],i=u[3],a=u[4],c=[(n+1)*this._spacingX,r*this._spacingY+this._hexSize];if(this._options.transpose&&c.reverse(),e&&(this._ctx.fillStyle=a,this._fill(c[0],c[1])),o){this._ctx.fillStyle=i;for(var s=[].concat(o),f=0;f<s.length;f++)this._ctx.fillText(s[f],c[0],Math.ceil(c[1]))}}},{key:"computeSize",value:function(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}},{key:"computeFontSize",value:function(t,e){this._options.transpose&&(t+=e,t-=e=t-e);var u=2*t/((this._options.width+1)*Math.sqrt(3))-1,n=e/(2+1.5*(this._options.height-1)),r=Math.min(u,n),o=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var i=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=o;var a=i/100,c=2*(r=Math.floor(r)+1)/(this._options.spacing*(1+a/Math.sqrt(3)));return Math.ceil(c)-1}},{key:"_normalizedEventToPosition",value:function(t,e){var u;this._options.transpose?(t+=e,t-=e=t-e,u=this._ctx.canvas.width):u=this._ctx.canvas.height;var n=u/this._options.height;return e=Math.floor(e/n),Object(D.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}},{key:"_fill",value:function(t,e){var u=this._hexSize,n=this._options.border,r=this._ctx;r.beginPath(),this._options.transpose?(r.moveTo(t-u+n,e),r.lineTo(t-u/2+n,e+this._spacingX-n),r.lineTo(t+u/2-n,e+this._spacingX-n),r.lineTo(t+u-n,e),r.lineTo(t+u/2-n,e-this._spacingX+n),r.lineTo(t-u/2+n,e-this._spacingX+n),r.lineTo(t-u+n,e)):(r.moveTo(t,e-u+n),r.lineTo(t+this._spacingX-n,e-u/2+n),r.lineTo(t+this._spacingX-n,e+u/2-n),r.lineTo(t,e+u-n),r.lineTo(t-this._spacingX+n,e+u/2-n),r.lineTo(t-this._spacingX+n,e-u/2+n),r.lineTo(t,e-u+n)),r.fill()}},{key:"_updateSize",value:function(){var t,e,u=this._options,n=Math.ceil(this._ctx.measureText("W").width);this._hexSize=Math.floor(u.spacing*(u.fontSize+n/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,u.transpose?(t="height",e="width"):(t="width",e="height"),this._ctx.canvas[t]=Math.ceil((u.width+1)*this._spacingX),this._ctx.canvas[e]=Math.ceil((u.height-1)*this._spacingY+2*this._hexSize)}}])&&_(e.prototype,u),n&&_(e,n),o}(p);function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function F(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return B(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return B(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function w(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function k(t,e,u){return(k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,u){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=j(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(u):r.value}})(t,e,u||t)}function x(t,e){return(x=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function O(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=j(t);if(e){var r=j(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return S(this,u)}}function S(t,e){return!e||"object"!==m(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function j(t){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var P,R=((P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&x(t,e)}(o,t);var e,u,n,r=O(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._spacingX=0,t._spacingY=0,t._canvasCache={},t}return e=o,(u=[{key:"setOptions",value:function(t){k(j(o.prototype),"setOptions",this).call(this,t),this._canvasCache={}}},{key:"draw",value:function(t,e){o.cache?this._drawWithCache(t):this._drawNoCache(t,e)}},{key:"_drawWithCache",value:function(t){var e,u=F(t,5),n=u[0],r=u[1],o=u[2],i=u[3],a=u[4],c=""+o+i+a;if(c in this._canvasCache)e=this._canvasCache[c];else{var s=this._options.border,f=(e=document.createElement("canvas")).getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,f.fillStyle=a,f.fillRect(s,s,e.width-s,e.height-s),o){f.fillStyle=i,f.font=this._ctx.font,f.textAlign="center",f.textBaseline="middle";for(var l=[].concat(o),h=0;h<l.length;h++)f.fillText(l[h],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[c]=e}this._ctx.drawImage(e,n*this._spacingX,r*this._spacingY)}},{key:"_drawNoCache",value:function(t,e){var u=F(t,5),n=u[0],r=u[1],o=u[2],i=u[3],a=u[4];if(e){var c=this._options.border;this._ctx.fillStyle=a,this._ctx.fillRect(n*this._spacingX+c,r*this._spacingY+c,this._spacingX-c,this._spacingY-c)}if(o){this._ctx.fillStyle=i;for(var s=[].concat(o),f=0;f<s.length;f++)this._ctx.fillText(s[f],(n+.5)*this._spacingX,Math.ceil((r+.5)*this._spacingY))}}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}},{key:"computeFontSize",value:function(t,e){var u=Math.floor(t/this._options.width),n=Math.floor(e/this._options.height),r=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;var o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=r;var i=o/100*n/u;return i>1&&(n=Math.floor(n/i)),Math.floor(n/this._options.spacing)}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}},{key:"_updateSize",value:function(){var t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}])&&w(e.prototype,u),n&&w(e,n),o}(p)).cache=!1,P);function T(t){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function M(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return I(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return I(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function z(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function U(t,e){return(U=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function L(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=N(t);if(e){var r=N(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return W(this,u)}}function W(t,e){return!e||"object"!==T(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function N(t){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var X=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&U(t,e)}(o,t);var e,u,n,r=L(o);function o(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._colorCanvas=document.createElement("canvas"),t}return e=o,(u=[{key:"draw",value:function(t,e){var u=M(t,5),n=u[0],r=u[1],o=u[2],i=u[3],a=u[4],c=this._options.tileWidth,s=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(n*c,r*s,c,s):(this._ctx.fillStyle=a,this._ctx.fillRect(n*c,r*s,c,s))),o)for(var f=[].concat(o),l=[].concat(i),h=[].concat(a),p=0;p<f.length;p++){var D=this._options.tileMap[f[p]];if(!D)throw new Error('Char "'.concat(f[p],'" not found in tileMap'));if(this._options.tileColorize){var v=this._colorCanvas,y=v.getContext("2d");y.globalCompositeOperation="source-over",y.clearRect(0,0,c,s);var d=l[p],_=h[p];y.drawImage(this._options.tileSet,D[0],D[1],c,s,0,0,c,s),"transparent"!=d&&(y.fillStyle=d,y.globalCompositeOperation="source-atop",y.fillRect(0,0,c,s)),"transparent"!=_&&(y.fillStyle=_,y.globalCompositeOperation="destination-over",y.fillRect(0,0,c,s)),this._ctx.drawImage(v,n*c,r*s,c,s)}else this._ctx.drawImage(this._options.tileSet,D[0],D[1],c,s,n*c,r*s,c,s)}}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}])&&z(e.prototype,u),n&&z(e,n),o}(p),Y=u(2);function q(t){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function H(t){return function(t){if(Array.isArray(t))return K(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||G(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||G(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function G(t,e){if(t){if("string"==typeof t)return K(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);return"Object"===u&&t.constructor&&(u=t.constructor.name),"Map"===u||"Set"===u?Array.from(t):"Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u)?K(t,e):void 0}}function K(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function V(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Z(t,e,u){return(Z="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,u){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=et(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(u):r.value}})(t,e,u||t)}function Q(t,e){return(Q=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function J(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=et(t);if(e){var r=et(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return tt(this,u)}}function tt(t,e){return!e||"object"!==q(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function et(t){return(et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ut=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Q(t,e)}(o,t);var e,u,n,r=J(o);function o(){var t;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(t=r.call(this))._uniforms={};try{t._gl=t._initWebGL()}catch(t){alert(t.message)}return t}return e=o,n=[{key:"isSupported",value:function(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}}],(u=[{key:"schedule",value:function(t){requestAnimationFrame(t)}},{key:"getContainer",value:function(){return this._gl.canvas}},{key:"setOptions",value:function(t){var e=this;Z(et(o.prototype),"setOptions",this).call(this,t),this._updateSize();var u=this._options.tileSet;u&&"complete"in u&&!u.complete?u.addEventListener("load",(function(){return e._updateTexture(u)})):this._updateTexture(u)}},{key:"draw",value:function(t,e){var u=this._gl,n=this._options,r=$(t,5),o=r[0],i=r[1],a=r[2],c=r[3],s=r[4],f=u.canvas.height-(i+1)*n.tileHeight;if(u.scissor(o*n.tileWidth,f,n.tileWidth,n.tileHeight),e&&(n.tileColorize?u.clearColor(0,0,0,0):u.clearColor.apply(u,H(at(s))),u.clear(u.COLOR_BUFFER_BIT)),a){var l=[].concat(a),h=[].concat(s),p=[].concat(c);u.uniform2fv(this._uniforms.targetPosRel,[o,i]);for(var D=0;D<l.length;D++){var v=this._options.tileMap[l[D]];if(!v)throw new Error('Char "'.concat(l[D],'" not found in tileMap'));u.uniform1f(this._uniforms.colorize,n.tileColorize?1:0),u.uniform2fv(this._uniforms.tilesetPosAbs,v),n.tileColorize&&(u.uniform4fv(this._uniforms.tint,at(p[D])),u.uniform4fv(this._uniforms.bg,at(h[D]))),u.drawArrays(u.TRIANGLE_STRIP,0,4)}}}},{key:"clear",value:function(){var t=this._gl;t.clearColor.apply(t,H(at(this._options.bg))),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}},{key:"computeSize",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"computeFontSize",value:function(){throw new Error("Tile backend does not understand font size")}},{key:"eventToPosition",value:function(t,e){var u=this._gl.canvas,n=u.getBoundingClientRect();return t-=n.left,e-=n.top,t*=u.width/n.width,e*=u.height/n.height,t<0||e<0||t>=u.width||e>=u.height?[-1,-1]:this._normalizedEventToPosition(t,e)}},{key:"_initWebGL",value:function(){var t=this,e=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=e;var u=function(t,e,u){var n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(n)||"");var r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,u),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"");var o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o)||"");return o}(e,rt,ot);return e.useProgram(u),function(t){var e=new Float32Array([0,0,1,0,0,1,1,1]),u=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(e),nt.forEach((function(n){return t._uniforms[n]=e.getUniformLocation(u,n)})),this._program=u,e.enable(e.BLEND),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA),e.enable(e.SCISSOR_TEST),e}},{key:"_normalizedEventToPosition",value:function(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}},{key:"_updateSize",value:function(){var t=this._gl,e=this._options,u=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=u[0],t.canvas.height=u[1],t.viewport(0,0,u[0],u[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,u)}},{key:"_updateTexture",value:function(t){var e,u,n;e=this._gl,u=t,n=e.createTexture(),e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,u)}}])&&V(e.prototype,u),n&&V(e,n),o}(o.a),nt=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],rt="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),ot="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();var it={};function at(t){if(!(t in it)){var e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(var u=0;u<3;u++)e[u]=e[u]/255}else(e=Y.fromString(t).map((function(t){return t/255}))).push(1);it[t]=e}return it[t]}var ct=u(5),st=/%([bc]){([^}]*)}/g,ft=0,lt=1,ht=2,pt=3;function Dt(t,e){for(var u={width:0,height:1},n=vt(t,e),r=0,o=0;o<n.length;o++){var i=n[o];switch(i.type){case ft:r+=i.value.length;break;case lt:u.height++,u.width=Math.max(u.width,r),r=0}}return u.width=Math.max(u.width,r),u}function vt(t,e){var u=[],n=0;t.replace(st,(function(e,r,o,i){var a=t.substring(n,i);return a.length&&u.push({type:ft,value:a}),u.push({type:"c"==r?ht:pt,value:o.trim()}),n=i+e.length,""}));var r=t.substring(n);return r.length&&u.push({type:ft,value:r}),function(t,e){e||(e=1/0);var u=0,n=0,r=-1;for(;u<t.length;){var o=t[u];if(o.type==lt&&(n=0,r=-1),o.type==ft){for(;0==n&&" "==o.value.charAt(0);)o.value=o.value.substring(1);var i=o.value.indexOf("\n");if(-1!=i){o.value=yt(t,u,i,!0);for(var a=o.value.split("");a.length&&" "==a[a.length-1];)a.pop();o.value=a.join("")}if(o.value.length){if(n+o.value.length>e){for(var c=-1;;){var s=o.value.indexOf(" ",c+1);if(-1==s)break;if(n+s>e)break;c=s}if(-1!=c)o.value=yt(t,u,c,!0);else if(-1!=r){var f=t[r],l=f.value.lastIndexOf(" ");f.value=yt(t,r,l,!0),u=r}else o.value=yt(t,u,e-n,!1)}else n+=o.value.length,-1!=o.value.indexOf(" ")&&(r=u);u++}else t.splice(u,1)}else u++}t.push({type:lt});for(var h=null,p=0;p<t.length;p++){var D=t[p];switch(D.type){case ft:h=D;break;case lt:if(h){for(var v=h.value.split("");v.length&&" "==v[v.length-1];)v.pop();h.value=v.join("")}h=null}}return t.pop(),t}(u,e)}function yt(t,e,u,n){var r={type:lt},o={type:ft,value:t[e].value.substring(u+(n?1:0))};return t.splice(e+1,0,r,o),t[e].value.substring(0,u)}var dt={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]};function _t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function gt(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Ct,At={hex:b,rect:R,tile:X,"tile-gl":ut,term:ct.a},Et={width:80,height:25,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1},bt=((Ct=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_t(this,t),this._data={},this._dirty=!1,this._options={},e=Object.assign({},Et,e),this.setOptions(e),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}var e,u,n;return e=t,(u=[{key:"DEBUG",value:function(t,e,u){var n=[this._options.bg,this._options.fg];this.draw(t,e,null,null,n[u%n.length])}},{key:"clear",value:function(){this._data={},this._dirty=!0}},{key:"setOptions",value:function(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){var e=At[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}},{key:"getOptions",value:function(){return this._options}},{key:"getContainer",value:function(){return this._backend.getContainer()}},{key:"computeSize",value:function(t,e){return this._backend.computeSize(t,e)}},{key:"computeFontSize",value:function(t,e){return this._backend.computeFontSize(t,e)}},{key:"computeTileSize",value:function(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}},{key:"eventToPosition",value:function(t){var e,u;return"touches"in t?(e=t.touches[0].clientX,u=t.touches[0].clientY):(e=t.clientX,u=t.clientY),this._backend.eventToPosition(e,u)}},{key:"draw",value:function(t,e,u,n,r){n||(n=this._options.fg),r||(r=this._options.bg);var o="".concat(t,",").concat(e);this._data[o]=[t,e,u,n,r],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[o]=!0)}},{key:"drawText",value:function(t,e,u,n){var r=null,o=null,i=t,a=e,c=1;n||(n=this._options.width-t);for(var s=vt(u,n);s.length;){var f=s.shift();switch(f.type){case ft:for(var l=!1,h=!1,p=!1,D=!1,v=0;v<f.value.length;v++){var y=f.value.charCodeAt(v),d=f.value.charAt(v);if("term"===this._options.layout){var _=y>>8;if(17===_||_>=46&&_<=159||_>=172&&_<=215||y>=43360&&y<=43391){this.draw(i+0,a,d,r,o),this.draw(i+1,a,"\t",r,o),i+=2;continue}}p=y>65280&&y<65377||y>65500&&y<65512||y>65518,l=32==d.charCodeAt(0)||12288==d.charCodeAt(0),!D||p||l||i++,p&&!h&&i++,this.draw(i++,a,d,r,o),h=l,D=p}break;case ht:r=f.value||null;break;case pt:o=f.value||null;break;case lt:i=t,a++,c++}}return c}},{key:"_tick",value:function(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty)for(var t in this._backend.clear(),this._data)this._draw(t,!1);else for(var e in this._dirty)this._draw(e,!0);this._dirty=!1}}},{key:"_draw",value:function(t,e){var u=this._data[t];u[4]!=this._options.bg&&(e=!0),this._backend.draw(u,e)}}])&&gt(e.prototype,u),n&&gt(e,n),t}()).Rect=R,Ct.Hex=b,Ct.Tile=X,Ct.TileGL=ut,Ct.Term=ct.a,Ct);function mt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ft(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var Bt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:80,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:25;mt(this,t),this._width=e,this._height=u}var e,u,n;return e=t,(u=[{key:"_fillMap",value:function(t){for(var e=[],u=0;u<this._width;u++){e.push([]);for(var n=0;n<this._height;n++)e[u].push(t)}return e}}])&&Ft(e.prototype,u),n&&Ft(e,n),t}();function wt(t){return(wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function kt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function xt(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Ot(t,e){return(Ot=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function St(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Pt(t);if(e){var r=Pt(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return jt(this,u)}}function jt(t,e){return!e||"object"!==wt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Pt(t){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Rt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ot(t,e)}(o,t);var e,u,n,r=St(o);function o(){return kt(this,o),r.apply(this,arguments)}return e=o,(u=[{key:"create",value:function(t){for(var e=this._width-1,u=this._height-1,n=0;n<=e;n++)for(var r=0;r<=u;r++)t(n,r,n&&r&&n<e&&r<u?0:1);return this}}])&&xt(e.prototype,u),n&&xt(e,n),o}(Bt);function Tt(t){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mt(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function It(t,e){return(It=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function zt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Lt(t);if(e){var r=Lt(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Ut(this,u)}}function Ut(t,e){return!e||"object"!==Tt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Lt(t){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Wt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&It(t,e)}(o,t);var e,u,n,r=zt(o);function o(t,e){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(u=r.call(this,t,e))._rooms=[],u._corridors=[],u}return e=o,(u=[{key:"getRooms",value:function(){return this._rooms}},{key:"getCorridors",value:function(){return this._corridors}}])&&Mt(e.prototype,u),n&&Mt(e,n),o}(Bt);function Nt(t){return(Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xt(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Yt(t,e,u){return e&&Xt(t.prototype,e),u&&Xt(t,u),t}function qt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ht(t,e)}function Ht(t,e){return(Ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $t(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Kt(t);if(e){var r=Kt(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Gt(this,u)}}function Gt(t,e){return!e||"object"!==Nt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Kt(t){return(Kt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Vt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Zt=function t(){Vt(this,t)},Qt=function(t){qt(u,t);var e=$t(u);function u(t,n,r,o,i,a){var c;return Vt(this,u),(c=e.call(this))._x1=t,c._y1=n,c._x2=r,c._y2=o,c._doors={},void 0!==i&&void 0!==a&&c.addDoor(i,a),c}return Yt(u,[{key:"addDoor",value:function(t,e){return this._doors[t+","+e]=1,this}},{key:"getDoors",value:function(t){for(var e in this._doors){var u=e.split(",");t(parseInt(u[0]),parseInt(u[1]))}return this}},{key:"clearDoors",value:function(){return this._doors={},this}},{key:"addDoors",value:function(t){for(var e=this._x1-1,u=this._x2+1,n=this._y1-1,r=this._y2+1,o=e;o<=u;o++)for(var i=n;i<=r;i++)o!=e&&o!=u&&i!=n&&i!=r||t(o,i)||this.addDoor(o,i);return this}},{key:"debug",value:function(){console.log("room",this._x1,this._y1,this._x2,this._y2)}},{key:"isValid",value:function(t,e){for(var u=this._x1-1,n=this._x2+1,r=this._y1-1,o=this._y2+1,i=u;i<=n;i++)for(var a=r;a<=o;a++)if(i==u||i==n||a==r||a==o){if(!t(i,a))return!1}else if(!e(i,a))return!1;return!0}},{key:"create",value:function(t){for(var e=this._x1-1,u=this._x2+1,n=this._y1-1,r=this._y2+1,o=e;o<=u;o++)for(var i=n;i<=r;i++)t(o,i,o+","+i in this._doors?2:o==e||o==u||i==n||i==r?1:0)}},{key:"getCenter",value:function(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}},{key:"getLeft",value:function(){return this._x1}},{key:"getRight",value:function(){return this._x2}},{key:"getTop",value:function(){return this._y1}},{key:"getBottom",value:function(){return this._y2}}],[{key:"createRandomAt",value:function(t,e,u,n,o){var i=o.roomWidth[0],a=o.roomWidth[1],c=r.a.getUniformInt(i,a);i=o.roomHeight[0],a=o.roomHeight[1];var s=r.a.getUniformInt(i,a);if(1==u){var f=e-Math.floor(r.a.getUniform()*s);return new this(t+1,f,t+c,f+s-1,t,e)}if(-1==u){var l=e-Math.floor(r.a.getUniform()*s);return new this(t-c,l,t-1,l+s-1,t,e)}if(1==n){var h=t-Math.floor(r.a.getUniform()*c);return new this(h,e+1,h+c-1,e+s,t,e)}if(-1==n){var p=t-Math.floor(r.a.getUniform()*c);return new this(p,e-s,p+c-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}},{key:"createRandomCenter",value:function(t,e,u){var n=u.roomWidth[0],o=u.roomWidth[1],i=r.a.getUniformInt(n,o);n=u.roomHeight[0],o=u.roomHeight[1];var a=r.a.getUniformInt(n,o),c=t-Math.floor(r.a.getUniform()*i),s=e-Math.floor(r.a.getUniform()*a);return new this(c,s,c+i-1,s+a-1)}},{key:"createRandom",value:function(t,e,u){var n=u.roomWidth[0],o=u.roomWidth[1],i=r.a.getUniformInt(n,o);n=u.roomHeight[0],o=u.roomHeight[1];var a=r.a.getUniformInt(n,o),c=t-i-1,s=e-a-1,f=1+Math.floor(r.a.getUniform()*c),l=1+Math.floor(r.a.getUniform()*s);return new this(f,l,f+i-1,l+a-1)}}]),u}(Zt),Jt=function(t){qt(u,t);var e=$t(u);function u(t,n,r,o){var i;return Vt(this,u),(i=e.call(this))._startX=t,i._startY=n,i._endX=r,i._endY=o,i._endsWithAWall=!0,i}return Yt(u,[{key:"debug",value:function(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}},{key:"isValid",value:function(t,e){var u=this._startX,n=this._startY,r=this._endX-u,o=this._endY-n,i=1+Math.max(Math.abs(r),Math.abs(o));r&&(r/=Math.abs(r)),o&&(o/=Math.abs(o));for(var a=o,c=-r,s=!0,f=0;f<i;f++){var l=u+f*r,h=n+f*o;if(e(l,h)||(s=!1),t(l+a,h+c)||(s=!1),t(l-a,h-c)||(s=!1),!s){i=f,this._endX=l-r,this._endY=h-o;break}}if(0==i)return!1;if(1==i&&t(this._endX+r,this._endY+o))return!1;var p=!t(this._endX+r+a,this._endY+o+c),D=!t(this._endX+r-a,this._endY+o-c);return this._endsWithAWall=t(this._endX+r,this._endY+o),!p&&!D||!this._endsWithAWall}},{key:"create",value:function(t){var e=this._startX,u=this._startY,n=this._endX-e,r=this._endY-u,o=1+Math.max(Math.abs(n),Math.abs(r));n&&(n/=Math.abs(n)),r&&(r/=Math.abs(r));for(var i=0;i<o;i++){t(e+i*n,u+i*r,0)}return!0}},{key:"createPriorityWalls",value:function(t){if(this._endsWithAWall){var e=this._startX,u=this._startY,n=this._endX-e,r=this._endY-u;n&&(n/=Math.abs(n)),r&&(r/=Math.abs(r));var o=r,i=-n;t(this._endX+n,this._endY+r),t(this._endX+o,this._endY+i),t(this._endX-o,this._endY-i)}}}],[{key:"createRandomAt",value:function(t,e,u,n,o){var i=o.corridorLength[0],a=o.corridorLength[1],c=r.a.getUniformInt(i,a);return new this(t,e,t+u*c,e+n*c)}}]),u}(Zt);function te(t){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ee(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ue(t,e){return(ue=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ne(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=ie(t);if(e){var r=ie(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return re(this,u)}}function re(t,e){return!e||"object"!==te(e)&&"function"!=typeof e?oe(t):e}function oe(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ie(t){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ae=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ue(t,e)}(i,t);var e,u,n,o=ne(i);function i(t,e,u){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this,t,e))._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(n._options,u),n._map=[],n._dug=0,n._roomAttempts=20,n._corridorAttempts=20,n._connected=[],n._unconnected=[],n._digCallback=n._digCallback.bind(oe(n)),n._canBeDugCallback=n._canBeDugCallback.bind(oe(n)),n._isWallCallback=n._isWallCallback.bind(oe(n)),n}return e=i,(u=[{key:"create",value:function(t){for(var e=Date.now();;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(var u=0;u<this._width;u++)for(var n=0;n<this._height;n++)t(u,n,this._map[u][n]);return this}},{key:"_generateRooms",value:function(){var t,e=this._width-2,u=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*u)>this._options.roomDugPercentage)break}while(t)}},{key:"_generateRoom",value:function(){for(var t=0;t<this._roomAttempts;){t++;var e=Qt.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}},{key:"_generateCorridors",value:function(){for(var t=0;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(var e=0;e<this._rooms.length;e++){var u=this._rooms[e];u.clearDoors(),u.create(this._digCallback)}for(this._unconnected=r.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){var n=r.a.getItem(this._connected);if(!n)break;var o=this._closestRoom(this._unconnected,n);if(!o)break;var i=this._closestRoom(this._connected,o);if(!i)break;if(!this._connectRooms(o,i))break;if(!this._unconnected.length)return!0}}return!1}},{key:"_closestRoom",value:function(t,e){for(var u=1/0,n=e.getCenter(),r=null,o=0;o<t.length;o++){var i=t[o],a=i.getCenter(),c=a[0]-n[0],s=a[1]-n[1],f=c*c+s*s;f<u&&(u=f,r=i)}return r}},{key:"_connectRooms",value:function(t,e){var u,n,r,o,i,a,c,s=t.getCenter(),f=e.getCenter(),l=f[0]-s[0],h=f[1]-s[1];if(Math.abs(l)<Math.abs(h)?(o=(2+(r=h>0?2:0))%4,i=e.getLeft(),a=e.getRight(),c=0):(o=(2+(r=l>0?1:3))%4,i=e.getTop(),a=e.getBottom(),c=1),!(u=this._placeInWall(t,r)))return!1;if(u[c]>=i&&u[c]<=a){n=u.slice();var p=0;switch(o){case 0:p=e.getTop()-1;break;case 1:p=e.getRight()+1;break;case 2:p=e.getBottom()+1;break;case 3:p=e.getLeft()-1}n[(c+1)%2]=p,this._digLine([u,n])}else if(u[c]<i-1||u[c]>a+1){var D=u[c]-f[c],v=0;switch(o){case 0:case 1:v=D<0?3:1;break;case 2:case 3:v=D<0?1:3}if(o=(o+v)%4,!(n=this._placeInWall(e,o)))return!1;var y=[0,0];y[c]=u[c];var d=(c+1)%2;y[d]=n[d],this._digLine([u,y,n])}else{var _=(c+1)%2;if(!(n=this._placeInWall(e,o)))return!1;var g=Math.round((n[_]+u[_])/2),C=[0,0],A=[0,0];C[c]=u[c],C[_]=g,A[c]=n[c],A[_]=g,this._digLine([u,C,A,n])}return t.addDoor(u[0],u[1]),e.addDoor(n[0],n[1]),-1!=(c=this._unconnected.indexOf(t))&&(this._unconnected.splice(c,1),this._connected.push(t)),-1!=(c=this._unconnected.indexOf(e))&&(this._unconnected.splice(c,1),this._connected.push(e)),!0}},{key:"_placeInWall",value:function(t,e){var u=[0,0],n=[0,0],o=0;switch(e){case 0:n=[1,0],u=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:n=[0,1],u=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:n=[1,0],u=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:n=[0,1],u=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}for(var i=[],a=-2,c=0;c<o;c++){var s=u[0]+c*n[0],f=u[1]+c*n[1];i.push(null),1==this._map[s][f]?a!=c-1&&(i[c]=[s,f]):(a=c,c&&(i[c-1]=null))}for(var l=i.length-1;l>=0;l--)i[l]||i.splice(l,1);return i.length?r.a.getItem(i):null}},{key:"_digLine",value:function(t){for(var e=1;e<t.length;e++){var u=t[e-1],n=t[e],r=new Jt(u[0],u[1],n[0],n[1]);r.create(this._digCallback),this._corridors.push(r)}}},{key:"_digCallback",value:function(t,e,u){this._map[t][e]=u,0==u&&this._dug++}},{key:"_isWallCallback",value:function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}},{key:"_canBeDugCallback",value:function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}}])&&ee(e.prototype,u),n&&ee(e,n),i}(Wt);function ce(t){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function se(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fe(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function le(t,e){return(le=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function he(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=De(t);if(e){var r=De(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return pe(this,u)}}function pe(t,e){return!e||"object"!==ce(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function De(t){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ve(t){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ye(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function de(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _e(t,e){return(_e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ge(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Ee(t);if(e){var r=Ee(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Ce(this,u)}}function Ce(t,e){return!e||"object"!==ve(e)&&"function"!=typeof e?Ae(t):e}function Ae(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ee(t){return(Ee=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var be={room:Qt,corridor:Jt};function me(t){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Be(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function we(t,e){return(we=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ke(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Oe(t);if(e){var r=Oe(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return xe(this,u)}}function xe(t,e){return!e||"object"!==me(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Oe(t){return(Oe=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Se(t,e,u){u[e[t+1]]=u[t],e[u[t]]=e[t+1],u[t]=t+1,e[t+1]=t}function je(t,e,u){u[e[t]]=u[t],e[u[t]]=e[t],u[t]=t,e[t]=t}function Pe(t){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Re(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Te(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Me(t,e){return(Me=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ie(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Ue(t);if(e){var r=Ue(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return ze(this,u)}}function ze(t,e){return!e||"object"!==Pe(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ue(t){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Le(t){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function We(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ne(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Xe(t,e){return(Xe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ye(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=He(t);if(e){var r=He(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return qe(this,u)}}function qe(t,e){return!e||"object"!==Le(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function He(t){return(He=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function $e(t){return($e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ge(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Ke(t,e){return(Ke=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ve(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=Qe(t);if(e){var r=Qe(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Ze(this,u)}}function Ze(t,e){return!e||"object"!==$e(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Qe(t){return(Qe=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Je={Arena:Rt,Uniform:ae,Cellular:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&le(t,e)}(i,t);var e,u,n,o=he(i);function i(t,e){var u,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return se(this,i),(u=o.call(this,t,e))._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},u.setOptions(n),u._dirs=dt[u._options.topology],u._map=u._fillMap(0),u}return e=i,(u=[{key:"randomize",value:function(t){for(var e=0;e<this._width;e++)for(var u=0;u<this._height;u++)this._map[e][u]=r.a.getUniform()<t?1:0;return this}},{key:"setOptions",value:function(t){Object.assign(this._options,t)}},{key:"set",value:function(t,e,u){this._map[t][e]=u}},{key:"create",value:function(t){for(var e=this._fillMap(0),u=this._options.born,n=this._options.survive,r=0;r<this._height;r++){var o=1,i=0;6==this._options.topology&&(o=2,i=r%2);for(var a=i;a<this._width;a+=o){var c=this._map[a][r],s=this._getNeighbors(a,r);c&&-1!=n.indexOf(s)?e[a][r]=1:c||-1==u.indexOf(s)||(e[a][r]=1)}}this._map=e,t&&this._serviceCallback(t)}},{key:"_serviceCallback",value:function(t){for(var e=0;e<this._height;e++){var u=1,n=0;6==this._options.topology&&(u=2,n=e%2);for(var r=n;r<this._width;r+=u)t(r,e,this._map[r][e])}}},{key:"_getNeighbors",value:function(t,e){for(var u=0,n=0;n<this._dirs.length;n++){var r=this._dirs[n],o=t+r[0],i=e+r[1];o<0||o>=this._width||i<0||i>=this._height||(u+=1==this._map[o][i]?1:0)}return u}},{key:"connect",value:function(t,e,u){e||(e=0);var n=[],o={},i=1,a=[0,0];6==this._options.topology&&(i=2,a=[0,1]);for(var c=0;c<this._height;c++)for(var s=a[c%2];s<this._width;s+=i)if(this._freeSpace(s,c,e)){var f=[s,c];o[this._pointKey(f)]=f,n.push([s,c])}var l=n[r.a.getUniformInt(0,n.length-1)],h=this._pointKey(l),p={};for(p[h]=l,delete o[h],this._findConnected(p,o,[l],!1,e);Object.keys(o).length>0;){var D=this._getFromTo(p,o),v=D[0],y=D[1],d={};d[this._pointKey(v)]=v,this._findConnected(d,o,[v],!0,e);var _=6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected;for(var g in _.call(this,y,v,p,o,e,u),d){var C=d[g];this._map[C[0]][C[1]]=e,p[g]=C,delete o[g]}}t&&this._serviceCallback(t)}},{key:"_getFromTo",value:function(t,e){for(var u=[0,0],n=[0,0],o=Object.keys(t),i=Object.keys(e),a=0;a<5;a++){if(o.length<i.length){var c=o;n=t[c[r.a.getUniformInt(0,c.length-1)]],u=this._getClosest(n,e)}else{var s=i;u=e[s[r.a.getUniformInt(0,s.length-1)]],n=this._getClosest(u,t)}if((u[0]-n[0])*(u[0]-n[0])+(u[1]-n[1])*(u[1]-n[1])<64)break}return[u,n]}},{key:"_getClosest",value:function(t,e){var u=null,n=null;for(var r in e){var o=e[r],i=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==n||i<n)&&(n=i,u=o)}return u}},{key:"_findConnected",value:function(t,e,u,n,r){for(;u.length>0;){var o=u.splice(0,1)[0],i=void 0;i=6==this._options.topology?[[o[0]+2,o[1]],[o[0]+1,o[1]-1],[o[0]-1,o[1]-1],[o[0]-2,o[1]],[o[0]-1,o[1]+1],[o[0]+1,o[1]+1]]:[[o[0]+1,o[1]],[o[0]-1,o[1]],[o[0],o[1]+1],[o[0],o[1]-1]];for(var a=0;a<i.length;a++){var c=this._pointKey(i[a]);null==t[c]&&this._freeSpace(i[a][0],i[a][1],r)&&(t[c]=i[a],n||delete e[c],u.push(i[a]))}}}},{key:"_tunnelToConnected",value:function(t,e,u,n,r,o){var i,a;e[0]<t[0]?(i=e,a=t):(i=t,a=e);for(var c=i[0];c<=a[0];c++){this._map[c][i[1]]=r;var s=[c,i[1]],f=this._pointKey(s);u[f]=s,delete n[f]}o&&i[0]<a[0]&&o(i,[a[0],i[1]]);var l=a[0];e[1]<t[1]?(i=e,a=t):(i=t,a=e);for(var h=i[1];h<a[1];h++){this._map[l][h]=r;var p=[l,h],D=this._pointKey(p);u[D]=p,delete n[D]}o&&i[1]<a[1]&&o([a[0],i[1]],[a[0],a[1]])}},{key:"_tunnelToConnected6",value:function(t,e,u,n,r,o){var i,a;e[0]<t[0]?(i=e,a=t):(i=t,a=e);for(var c=i[0],s=i[1];c!=a[0]||s!=a[1];){var f=2;s<a[1]?(s++,f=1):s>a[1]&&(s--,f=1),c<a[0]?c+=f:c>a[0]||a[1]%2?c-=f:c+=f,this._map[c][s]=r;var l=[c,s],h=this._pointKey(l);u[h]=l,delete n[h]}o&&o(e,t)}},{key:"_freeSpace",value:function(t,e,u){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==u}},{key:"_pointKey",value:function(t){return t[0]+"."+t[1]}}])&&fe(e.prototype,u),n&&fe(e,n),i}(Bt),Digger:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_e(t,e)}(i,t);var e,u,n,o=ge(i);function i(t,e){var u,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return ye(this,i),(u=o.call(this,t,e))._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},n),u._features={room:4,corridor:4},u._map=[],u._featureAttempts=20,u._walls={},u._dug=0,u._digCallback=u._digCallback.bind(Ae(u)),u._canBeDugCallback=u._canBeDugCallback.bind(Ae(u)),u._isWallCallback=u._isWallCallback.bind(Ae(u)),u._priorityWallCallback=u._priorityWallCallback.bind(Ae(u)),u}return e=i,(u=[{key:"create",value:function(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;var e=(this._width-2)*(this._height-2);this._firstRoom();var u,n=Date.now();do{if(u=0,Date.now()-n>this._options.timeLimit)break;var r=this._findWall();if(!r)break;var o=r.split(","),i=parseInt(o[0]),a=parseInt(o[1]),c=this._getDiggingDirection(i,a);if(c){var s=0;do{if(s++,this._tryFeature(i,a,c[0],c[1])){this._removeSurroundingWalls(i,a),this._removeSurroundingWalls(i-c[0],a-c[1]);break}}while(s<this._featureAttempts);for(var f in this._walls)this._walls[f]>1&&u++}}while(this._dug/e<this._options.dugPercentage||u);if(this._addDoors(),t)for(var l=0;l<this._width;l++)for(var h=0;h<this._height;h++)t(l,h,this._map[l][h]);return this._walls={},this._map=[],this}},{key:"_digCallback",value:function(t,e,u){0==u||2==u?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}},{key:"_isWallCallback",value:function(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}},{key:"_canBeDugCallback",value:function(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},{key:"_priorityWallCallback",value:function(t,e){this._walls[t+","+e]=2}},{key:"_firstRoom",value:function(){var t=Math.floor(this._width/2),e=Math.floor(this._height/2),u=Qt.createRandomCenter(t,e,this._options);this._rooms.push(u),u.create(this._digCallback)}},{key:"_findWall",value:function(){var t=[],e=[];for(var u in this._walls)2==this._walls[u]?e.push(u):t.push(u);var n=e.length?e:t;if(!n.length)return null;var o=r.a.getItem(n.sort());return delete this._walls[o],o}},{key:"_tryFeature",value:function(t,e,u,n){var o=r.a.getWeightedValue(this._features),i=be[o].createRandomAt(t,e,u,n,this._options);return!!i.isValid(this._isWallCallback,this._canBeDugCallback)&&(i.create(this._digCallback),i instanceof Qt&&this._rooms.push(i),i instanceof Jt&&(i.createPriorityWalls(this._priorityWallCallback),this._corridors.push(i)),!0)}},{key:"_removeSurroundingWalls",value:function(t,e){for(var u=dt[4],n=0;n<u.length;n++){var r=u[n],o=t+r[0],i=e+r[1];delete this._walls[o+","+i],o=t+2*r[0],i=e+2*r[1],delete this._walls[o+","+i]}}},{key:"_getDiggingDirection",value:function(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;for(var u=null,n=dt[4],r=0;r<n.length;r++){var o=n[r],i=t+o[0],a=e+o[1];if(!this._map[i][a]){if(u)return null;u=o}}return u?[-u[0],-u[1]]:null}},{key:"_addDoors",value:function(){var t=this._map;function e(e,u){return 1==t[e][u]}for(var u=0;u<this._rooms.length;u++){var n=this._rooms[u];n.clearDoors(),n.addDoors(e)}}}])&&de(e.prototype,u),n&&de(e,n),i}(Wt),EllerMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&we(t,e)}(i,t);var e,u,n,o=ke(i);function i(){return Fe(this,i),o.apply(this,arguments)}return e=i,(u=[{key:"create",value:function(t){for(var e,u=this._fillMap(1),n=Math.ceil((this._width-2)/2),o=[],i=[],a=0;a<n;a++)o.push(a),i.push(a);for(o.push(n-1),e=1;e+3<this._height;e+=2)for(var c=0;c<n;c++){var s=2*c+1,f=e;u[s][f]=0,c!=o[c+1]&&r.a.getUniform()>9/24&&(Se(c,o,i),u[s+1][f]=0),c!=o[c]&&r.a.getUniform()>9/24?je(c,o,i):u[s][f+1]=0}for(var l=0;l<n;l++){var h=2*l+1,p=e;u[h][p]=0,l!=o[l+1]&&(l==o[l]||r.a.getUniform()>9/24)&&(Se(l,o,i),u[h+1][p]=0),je(l,o,i)}for(var D=0;D<this._width;D++)for(var v=0;v<this._height;v++)t(D,v,u[D][v]);return this}}])&&Be(e.prototype,u),n&&Be(e,n),i}(Bt),DividedMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Me(t,e)}(i,t);var e,u,n,o=Ie(i);function i(){var t;return Re(this,i),(t=o.apply(this,arguments))._stack=[],t._map=[],t}return e=i,(u=[{key:"create",value:function(t){var e=this._width,u=this._height;this._map=[];for(var n=0;n<e;n++){this._map.push([]);for(var r=0;r<u;r++){var o=0==n||0==r||n+1==e||r+1==u;this._map[n].push(o?1:0)}}this._stack=[[1,1,e-2,u-2]],this._process();for(var i=0;i<e;i++)for(var a=0;a<u;a++)t(i,a,this._map[i][a]);return this._map=[],this}},{key:"_process",value:function(){for(;this._stack.length;){var t=this._stack.shift();this._partitionRoom(t)}}},{key:"_partitionRoom",value:function(t){for(var e=[],u=[],n=t[0]+1;n<t[2];n++){var o=this._map[n][t[1]-1],i=this._map[n][t[3]+1];!o||!i||n%2||e.push(n)}for(var a=t[1]+1;a<t[3];a++){var c=this._map[t[0]-1][a],s=this._map[t[2]+1][a];!c||!s||a%2||u.push(a)}if(e.length&&u.length){var f=r.a.getItem(e),l=r.a.getItem(u);this._map[f][l]=1;var h=[],p=[];h.push(p);for(var D=t[0];D<f;D++)this._map[D][l]=1,D%2&&p.push([D,l]);p=[],h.push(p);for(var v=f+1;v<=t[2];v++)this._map[v][l]=1,v%2&&p.push([v,l]);p=[],h.push(p);for(var y=t[1];y<l;y++)this._map[f][y]=1,y%2&&p.push([f,y]);p=[],h.push(p);for(var d=l+1;d<=t[3];d++)this._map[f][d]=1,d%2&&p.push([f,d]);for(var _=r.a.getItem(h),g=0;g<h.length;g++){var C=h[g];if(C!=_){var A=r.a.getItem(C);this._map[A[0]][A[1]]=0}}this._stack.push([t[0],t[1],f-1,l-1]),this._stack.push([f+1,t[1],t[2],l-1]),this._stack.push([t[0],l+1,f-1,t[3]]),this._stack.push([f+1,l+1,t[2],t[3]])}}}])&&Te(e.prototype,u),n&&Te(e,n),i}(Bt),IceyMaze:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xe(t,e)}(i,t);var e,u,n,o=Ye(i);function i(t,e){var u,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return We(this,i),(u=o.call(this,t,e))._regularity=n,u._map=[],u}return e=i,(u=[{key:"create",value:function(t){var e=this._width,u=this._height,n=this._fillMap(1);e-=e%2?1:2,u-=u%2?1:2;var o=0,i=0,a=0,c=0,s=0,f=!1,l=[[0,0],[0,0],[0,0],[0,0]];do{if(o=1+2*Math.floor(r.a.getUniform()*(e-1)/2),i=1+2*Math.floor(r.a.getUniform()*(u-1)/2),s||(n[o][i]=0),!n[o][i]){this._randomize(l);do{0==Math.floor(r.a.getUniform()*(this._regularity+1))&&this._randomize(l),f=!0;for(var h=0;h<4;h++)if(a=o+2*l[h][0],c=i+2*l[h][1],this._isFree(n,a,c,e,u)){n[a][c]=0,n[o+l[h][0]][i+l[h][1]]=0,o=a,i=c,f=!1,s++;break}}while(!f)}}while(s+1<e*u/4);for(var p=0;p<this._width;p++)for(var D=0;D<this._height;D++)t(p,D,n[p][D]);return this._map=[],this}},{key:"_randomize",value:function(t){for(var e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}},{key:"_isFree",value:function(t,e,u,n,r){return!(e<1||u<1||e>=n||u>=r)&&t[e][u]}}])&&Ne(e.prototype,u),n&&Ne(e,n),i}(Bt),Rogue:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ke(t,e)}(i,t);var e,u,n,o=Ve(i);function i(t,e,u){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this,t,e)).map=[],n.rooms=[],n.connectedCells=[],(u=Object.assign({cellWidth:3,cellHeight:3},u)).hasOwnProperty("roomWidth")||(u.roomWidth=n._calculateRoomSize(n._width,u.cellWidth)),u.hasOwnProperty("roomHeight")||(u.roomHeight=n._calculateRoomSize(n._height,u.cellHeight)),n._options=u,n}return e=i,(u=[{key:"create",value:function(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(var e=0;e<this._width;e++)for(var u=0;u<this._height;u++)t(e,u,this.map[e][u]);return this}},{key:"_calculateRoomSize",value:function(t,e){var u=Math.floor(t/e*.8),n=Math.floor(t/e*.25);return n<2&&(n=2),u<2&&(u=2),[n,u]}},{key:"_initRooms",value:function(){for(var t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(var e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}},{key:"_connectRooms",value:function(){var t,e,u,n,o,i,a=r.a.getUniformInt(0,this._options.cellWidth-1),c=r.a.getUniformInt(0,this._options.cellHeight-1),s=!1;do{i=[0,2,4,6],i=r.a.shuffle(i);do{if(s=!1,t=i.pop(),e=a+dt[8][t][0],u=c+dt[8][t][1],!(e<0||e>=this._options.cellWidth||u<0||u>=this._options.cellHeight)){if((n=this.rooms[a][c]).connections.length>0&&n.connections[0][0]==e&&n.connections[0][1]==u)break;0==(o=this.rooms[e][u]).connections.length&&(o.connections.push([a,c]),this.connectedCells.push([e,u]),a=e,c=u,s=!0)}}while(i.length>0&&0==s)}while(i.length>0)}},{key:"_connectUnconnectedRooms",value:function(){var t,e,u,n=this._options.cellWidth,o=this._options.cellHeight;this.connectedCells=r.a.shuffle(this.connectedCells);for(var i=0;i<this._options.cellWidth;i++)for(var a=0;a<this._options.cellHeight;a++)if(0==(t=this.rooms[i][a]).connections.length){var c=[0,2,4,6];c=r.a.shuffle(c),u=!1;do{var s=c.pop(),f=i+dt[8][s][0],l=a+dt[8][s][1];if(!(f<0||f>=n||l<0||l>=o)){if(u=!0,0==(e=this.rooms[f][l]).connections.length)break;for(var h=0;h<e.connections.length;h++)if(e.connections[h][0]==i&&e.connections[h][1]==a){u=!1;break}if(u)break}}while(c.length);u?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}},{key:"_createRandomRoomConnections",value:function(){}},{key:"_createRooms",value:function(){for(var t,e,u,n,o,i=this._width,a=this._height,c=this._options.cellWidth,s=this._options.cellHeight,f=Math.floor(this._width/c),l=Math.floor(this._height/s),h=this._options.roomWidth,p=this._options.roomHeight,D=0;D<c;D++)for(var v=0;v<s;v++){if(0==(u=f*D)&&(u=1),0==(n=l*v)&&(n=1),t=r.a.getUniformInt(h[0],h[1]),e=r.a.getUniformInt(p[0],p[1]),v>0)for(o=this.rooms[D][v-1];n-(o.y+o.height)<3;)n++;if(D>0)for(o=this.rooms[D-1][v];u-(o.x+o.width)<3;)u++;for(var y=Math.round(r.a.getUniformInt(0,f-t)/2),d=Math.round(r.a.getUniformInt(0,l-e)/2);u+y+t>=i;)y?y--:t--;for(;n+d+e>=a;)d?d--:e--;u+=y,n+=d,this.rooms[D][v].x=u,this.rooms[D][v].y=n,this.rooms[D][v].width=t,this.rooms[D][v].height=e;for(var _=u;_<u+t;_++)for(var g=n;g<n+e;g++)this.map[_][g]=0}}},{key:"_getWallPosition",value:function(t,e){var u,n,o;return 1==e||3==e?(u=r.a.getUniformInt(t.x+1,t.x+t.width-2),o=1==e?1+(n=t.y-2):(n=t.y+t.height+1)-1,this.map[u][o]=0):(n=r.a.getUniformInt(t.y+1,t.y+t.height-2),o=2==e?(u=t.x+t.width+1)-1:1+(u=t.x-2),this.map[o][n]=0),[u,n]}},{key:"_drawCorridor",value:function(t,e){var u,n,o,i,a=e[0]-t[0],c=e[1]-t[1],s=t[0],f=t[1],l=[],h=Math.abs(a),p=Math.abs(c),D=r.a.getUniform(),v=D,y=1-D;for(n=a>0?2:6,o=c>0?4:0,h<p?(u=Math.ceil(p*v),l.push([o,u]),l.push([n,h]),u=Math.floor(p*y),l.push([o,u])):(u=Math.ceil(h*v),l.push([n,u]),l.push([o,p]),u=Math.floor(h*y),l.push([n,u])),this.map[s][f]=0;l.length>0;)for(i=l.pop();i[1]>0;)s+=dt[8][i[0]][0],f+=dt[8][i[0]][1],this.map[s][f]=0,i[1]=i[1]-1}},{key:"_createCorridors",value:function(){for(var t,e,u,n,r,o=this._options.cellWidth,i=this._options.cellHeight,a=0;a<o;a++)for(var c=0;c<i;c++){t=this.rooms[a][c];for(var s=0;s<t.connections.length;s++)e=t.connections[s],(u=this.rooms[e[0]][e[1]]).cellx>t.cellx?(n=2,r=4):u.cellx<t.cellx?(n=4,r=2):u.celly>t.celly?(n=3,r=1):(n=1,r=3),this._drawCorridor(this._getWallPosition(t,n),this._getWallPosition(u,r))}}}])&&Ge(e.prototype,u),n&&Ge(e,n),i}(Bt)};Math.sqrt(3),Math.sqrt(3);function tu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function eu(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var uu=function(){function t(e,u,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};tu(this,t),this._toX=e,this._toY=u,this._passableCallback=n,this._options=Object.assign({topology:8},r),this._dirs=dt[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}var e,u,n;return e=t,(u=[{key:"_getNeighbors",value:function(t,e){for(var u=[],n=0;n<this._dirs.length;n++){var r=this._dirs[n],o=t+r[0],i=e+r[1];this._passableCallback(o,i)&&u.push([o,i])}return u}}])&&eu(e.prototype,u),n&&eu(e,n),t}();function nu(t){return(nu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ru(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function ou(t,e){return(ou=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function iu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=cu(t);if(e){var r=cu(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return au(this,u)}}function au(t,e){return!e||"object"!==nu(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function cu(t){return(cu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function su(t){return(su="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lu(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function hu(t,e){return(hu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function pu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=vu(t);if(e){var r=vu(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Du(this,u)}}function Du(t,e){return!e||"object"!==su(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function vu(t){return(vu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var yu={Dijkstra:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ou(t,e)}(o,t);var e,u,n,r=iu(o);function o(t,e,u,n){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),(i=r.call(this,t,e,u,n))._computed={},i._todo=[],i._add(t,e,null),i}return e=o,(u=[{key:"compute",value:function(t,e,u){var n=t+","+e;if(n in this._computed||this._compute(t,e),n in this._computed)for(var r=this._computed[n];r;)u(r.x,r.y),r=r.prev}},{key:"_compute",value:function(t,e){for(;this._todo.length;){var u=this._todo.shift();if(u.x==t&&u.y==e)return;for(var n=this._getNeighbors(u.x,u.y),r=0;r<n.length;r++){var o=n[r],i=o[0],a=o[1];i+","+a in this._computed||this._add(i,a,u)}}}},{key:"_add",value:function(t,e,u){var n={x:t,y:e,prev:u};this._computed[t+","+e]=n,this._todo.push(n)}}])&&ru(e.prototype,u),n&&ru(e,n),o}(uu),AStar:function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hu(t,e)}(o,t);var e,u,n,r=pu(o);function o(t,e,u){var n,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return fu(this,o),(n=r.call(this,t,e,u,i))._todo=[],n._done={},n}return e=o,(u=[{key:"compute",value:function(t,e,u){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){var n=this._todo.shift(),r=n.x+","+n.y;if(!(r in this._done)){if(this._done[r]=n,n.x==t&&n.y==e)break;for(var o=this._getNeighbors(n.x,n.y),i=0;i<o.length;i++){var a=o[i],c=a[0],s=a[1];c+","+s in this._done||this._add(c,s,n)}}}var f=this._done[t+","+e];if(f)for(;f;)u(f.x,f.y),f=f.prev}},{key:"_add",value:function(t,e,u){for(var n=this._distance(t,e),r={x:t,y:e,prev:u,g:u?u.g+1:0,h:n},o=r.g+r.h,i=0;i<this._todo.length;i++){var a=this._todo[i],c=a.g+a.h;if(o<c||o==c&&n<a.h)return void this._todo.splice(i,0,r)}this._todo.push(r)}},{key:"_distance",value:function(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:var u=Math.abs(t-this._fromX),n=Math.abs(e-this._fromY);return n+Math.max(0,(u-n)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}])&&lu(e.prototype,u),n&&lu(e,n),o}(uu)};window.devicePixelRatio,document.querySelector("#game");var du=50,_u=34,gu={width:30,height:15,x:10,y:3},Cu={width:10,height:2,x:1,y:3},Au={width:50,height:2,x:12,y:20},Eu={width:30,height:1,x:12,y:22},bu={width:20,height:1,x:15,y:2},mu=new bt({bg:"black",fg:"dimGrey",fontFamily:"Fira Mono",width:du,height:_u,fontSize:18,forceSquareRatio:!0});function Fu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var u=[],n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done)&&(u.push(i.value),!e||u.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}return u}(t,e)||ku(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bu(t,e){if(null==t)return{};var u,n,r=function(t,e){if(null==t)return{};var u,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)u=o[n],e.indexOf(u)>=0||(r[u]=t[u]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)u=o[n],e.indexOf(u)>=0||Object.prototype.propertyIsEnumerable.call(t,u)&&(r[u]=t[u])}return r}function wu(t,e){var u;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(u=ku(t))||e&&t&&"number"==typeof t.length){u&&(t=u);var n=0,r=function(){};return{s:r,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,a=!1;return{s:function(){u=t[Symbol.iterator]()},n:function(){var t=u.next();return i=t.done,t},e:function(t){a=!0,o=t},f:function(){try{i||null==u.return||u.return()}finally{if(a)throw o}}}}function ku(t,e){if(t){if("string"==typeof t)return xu(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);return"Object"===u&&t.constructor&&(u=t.constructor.name),"Map"===u||"Set"===u?Array.from(t):"Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u)?xu(t,e):void 0}}function xu(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function Ou(t){return(Ou="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Su(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ju(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Pu(t,e,u){return e&&ju(t.prototype,e),u&&ju(t,u),t}function Ru(t,e){var u=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),u.push.apply(u,n)}return u}function Tu(t){for(var e=1;e<arguments.length;e++){var u=null!=arguments[e]?arguments[e]:{};e%2?Ru(Object(u),!0).forEach((function(e){Mu(t,e,u[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(u)):Ru(Object(u)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(u,e))}))}return t}function Mu(t,e,u){return e in t?Object.defineProperty(t,e,{value:u,enumerable:!0,configurable:!0,writable:!0}):t[e]=u,t}function Iu(t,e,u){return e in t?Object.defineProperty(t,e,{value:u,enumerable:!0,configurable:!0,writable:!0}):t[e]=u,t}document.body.appendChild(mu.getContainer()),mu.draw(gu.x+5,gu.y+4,"@"),mu.draw(gu.x-1,gu.y-1,"#"),mu.draw(gu.x-1+gu.width,gu.y-1,"#"),mu.draw(gu.x-1,gu.y-1+gu.height,"#"),mu.draw(gu.x-1+gu.width,gu.y-1+gu.height,"#"),mu.draw(49,5,"3"),mu.draw(49,33,"3"),mu.drawText(0,0,"Hello");var zu=function(t,e){if("string"!=typeof t&&!Array.isArray(t))throw new TypeError("Expected the input to be `string | string[]`");e=Tu(Tu({},{pascalCase:!1}),e);var u;return 0===(t=Array.isArray(t)?t.map((function(t){return t.trim()})).filter((function(t){return t.length})).join("-"):t.trim()).length?"":1===t.length?e.pascalCase?t.toLocaleUpperCase():t.toLocaleLowerCase():(t!==t.toLocaleLowerCase()&&(t=function(t){for(var e=!1,u=!1,n=!1,r=0;r<t.length;r++){var o=t[r];e&&/(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/.test(o)?(t=t.slice(0,r)+"-"+t.slice(r),e=!1,n=u,u=!0,r++):u&&n&&/(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43])/.test(o)?(t=t.slice(0,r-1)+"-"+t.slice(r-1),n=u,u=!1,e=!0):(e=o.toLocaleLowerCase()===o&&o.toLocaleUpperCase()!==o,n=u,u=o.toLocaleUpperCase()===o&&o.toLocaleLowerCase()!==o)}return t}(t)),t=t.replace(/^[_.\- ]+/,"").toLocaleLowerCase().replace(/[ \x2D\._]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(t,e){return e.toLocaleUpperCase()})).replace(/[0-9]+((?:[0-9A-Z_a-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u0669\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7E\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D63\u0D66-\u0D78\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B50-\u1B59\u1B80-\u1BA9\u1BAC-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2189\u2150-\u2182\u2460-\u249B\u24B6-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA830-\uA835\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD27\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC52-\uDC6F\uDC82-\uDCB8\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD32\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB5\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC38\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD47\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])|$)/g,(function(t){return t.toLocaleUpperCase()})),u=t,e.pascalCase?u.charAt(0).toLocaleUpperCase()+u.slice(1):u)},Uu=zu,Lu=zu;Uu.default=Lu;var Wu={},Nu=function(t){var e=Wu[t];return e||(Wu[t]=Uu(t),Wu[t])},Xu=function(){function t(){Su(this,t),Iu(this,"_cbit",0),Iu(this,"_map",{})}return Pu(t,[{key:"register",value:function(t){var e=Nu(t.name);t.prototype._ckey=e,t.prototype._cbit=BigInt(++this._cbit),this._map[e]=t}},{key:"get",value:function(t){return this._map[t]}}]),t}(),Yu=function(t){return function(t){return!!t&&"object"===Ou(t)}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===qu}(t)}(t)};var qu="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Hu(t,e){return!1!==e.clone&&e.isMergeableObject(t)?Zu((u=t,Array.isArray(u)?[]:{}),t,e):t;var u}function $u(t,e,u){return t.concat(e).map((function(t){return Hu(t,u)}))}function Gu(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function Ku(t,e){try{return e in t}catch(t){return!1}}function Vu(t,e,u){var n={};return u.isMergeableObject(t)&&Gu(t).forEach((function(e){n[e]=Hu(t[e],u)})),Gu(e).forEach((function(r){(function(t,e){return Ku(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,r)||(Ku(t,r)&&u.isMergeableObject(e[r])?n[r]=function(t,e){if(!e.customMerge)return Zu;var u=e.customMerge(t);return"function"==typeof u?u:Zu}(r,u)(t[r],e[r],u):n[r]=Hu(e[r],u))})),n}function Zu(t,e,u){(u=u||{}).arrayMerge=u.arrayMerge||$u,u.isMergeableObject=u.isMergeableObject||Yu,u.cloneUnlessOtherwiseSpecified=Hu;var n=Array.isArray(e);return n===Array.isArray(t)?n?u.arrayMerge(t,e,u):Vu(t,e,u):Hu(e,u)}Zu.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,u){return Zu(t,u,e)}),{})};var Qu=Zu,Ju=function(){function t(e){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];Su(this,t),this.clazz=e,this.properties=u,this.overwrite=n}return Pu(t,[{key:"applyToEntity",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.clazz.allowMultiple&&t.has(this.clazz)){if(!this.overwrite)return;var u=t[this.clazz.prototype._ckey];t.remove(u)}var n=Qu(this.properties,e);t.add(this.clazz,n)}}]),t}(),tn=function(){function t(e){Su(this,t),Iu(this,"name",""),Iu(this,"inherit",[]),Iu(this,"components",[]),this.name=e}return Pu(t,[{key:"addComponent",value:function(t){this.components.push(t)}},{key:"applyToEntity",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.inherit.forEach((function(u){u.applyToEntity(t,e)}));var u={};return this.components.forEach((function(n){var r=n.clazz,o=r.prototype._ckey,i={};if(r.allowMultiple)if(r.keyProperty){var a=n.properties[r.keyProperty];e[o]&&e[o][a]&&(i=e[o][a])}else u[o]||(u[o]=0),e[o]&&e[o][u[o]]&&(i=e[o][u[o]]),u[o]++;else i=e[o];n.applyToEntity(t,i)})),t}}]),t}(),en=function(){function t(e){Su(this,t),Iu(this,"_prefabs",{}),Iu(this,"_engine",null),this._engine=e}return Pu(t,[{key:"deserialize",value:function(t){var e=this,u=this.get(t.name);if(u)return u;var n,r=new tn(t.name);return n=Array.isArray(t.inherit)?t.inherit:"string"==typeof t.inherit?[t.inherit]:[],r.inherit=n.map((function(u){var n=e.get(u);return n||(console.warn('Prefab "'.concat(t.name,'" cannot inherit from Prefab "').concat(u,'" because is not registered yet! Prefabs must be registered in the right order.')),u)})),(t.components||[]).forEach((function(u){if("string"==typeof u){var n=Nu(u),o=e._engine._components.get(n);if(o)return void r.addComponent(new Ju(o))}if("object"===Ou(u)){var i=Nu(u.type),a=e._engine._components.get(i);if(a)return void r.addComponent(new Ju(a,u.properties,u.overwrite))}console.warn('Unrecognized component reference "'.concat(u,'" in prefab "').concat(t.name,'". Ensure the component is registered before the prefab.'))})),r}},{key:"register",value:function(t){var e=this.deserialize(t);this._prefabs[e.name]=e}},{key:"get",value:function(t){return this._prefabs[t]}},{key:"create",value:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=this.get(e);if(n){var r=t.createEntity();return r._qeligible=!1,n.applyToEntity(r,u),r._qeligible=!0,r._candidacy(),r}console.warn('Could not instantiate prefab "'.concat(e,'" since it is not registered'))}}]),t}(),un=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Su(this,t),Object.assign(this,this.constructor.properties,e)}return Pu(t,[{key:"world",get:function(){return this.entity.world}},{key:"allowMultiple",get:function(){return this.constructor.allowMultiple}},{key:"keyProperty",get:function(){return this.constructor.keyProperty}},{key:"destroy",value:function(){this.entity.remove(this)}},{key:"_onDestroyed",value:function(){this.onDestroyed(),delete this.entity}},{key:"_onEvent",value:function(t){this.onEvent(t),"function"==typeof this[t.handlerName]&&this[t.handlerName](t)}},{key:"_onAttached",value:function(t){this.entity=t,this.onAttached(t)}},{key:"serialize",value:function(){var t={};for(var e in this.constructor.properties)t[e]=this[e];return t}},{key:"onAttached",value:function(t){}},{key:"onDestroyed",value:function(){}},{key:"onEvent",value:function(t){}}]),t}();Iu(un,"allowMultiple",!1),Iu(un,"keyProperty",null),Iu(un,"properties",{});var nn=function(){function t(e){var u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Su(this,t),Iu(this,"data",{}),Iu(this,"prevented",!1),Iu(this,"handled",!1),this.name=e,this.data=u,this.handlerName=Nu("on ".concat(this.name))}return Pu(t,[{key:"is",value:function(t){return this.name===t}},{key:"handle",value:function(){this.handled=!0,this.prevented=!0}},{key:"prevent",value:function(){this.prevented=!0}}]),t}(),rn=1n,on=function(t,e){return t&~(1n<<e)},an=function(t,e){return t|rn<<e},cn=function(t,e){return t&e},sn=function(t){return t.serialize()},fn=function(t){var e={};for(var u in t)e[u]=sn(t[u]);return e},ln=function(){function t(e,u){Su(this,t),Iu(this,"_cbits",0n),Iu(this,"_qeligible",!0),this.world=e,this.id=u,this.components={},this.isDestroyed=!1}return Pu(t,[{key:"_candidacy",value:function(){this._qeligible&&this.world._candidate(this)}},{key:"add",value:function(t,e){var u=new t(e);u.keyProperty?function(t,e){var u=e._ckey;t.components[u]||(t[u]={},t.components[u]={}),t[u][e[e.keyProperty]]=e,t.components[u][e[e.keyProperty]]=e}(this,u):u.allowMultiple?function(t,e){var u=e._ckey;t.components[u]||(t[u]=[],t.components[u]=[]),t[u].push(e),t.components[u].push(e)}(this,u):function(t,e){var u=e._ckey;t[u]=e,t.components[u]=e}(this,u),this._cbits=an(this._cbits,u._cbit),u._onAttached(this),this._candidacy()}},{key:"has",value:function(t){return e=this._cbits,u=t.prototype._cbit,(e>>u)%2n!==0n;var e,u}},{key:"remove",value:function(t){t.keyProperty?function(t,e){var u=e._ckey,n=e[e.keyProperty];delete t[u][n],delete t.components[u][n],Object.keys(t[u]).length<=0&&(delete t[u],delete t.components[u],t._cbits=on(t._cbits,e._cbit),t._candidacy())}(this,t):t.allowMultiple?function(t,e){var u=e._ckey,n=t[u].indexOf(e);t[u].splice(n,1),t.components[u].splice(n,1),t[u].length<=0&&(delete t[u],delete t.components[u],t._cbits=on(t._cbits,e._cbit),t._candidacy())}(this,t):function(t,e){var u=e._ckey;delete t[u],delete t.components[u],t._cbits=on(t._cbits,e._cbit),t._candidacy()}(this,t),t._onDestroyed()}},{key:"destroy",value:function(){for(var t in this.components){var e=this.components[t];if(e instanceof un)this._cbits=on(this._cbits,e._cbit),e._onDestroyed();else if(e instanceof Array){var u,n=wu(e);try{for(n.s();!(u=n.n()).done;){var r=u.value;this._cbits=on(this._cbits,r._cbit),r._onDestroyed()}}catch(t){n.e(t)}finally{n.f()}}else for(var o=0,i=Object.values(e);o<i.length;o++){var a=i[o];this._cbits=on(this._cbits,a._cbit),a._onDestroyed()}delete this[t],delete this.components[t]}this._candidacy(),this.world._destroyed(this.id),this.components={},this.isDestroyed=!0}},{key:"serialize",value:function(){var t={};for(var e in this.components){var u=this.components[e];t[e]=u instanceof un?sn(u):u instanceof Array?u.map(sn):fn(u)}return Tu({id:this.id},t)}},{key:"fireEvent",value:function(t,e){var u=new nn(t,e);for(var n in this.components){var r=this.components[n];if(r instanceof un){if(r._onEvent(u),u.prevented)return u}else if(r instanceof Array){for(var o=0;o<r.length;o++)if(r[o]._onEvent(u),u.prevented)return u}else for(var i=0,a=Object.values(r);i<a.length;i++){if(a[i]._onEvent(u),u.prevented)return u}}return u}}]),t}(),hn=function(){function t(e,u){Su(this,t),Iu(this,"_cache",[]),Iu(this,"_onAddListeners",[]),Iu(this,"_onRemoveListeners",[]),this._world=e;var n=u.any||[],r=u.all||[],o=u.none||[];this._any=n.reduce((function(t,e){return an(t,e.prototype._cbit)}),0n),this._all=r.reduce((function(t,e){return an(t,e.prototype._cbit)}),0n),this._none=o.reduce((function(t,e){return an(t,e.prototype._cbit)}),0n),this.refresh()}return Pu(t,[{key:"onEntityAdded",value:function(t){this._onAddListeners.push(t)}},{key:"onEntityRemoved",value:function(t){this._onRemoveListeners.push(t)}},{key:"has",value:function(t){return this.idx(t)>=0}},{key:"idx",value:function(t){return this._cache.indexOf(t)}},{key:"matches",value:function(t){var e=t._cbits,u=0n===this._any||cn(e,this._any)>0,n=cn(e,this._all)===this._all,r=0n===cn(e,this._none);return u&&n&&r}},{key:"candidate",value:function(t){var e=this.idx(t),u=e>=0;return!t.isDestroyed&&this.matches(t)?(u||(this._cache.push(t),this._onAddListeners.forEach((function(e){return e(t)}))),!0):(u&&(this._cache.splice(e,1),this._onRemoveListeners.forEach((function(e){return e(t)}))),!1)}},{key:"refresh",value:function(){var t=this;this._cache=[],this._world._entities.forEach((function(e){t.candidate(e)}))}},{key:"get",value:function(){return this._cache}}]),t}(),pn=function(){function t(e){Su(this,t),Iu(this,"_id",0),Iu(this,"_queries",[]),Iu(this,"_entities",new Map),this.engine=e}return Pu(t,[{key:"createId",value:function(){return++this._id+Math.random().toString(36).substr(2,9)}},{key:"getEntity",value:function(t){return this._entities.get(t)}},{key:"getEntities",value:function(){return this._entities.values()}},{key:"createEntity",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.createId(),e=new ln(this,t);return this._entities.set(t,e),e}},{key:"destroyEntity",value:function(t){var e=this.getEntity(t);e&&e.destroy()}},{key:"destroyEntities",value:function(){this._entities.forEach((function(t){t.destroy()}))}},{key:"destroy",value:function(){this.destroyEntities(),this._id=0,this._queries=[],this._entities=new Map}},{key:"createQuery",value:function(t){var e=new hn(this,t);return this._queries.push(e),e}},{key:"createPrefab",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.engine._prefabs.create(this,t,e)}},{key:"serialize",value:function(t){var e=[];return(t||this._entities).forEach((function(t){e.push(t.serialize())})),{entities:e}}},{key:"deserialize",value:function(t){var e,u=wu(t.entities);try{for(u.s();!(e=u.n()).done;){var n=e.value;this._createOrGetEntityById(n.id)}}catch(t){u.e(t)}finally{u.f()}var r,o=wu(t.entities);try{for(o.s();!(r=o.n()).done;){var i=r.value;this._deserializeEntity(i)}}catch(t){o.e(t)}finally{o.f()}}},{key:"_createOrGetEntityById",value:function(t){return this.getEntity(t)||this.createEntity(t)}},{key:"_deserializeEntity",value:function(t){var e=this,u=t.id,n=Bu(t,["id"]),r=this._createOrGetEntityById(u);r._qeligible=!1,Object.entries(n).forEach((function(t){var u=Fu(t,2),n=u[0],o=u[1],i=Nu(n),a=e.engine._components.get(i);a.allowMultiple?Object.values(o).forEach((function(t){r.add(a,t)})):r.add(a,o)})),r._qeligible=!0,r._candidacy()}},{key:"_candidate",value:function(t){this._queries.forEach((function(e){return e.candidate(t)}))}},{key:"_destroyed",value:function(t){return this._entities.delete(t)}}]),t}(),Dn=function(){function t(){Su(this,t),Iu(this,"_components",new Xu),Iu(this,"_prefabs",new en(this))}return Pu(t,[{key:"registerComponent",value:function(t){this._components.register(t)}},{key:"registerPrefab",value:function(t){this._prefabs.register(t)}},{key:"createWorld",value:function(){return new pn(this)}},{key:"destroyWorld",value:function(t){t.destroy()}}]),t}(),vn=u(4),yn={entitiesAtLocation:{}},dn=function(t,e,u){yn[t][e]||(yn[t][e]=new Set),yn[t][e].add(u)},_n=function(t,e,u){yn[t][e]&&yn[t][e].has(u)&&yn[t][e].delete(u)},gn=function(t,e,u){if(yn[t][e])return u?yn[t][e].get(u):yn[t][e]},Cn=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return En(t,1,e)},An=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,2,3,4,5,6];return En(t,2,e)},En=function(t,e){for(var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[1,2,3,4,5,6],n=[],r=1;r<7;r++)t[r]&&t[r]==e&&u.includes(r)&&(console.log("found match"),n.push(r));return console.log(t),console.log(n),console.log("match:"+e),n},bn=function(t){var e=t;return"string"!=typeof e&&(e=mn(e)),e},mn=function(t){var e=t.x,u=t.y;return"".concat(e,",").concat(u)};function Fn(t){return function(t){if(Array.isArray(t))return Bn(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Bn(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return Bn(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bn(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}var wn={canUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:jn(e);return Cn(u)},onUse:function(t,e){console.log("used"),console.log(t),console.log(t.abilityPhase.phase),jn(e),e.fireEvent("gain-movement",3),e.fireEvent("exhaust-selected")}},kn={canUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:jn(e);return Cn(u)},onUse:function(t,e){e.fireEvent("gain-movement",3),e.fireEvent("exhaust-selected")}},xn={canUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:jn(e);return An(u)},onUse:function(t,e){e.fireEvent("gain-dodge",1),e.fireEvent("exhaust-selected")}},On={canUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:jn(e);return Cn(u,t.abilityAllowedDie.allowed)},onUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;console.log(t),console.log(t.abilityTarget.coords);var n=Pn(t,e,u);n.forEach((function(t){console.log(t),console.log(u.x+","+u.y);var e=wr.createEntity();e.add(Qn,{x:u.x+t[0],y:u.y+t[1]}),e.add(lr),e.add(hr)})),e.fireEvent("exhaust-selected")},onTarget:function(t,e){Vr(t),Zr(e),co("targeting")}},Sn={canUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:jn(e);return Cn(u,t.abilityAllowedDie.allowed)},onUse:function(t,e){var u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=Pn(t,e,u);n.forEach((function(t){console.log(t);var e=wr.createEntity();e.add(Qn,{x:u.x+t[0],y:u.y+t[1]}),e.add(fr),e.add(hr)})),e.fireEvent("exhaust-selected")},onTarget:function(t,e){Vr(t),Zr(e),co("targeting")}},jn=function(t){for(var e=[],u=0;u<t.die.length;u++)t.die[u].selected&&!t.die[u].exhausted&&e.push(t.die[u].number);e.sort();var n={};return e.forEach((function(t){n[t]=(n[t]||0)+1})),n},Pn=function(t,e,u){var n=u.x-e.position.x,r=u.y-e.position.y,o=t.abilityTarget.coords;return console.log("before rotate"),console.log(o),console.log("direction"),-1==r?console.log("up"):1==r?(console.log("down"),o=Mn(o)):-1==n?(console.log("left"),o=Tn(o)):1==n&&(console.log("right"),o=Rn(o)),console.log("after rotate"),console.log(o),o},Rn=function(t){var e=[];return t.forEach((function(t){var u=[];u.push(t[1]),u.push(t[0]),u[0]=-1*u[0],u[1]=1*u[1],e.push(u)})),e},Tn=function(t){var e=[];return t.forEach((function(t){var u=[];u.push(t[1]),u.push(t[0]),u[1]=-1*u[1],e.push(u)})),e},Mn=function(t){var e=[];return t.forEach((function(t){var u=[];(u=Fn(t))[0]=-1*u[0],u[1]=-1*u[1],e.push(u)})),e};function In(t,e){var u;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(u=function(t,e){if(!t)return;if("string"==typeof t)return zn(t,e);var u=Object.prototype.toString.call(t).slice(8,-1);"Object"===u&&t.constructor&&(u=t.constructor.name);if("Map"===u||"Set"===u)return Array.from(t);if("Arguments"===u||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(u))return zn(t,e)}(t))||e&&t&&"number"==typeof t.length){u&&(t=u);var n=0,r=function(){};return{s:r,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,a=!1;return{s:function(){u=t[Symbol.iterator]()},n:function(){var t=u.next();return i=t.done,t},e:function(t){a=!0,o=t},f:function(){try{i||null==u.return||u.return()}finally{if(a)throw o}}}}function zn(t,e){(null==e||e>t.length)&&(e=t.length);for(var u=0,n=new Array(e);u<e;u++)n[u]=t[u];return n}function Un(t){return(Un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ln(t,e){for(var u=0;u<e.length;u++){var n=e[u];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Wn(t,e,u){return e&&Ln(t.prototype,e),u&&Ln(t,u),t}function Nn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Xn(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Yn(t,e)}function Yn(t,e){return(Yn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function qn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var u,n=$n(t);if(e){var r=$n(this).constructor;u=Reflect.construct(n,arguments,r)}else u=n.apply(this,arguments);return Hn(this,u)}}function Hn(t,e){return!e||"object"!==Un(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function $n(t){return($n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Gn(t,e,u){return e in t?Object.defineProperty(t,e,{value:u,enumerable:!0,configurable:!0,writable:!0}):t[e]=u,t}var Kn=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(Kn,"properties",{color:"#ff0077",char:"?",background:"#000"});var Vn=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(Vn,"properties",{name:"No Name",description:"nothing"});var Zn=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),Qn=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onAttached",value:function(){var t="".concat(this.entity.position.x,",").concat(this.entity.position.y);dn("entitiesAtLocation",t,this.entity.id)}},{key:"onDestroyed",value:function(){var t="".concat(this.x,",").concat(this.y);_n("entitiesAtLocation",t,this.entity.id)}}]),u}(un);Gn(Qn,"properties",{x:0,y:0});var Jn=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onTakeDamage",value:function(t){console.log("i've been hit!"),this.current-=t.data.amount,console.log(this),console.log("ow"),this.current<=0&&this.entity.remove(this.entity.position),t.handle()}}]),u}(un);Gn(Jn,"properties",{max:4,current:4});var tr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onGainMovement",value:function(t){this.movement+=t.data,console.log("new movement: "+this.movement),t.handle()}},{key:"onGainDodge",value:function(t){this.dodge+=t.data,t.handle()}},{key:"onTurnEnd",value:function(t){console.log("ended in move"),this.movement=0,this.dodge=0}},{key:"onChangePosition",value:function(t){this.x=t.data.x,this.y=t.data.y,t.handle()}},{key:"onAttemptMove",value:function(t){this.movement<=0&&this.dodge<=0?t.handle():function(t,e){console.log("check here"),console.log(t),console.log(e);var u=t.x,n=t.y;u=e.position.x+u,n=e.position.y+n;var r=[],o=[];console.log("".concat(u,",").concat(n));var i=gn("entitiesAtLocation","".concat(u,",").concat(n));console.log(i);var a,c=In(i);try{for(c.s();!(a=c.n()).done;){var s=a.value;wr.getEntity(s).isBlocking&&r.push(s)}}catch(t){c.e(t)}finally{c.f()}if(r.length>=1)return console.log("blocked"),!1;var f,l=In(gn("entitiesAtLocation",bn({x:e.position.x,y:e.position.y})));try{for(l.s();!(f=l.n()).done;){var h=f.value;console.log(wr.getEntity(h)),wr.getEntity(h).fastAttack&&o.push(e)}}catch(t){l.e(t)}finally{l.f()}return o.length>=1&&e.movement.dodge<1?(console.log("no dodge"),!1):(_n("entitiesAtLocation","".concat(e.position.x,",").concat(e.position.y),e.id),dn("entitiesAtLocation","".concat(u,",").concat(n),e.id),e.position.x=u,e.position.y=n,!0)}(this,this.entity)&&(this.dodge>0?this.dodge=Math.max(0,this.dodge-1):this.movement-=1);this.x=0,this.y=0,t.handle()}}]),u}(un);Gn(tr,"properties",{movement:0,dodge:0,x:0,y:0});var er=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onTurnStart",value:function(t){this.entity.fireEvent("gain-movement",this.amount)}}]),u}(un);Gn(er,"properties",{amount:3});var ur=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(ur,"properties",{max:0,current:0});var nr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onAttached",value:function(){for(var t=0;t<this.max;t++)this.entity.add(rr);this.onRollDice()}},{key:"onTurnEnd",value:function(t){console.log("doing turn end"),this.current=Math.min(this.max,this.current+Math.max(0,4-this.used)),this.used=0,this.onRollDice()}},{key:"onRollDice",value:function(){for(var t=0;t<this.max;t++)this.entity.die[t].selected=!1,this.entity.die[t].exhausted=t>=this.current,this.entity.die[t].number=Object(vn.random)(1,6)}},{key:"onUseStamina",value:function(t){this.current=Math.max(this.current-t.data,0)}},{key:"onUpdateStamina",value:function(){}}]),u}(un);Gn(nr,"properties",{max:5,current:5,used:0});var rr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onExhaustSelected",value:function(t){this.selected&&(this.entity.stamina.used++,this.entity.stamina.current--,this.exhausted=!0,this.selected=!1,this.entity.fireEvent("update-stamina"))}}]),u}(un);Gn(rr,"allowMultiple",!0),Gn(rr,"properties",{number:0,selected:!1,exhausted:!1});var or=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),ir=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),ar=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(ar,"properties",{enemy:!0});var cr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),sr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),fr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),lr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un),hr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(hr,"properties",{dmg:1});var pr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return Wn(u,[{key:"onAttached",value:function(){var t=[];this.abilities.forEach((function(e){t.push(wr.createPrefab(e))})),this.abilities=t}}]),u}(un);Gn(pr,"properties",{abilities:[]});var Dr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(Dr,"properties",{coords:[[0,0]]});var vr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(vr,"properties",{allowed:[1,2,3,4,5,6]});var yr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(yr,"properties",{function:wn});var dr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(dr,"properties",{phase:"Any"});var _r=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(_r,"properties",{speed:"Instant"});var gr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(gr,"properties",{amount:1});var Cr=function(t){Xn(u,t);var e=qn(u);function u(){return Nn(this,u),e.apply(this,arguments)}return u}(un);Gn(Cr,"properties",{smallName:"abl"});var Ar={name:"AbilityMove",inherit:["Ability"],components:[{type:"Description",properties:{name:"Move",description:"exhausts 1 die to give it's face value for movement points"}},{type:"AbilityFunction",properties:{function:kn}},{type:"AbilitySmallName",properties:{smallName:"MOV"}}]},Er={name:"AbilityDodge",inherit:["Ability"],components:[{type:"Description",properties:{name:"Dodge",description:"exhausts a pair to give 1 dodge point"}},{type:"AbilityFunction",properties:{function:xn}},{type:"AbilitySmallName",properties:{smallName:"DDG"}},{type:"AbilityStaminaCost",properties:{amount:2}}]},br={name:"AbilitySwordJab",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Jab",description:"exhausts 5,6 to do a slow attack on a single tile for 1 dmg"}},{type:"AbilityFunction",properties:{function:On}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SJB"}},{type:"AbilityTarget",properties:{coords:[[0,0]]}},{type:"AbilityAllowedDie",properties:{allowed:[3,4,5,6]}}]},mr={name:"AbilitySwordSwing",inherit:["Ability"],components:[{type:"Description",properties:{name:"Sword Swing",description:"exhausts 5,6 to do a slow attack on a single tile for 2 dmg"}},{type:"AbilityFunction",properties:{function:Sn}},{type:"AbilityPhase",properties:{phase:"Attack"}},{type:"AbilitySmallName",properties:{smallName:"SSW"}},{type:"AbilityTarget",properties:{coords:[[-1,0],[0,0],[1,0],[0,-1]]}},{type:"AbilityAllowedDie",properties:{allowed:[4,5,6]}}]},Fr=new Dn,Br=Fr.createWorld();Fr.registerComponent(Kn),Fr.registerComponent(ur),Fr.registerComponent(Vn),Fr.registerComponent(Jn),Fr.registerComponent(Zn),Fr.registerComponent(ir),Fr.registerComponent(or),Fr.registerComponent(ar),Fr.registerComponent(cr),Fr.registerComponent(sr),Fr.registerComponent(tr),Fr.registerComponent(Qn),Fr.registerComponent(nr),Fr.registerComponent(rr),Fr.registerComponent(fr),Fr.registerComponent(lr),Fr.registerComponent(hr),Fr.registerComponent(pr),Fr.registerComponent(yr),Fr.registerComponent(dr),Fr.registerComponent(_r),Fr.registerComponent(gr),Fr.registerComponent(Cr),Fr.registerComponent(Dr),Fr.registerComponent(vr),Fr.registerComponent(er),Fr.registerPrefab({name:"Tile",components:[{type:"Appearance"},{type:"Description"},{type:"LayerMap"}]}),Fr.registerPrefab({name:"Being",components:[{type:"Appearance"},{type:"Description"},{type:"Health"},{type:"IsBlocking"},{type:"LayerUnit"},{type:"Movement"},{type:"armour"},{type:"stamina"},{type:"AbilityList"}]}),Fr.registerPrefab({name:"Wall",inherit:["Tile"],components:[{type:"IsBlocking"},{type:"Appearance",properties:{char:"#",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]}),Fr.registerPrefab({name:"Floor",inherit:["Tile"],components:[{type:"Appearance",properties:{char:".",color:"#AAA"}},{type:"Description",properties:{name:"wall"}}]}),Fr.registerPrefab({name:"PlayerBeing",inherit:["Being"],components:[{type:"IsPlayerControlled"},{type:"Apperance",properties:{char:"@"}},{type:"AbilityList",properties:{abilities:["AbilityMove","AbilityDodge","AbilitySwordJab","AbilitySwordSwing"]}}]}),Fr.registerPrefab({name:"Mob",inherit:["Being"],components:[{type:"Ai"},{type:"IsEnemy"},{type:"GainMovement"}]}),Fr.registerPrefab({name:"Goblin",inherit:["Mob"],components:[{type:"Appearance",properties:{char:"g",color:"green"}},{type:"Description",properties:{name:"Goblin",description:"A lowly Goblin"}},{type:"AbilityList",properties:{abilities:["AbilitySwordJab","AbilitySwordSwing"]}}]}),Fr.registerPrefab({name:"Ability",components:[{type:"Description",properties:{name:"Generic Ability",description:"used for testing as base template"}},{type:"AbilityPhase"},{type:"AbilitySpeed"},{type:"AbilityStaminaCost"},{type:"AbilityFunction"},{type:"AbilitySmallName"},{type:"AbilityTarget"},{type:"AbilityAllowedDie"}]}),Fr.registerPrefab(Ar),Fr.registerPrefab(Er),Fr.registerPrefab(br),Fr.registerPrefab(mr);var wr=Br,kr=wr.createQuery({all:[Qn,Kn,cr]}),xr=wr.createQuery({all:[Qn,Kn,sr]}),Or=wr.createQuery({all:[Qn,fr]}),Sr=wr.createQuery({all:[Qn,lr]}),jr=["q","w","e","r","t","y"],Pr=function(t,e,u){mu.drawText(e,u,t)},Rr=function(t,e,u){mu.draw(e,u,t.appearance.char,t.appearance.color,t.appearance.background||"black")},Tr=function(){mu.clear(),kr.get().forEach((function(t){Rr(t,t.position.x+gu.x,t.position.y+gu.y)})),xr.get().forEach((function(t){Rr(t,t.position.x+gu.x,t.position.y+gu.y)})),function(){if(Jr){Pr("Active:",Cu.x,Cu.y),Rr(Jr,Cu.x+"Active:".length,Cu.y),Pr("Hp:"+Jr.health.current.toString(),Cu.x,Cu.y+1),Pr("Stam:"+Jr.stamina.current.toString()+"/"+Jr.stamina.max.toString(),Cu.x,Cu.y+2),Pr("StamRgn:"+Math.max(0,4-Jr.stamina.used).toString(),Cu.x,Cu.y+3),Pr("Move:"+Jr.movement.movement.toString(),Cu.x,Cu.y+4),Pr("Dodge:"+Jr.movement.dodge.toString(),Cu.x,Cu.y+5)}}(),function(){if(Jr)for(var t=0;t<Jr.die.length;t++){var e="white";Jr.die[t].selected?e="green":Jr.die[t].exhausted&&(e="grey"),Pr((t+1).toString()+"| |",Au.x+5*t,Au.y),mu.draw(2+Au.x+5*t,Au.y,Jr.die[t].number.toString(),"black",e)}}(),function(){for(var t=0;t<Jr.abilityList.abilities.length;t++){var e="gray",u="PlayerTurnDefend"==Hr?"Defend":"Attack";("Any"==Jr.abilityList.abilities[t].abilityPhase.phase||Jr.abilityList.abilities[t].abilityPhase.phase==u)&&Jr.abilityList.abilities[t].abilityFunction.function.canUse(Jr.abilityList.abilities[t],Jr).length>0&&(e="white");var n=Jr.abilityList.abilities[t].abilitySmallName.smallName;Pr(jr[t]+"[%c{"+e+"}"+n+"%c{}]",Eu.x+7*t,Eu.y)}}(),Pr(Hr,bu.x,bu.y),mu.draw(0,0,"O"),mu.draw(0,_u-1,"O"),mu.draw(du-1,0,"O"),mu.draw(du-1,_u-1,"O"),Or.get().forEach((function(t){var e,u=gn("entitiesAtLocation",bn({x:t.position.x,y:t.position.y})),n=!1;u.forEach((function(u){var r=wr.getEntity(u);r.has(sr)?(n=!0,mu.draw(t.position.x+gu.x,t.position.y+gu.y,r.appearance.char,r.appearance.color,"yellow")):r.has(cr)&&(e=r),!n&&e&&mu.draw(t.position.x+gu.x,t.position.y+gu.y,e.appearance.char,e.appearance.color,"yellow")}))})),Sr.get().forEach((function(t){var e,u=gn("entitiesAtLocation",bn({x:t.position.x,y:t.position.y})),n=!1;u.forEach((function(u){var r=wr.getEntity(u);r.has(sr)?(n=!0,mu.draw(t.position.x+gu.x,t.position.y+gu.y,r.appearance.char,r.appearance.color,"red")):r.has(cr)&&(e=r),!n&&e&&mu.draw(t.position.x+gu.x,t.position.y+gu.y,e.appearance.char,e.appearance.color,"red")}))})),console.log(Hr),"examine"!==Hr&&"targeting"!==Hr||(console.log("need to show target"),console.log(Qr),Rr(Qr,Qr.position.x+gu.x,Qr.position.y+gu.y))},Mr=wr.createQuery({all:[Qn,Kn,cr]}),Ir=new Je.Arena(gu.width,gu.height),zr=function(){var t=Ur();return Object(vn.sample)(t)},Ur=function(){var t=[];return Mr.get().forEach((function(e){e.isBlocking||1==gn("entitiesAtLocation",bn({x:e.position.x,y:e.position.y})).size&&t.push(e)})),t},Lr=wr.createQuery({all:[Qn,Kn,sr],none:[ar]}),Wr=function(t,e){return new yu.Dijkstra(t,e,Xr,{topology:4})},Nr=function(t,e){var u;return e.has(ar)&&(console.log("enemies to check: "+Lr.get().length),Lr.get().forEach((function(e){var n=[];t.compute(e.position.x,e.position.y,(function(t,e){n.push([t,e])})),(!u||n.length<u.length)&&(u=n)}))),u},Xr=function(t,e){var u=gn("entitiesAtLocation",bn({x:t,y:e}));return u?(u.forEach((function(t){if(wr.getEntity(t).has(Zn))return 0})),1):0},Yr=function(t,e){var u=function(t){var e=Wr(t.position.x,t.position.y);console.log("path finder"),console.log(e);var u=Nr(e,t);return console.log(u),u.pop(),u}(t),n=!1;e.shuffle(),console.log("Doing mob attack: ");for(var r=0;r<2;r++)e.forEach((function(e){if(console.log(u.toString()),console.log(u.length),u.length<=1&&!n){console.log("In Range");var r=u.pop();console.log(r.toString()),e.abilityFunction.function.onUse(e,t,{x:r[0],y:r[1]}),n=!0}})),u.length>1&&!n&&(console.log("Not In Range so we move"),u.length>1&&qr(t,u))},qr=function(t,e){t.fireEvent("gain-movement",2);for(var u=t.movement.movement,n=0;n<u;n++)if(e&&e.length>1){console.log("remaining target"),console.log(e.toString());var r=e.pop();console.log("Next Step"+r.toString()),t.movement.x=r[0]-t.position.x,t.movement.y=r[1]-t.position.y,t.fireEvent("attempt-move")}};Object.defineProperty(Array.prototype,"shuffle",{value:function(){for(var t=this.length-1;t>0;t--){var e=Math.floor(Math.random()*(t+1)),u=[this[e],this[t]];this[t]=u[0],this[e]=u[1]}return this}});var Hr="setup",$r="",Gr="hi",Kr="hi",Vr=function(t){Gr=t},Zr=function(t){Kr=t},Qr=wr.createEntity("targetEntity");Qr.add(Kn,{char:"X",color:"black",background:"green"});var Jr,to=0,eo=null,uo=wr.createQuery({all:[Qn,Kn,sr,or]}),no=wr.createQuery({all:[Qn,Kn,sr],none:[ar]}),ro=wr.createQuery({all:[Qn,Kn,sr,ar]}),oo=wr.createQuery({all:[hr]}),io=function(){if("PlayerTurnDefend"==Hr||"PlayerTurnAttack"==Hr)if("n"===eo)console.log("input: "+eo),Jr=ho(),Tr();else if("1"===eo||"2"===eo||"3"===eo||"4"===eo||"5"===eo||"6"===eo||"7"===eo||"8"===eo||"9"===eo||"0"===eo)console.log("dice swap"),console.log(Jr.die[eo-1]),Jr.die[eo-1].exhausted||(Jr.die[eo-1].selected=!Jr.die[eo-1].selected),Tr();else if("ArrowUp"===eo)fo();else if("ArrowRight"===eo)fo();else if("ArrowDown"===eo)fo();else if("ArrowLeft"===eo)fo();else if("q"===eo||"w"===eo||"e"===eo||"r"===eo||"t"===eo||"y"===eo){console.log("ability use");var t=0;switch(eo){case"q":t=0;break;case"w":t=1;break;case"e":t=2;break;case"r":t=3;break;case"t":t=4;break;case"y":t=5}if(t<Jr.abilityList.abilities.length){var e=Jr.abilityList.abilities[t],u=e.abilityFunction.function.canUse(e,Jr),n="PlayerTurnDefend"==Hr?"Defend":"Attack";u.length>0&&("Any"==e.abilityPhase.phase||e.abilityPhase.phase==n)&&(e.abilityFunction.function.onTarget?e.abilityFunction.function.onTarget(e,Jr):e.abilityFunction.function.onUse(e,Jr,ao()))}Tr()}else"Enter"==eo?(console.log("Enter"),"PlayerTurnDefend"==Hr?(vo(),Hr="PlayerTurnAttack"):"PlayerTurnAttack"==Hr&&(yo(),_o(no.get()),Hr="EnemyTurnDefend"),Tr()):"x"===eo?(co("examine"),Tr()):"p"===eo&&console.log(Jr);else"examine"!==Hr&&"targeting"!==Hr||("Escape"===eo?(so(),Tr()):"ArrowUp"===eo||"ArrowRight"===eo||"ArrowDown"===eo||"ArrowLeft"===eo?(lo(),Tr()):"Enter"===eo&&"targeting"===Hr&&(console.log(Gr),Gr.abilityFunction.function.onUse(Gr,Kr,ao()),so(),Tr()));eo=null},ao=function(){return Qr.has(Qn)?{x:Qr.position.x,y:Qr.position.y}:{x:0,y:0}},co=function(t){$r=Hr,Hr=t,Qr.add(Qn,{x:Jr.position.x,y:Jr.position.y})},so=function(){Hr=$r,Qr.remove(Qr.position)},fo=function(){"ArrowUp"===eo&&(Jr.movement.y=-1),"ArrowRight"===eo&&(Jr.movement.x=1),"ArrowDown"===eo&&(Jr.movement.y=1),"ArrowLeft"===eo&&(Jr.movement.x=-1),Jr.fireEvent("attempt-move"),Tr()},lo=function(){"ArrowUp"===eo?(Qr.position.y=Jr.position.y+-1,Qr.position.x=Jr.position.x):"ArrowRight"===eo?(Qr.position.x=Jr.position.x+1,Qr.position.y=Jr.position.y):"ArrowDown"===eo?(Qr.position.y=Jr.position.y+1,Qr.position.x=Jr.position.x):"ArrowLeft"===eo&&(Qr.position.x=Jr.position.x+-1,Qr.position.y=Jr.position.y)},ho=function(){return to+1>=uo.get().length?to=0:to++,uo.get()[to]};document.addEventListener("keydown",(function(t){eo=t.key}));var po=function(){var t=wr.createPrefab("PlayerBeing",{appearance:{char:"@",color:"green"}}),e=zr();t.add(Qn,{x:e.position.x,y:e.position.y}),Jr=t;var u=wr.createPrefab("PlayerBeing",{appearance:{char:"@",color:"purple"}});e=zr(),u.add(Qn,{x:e.position.x,y:e.position.y}),Object(vn.times)(5,(function(){e=zr(),wr.createPrefab("Goblin").add(Qn,{x:e.position.x,y:e.position.y})}))},Do=function(){console.log("enemy attacks"),ro.get().forEach((function(t){var e,u,n;u=[],n=(e=t).stamina.current,console.log("AI usable stamina"),console.log(e),console.log(n),e.abilityList.abilities.forEach((function(t){console.log(t.abilityStaminaCost),("Any"==t.abilityPhase.phase||"Attack"==t.abilityPhase.phase)&&n>=t.abilityStaminaCost.amount&&u.push(t)})),console.log("ai usable abilities"),console.log(u),Yr(e,u),console.log("pathfinding")}))},vo=function(){yo()},yo=function(){console.log("process dmg"),console.log(oo.get());var t=[];oo.get().forEach((function(e){gn("entitiesAtLocation",bn({x:e.position.x,y:e.position.y})).forEach((function(t){var u=wr.getEntity(t);console.log(u),u.layerUnit&&u.fireEvent("take-damage",{amount:e.dmgTile.dmg})})),t.push(e)})),t.forEach((function(t){t.destroy()})),console.log(oo.get()),console.log("end process dmg")},_o=function(t){console.log("ending turn for "),t.forEach((function(t){console.log(t),t.fireEvent("turn-end",t)}))};console.log("test"),Ir.create((function(t,e,u){u?wr.createPrefab("Wall").add(Qn,{x:t,y:e}):wr.createPrefab("Floor").add(Qn,{x:t,y:e})})),po(),zr(),Tr();requestAnimationFrame((function t(){"setup"==Hr?Hr="EnemyTurnDefend":"EnemyTurnDefend"==Hr?(Hr="EnemyTurnAttack",Tr()):"EnemyTurnAttack"==Hr?(Do(),_o(ro.get()),Hr="PlayerTurnDefend",Tr()):"PlayerTurnDefend"==Hr||"PlayerTurnAttack"==Hr?io():"examine"!=Hr&&"targeting"!=Hr||io(),requestAnimationFrame(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,